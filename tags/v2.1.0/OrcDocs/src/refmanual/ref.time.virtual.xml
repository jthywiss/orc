<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.time.virtual.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2013 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Syntax: Lexical Specifications -->
	<section xml:id="ref.time.virtual" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
		<title>Virtual Time</title>
		<para>
			Virtual time provides the ability to order events in an Orc execution.
			As an expression is executed, the Orc runtime tracks the "current" virtual time.
			A <code>Vawait</code> site call waits for a particular point in time.
			Through use of <code>Vawait</code>, one can set up temporal dependencies among Orc expressions.
		</para>
		<para>
			Simulations in Orc can make use of virtual time to simulate time passage without the unproductive delays caused by real time waits.
			Certain algorithms can be succinctly expressed using virtual time.  (See the shortest path example.)
		</para>
		<para>
			An Orc virtual clock is created with four parameters, conceptually:
			<itemizedlist>
			<listitem><para>A set of points of time (for example, the integers)</para></listitem>
			<listitem><para>Equality and total ordering relations over this set (for example, = and &lt;)</para></listitem>
			<listitem><para>Optionally, a parent clock</para></listitem>
			<listitem><para>The scope (part of the program) over which it applies</para></listitem>
			</itemizedlist>
			(In an actual Orc program, only the total ordering relation is given as an actual argument to a <code>Vclock</code> call.
			The other parameters are implicit.)
		</para>
		<para>
			During execution. a virtual clock tracks:
			<itemizedlist>
			<listitem><para>The current time</para></listitem>
			<listitem><para>A priority queue of pending <code>Vawait</code> calls, in order of their awaited time, as given by the clock's total ordering relation.</para></listitem>
			</itemizedlist>
			When <code>Vawait</code> is called with a time value greater than the current time, that call is enqueued, and does not return until that time.
			Virtual time advances when all execution in the clock's scope becomes <firstterm>quiescent</firstterm>, defined below.
			Upon quiescence in a clock's scope, the clock's current time is updated to the least time among its waiters, and all <code>Vawait</code> calls for that time return.
		</para>
		<section xml:id="ref.time.virtual.quiescence">
			<title>Quiescence</title>
			<para>
				An expression is <indexterm significance="preferred"><primary>quiescence</primary></indexterm><firstterm>quiescent</firstterm> when
				all execution in the expression is either blocked on variables, blocked on certain site calls, halted, or killed.
				In other words, quiescence means no progress can be made in the expression without certain kinds of unblocking.
				Most site calls are not considered quiescent while they are invoked, however a few are;
				most notably <code>Vawait</code> when it is called with a future time value argument.
				Other not-quiescent-while-invoked sites are documented in their entry in the <link linkend="ref.concepts.publish">Standard Library</link> chapter.
				Child virtual clocks are not quiescent until all execution in their scope has halted.
				So, a child clock whose scope is quiescent but not halted is non-quiescent from the viewpoint of the parent clock.
			</para>
			<para>
				Note that expressions blocked on variables are quiescent.
				This normally is the intuitive behavior: for example, <code>x &lt;x&lt; Q()</code> is quiescent if the call to <code>Q</code> is.
				However, if the right side of a pruning combinator is not in the clock's scope, then blocking on a variable bound by the pruning combinator will be quiescent.
				This might be surprising: Suppose <code>val x = </code><replaceable>F</replaceable> is followed by <code>Vclock(IntegerTimeOrdering) >> x</code>.
				The virtual clock scope <code>x</code> will be quiescent if executed before <replaceable>F</replaceable> has published and <code>x</code> has a bound value.
				To avoid this, use the Orc <olink targetdoc="userguide" targetptr="ug.idioms.forkjoin">join idiom</olink>.
				Before calling <code>Vclock</code>, join all potentially-unbound variables used inside the clock scope, like so: <code>(x, y, z) >> Vclock(IntegerTimeOrdering) >> x + y + z</code>.
			</para>
		</section>
		<section xml:id="ref.time.virtual.Vclock">
			<title>Vclock</title>
			<para>
				Executing <code>Vclock(timeComparator) >> e</code> executes the expression <code>e</code> with a virtual clock that has time values ordered by <code>timeComparator</code>.
				A time comparator operates on a particular time value type, for example integers.
				A time comparator is a site that takes two arguments, each of the time value type, and returns the value -1, 0, or 1 to indicate the first argument is less than, equal to, or greater than, respectively, the second argument.
				Note that in the current version of Orc, the site must be a Java site; it cannot be defined in Orc.
				(This limitation may be removed in a future Orc release.)
				The time value type of a clock is implicitly defined by the type of arguments that the given time comparator site accepts.
				The initial value of a virtual clock is established by the first <code>Vawait</code> call in the clock's scope that publishes.
			</para>
			<para>
			    The scope over which a virtual clock is effective is the right side of the pruning combinator in <code>Vclock(timeComparator) >> e</code>.
			    A <code>Vclock</code> call can only be used on the left side of a sequential combinator; use in any other context will be marked by the compiler as an error.
				When the expression <code>e</code> <link linkend="ref.concepts.publish">publishes</link>, the publication, as usual, is a publication of the sequential combinator expression.
				If the <code>Vclock</code> call is in the scope of another virtual clock, that clock is considered the parent clock of this clock.
			</para>
		</section>
		<section xml:id="ref.time.virtual.Vawait">
			<title>Vawait</title>
			<para>
				Executing <code>Vawait(</code><replaceable>t</replaceable><code>)</code> waits quiescently until the the current (innermost) virtual clock advances to time <replaceable>t</replaceable>.
				There may be more than one <code>Vawait</code> call awaiting a given time value.
				All such calls will publish at the same time.
				Exactly one call, selected arbitrarily, will publish <code>true</code>, and the others (if any) will publish <code>false</code>.
				If <code>Vawait(</code><replaceable>t</replaceable><code>)</code> is called when the current virtual time is already <replaceable>t</replaceable>, the call immediately publishes <code>false</code>, without becoming quiescent.
				If the current virtual time is greater than <replaceable>t</replaceable>, the call <link linkend="ref.concepts.states.halt">halts</link> <link linkend="ref.concepts.silent">silently</link>.
				If the current virtual clock does not have defined time—that is, <code>Vawait</code> has not been called yet in the scope of this clock—then the <code>Vawait</code> behaves as if its argument is a future time value.
				If <code>Vawait</code> is called outside of the scope of any virtual clock, the call halts silently.
			</para>
		</section>
		<section xml:id="ref.time.virtual.Vtime">
			<title>Vtime</title>
			<para>
				The <code>Vtime</code> site publishes the current value of the current (innermost) virtual clock.
				If the clock has not had a value set by a <code>Vawait</code> call, or <code>Vtime</code> is calls outside of the scope of any virtual clock, <code>Vtime</code> halts silently.
			</para>
		</section>

		<section xml:id="ref.time.virtual.examples">
			<title>Examples</title>

			<example xml:id="ref.time.virtual.examples.shortestpath">
				<title>Shortest path using a virtual clock</title>
				<programlisting language="orc-demo"><![CDATA[
{- Shortest path through a directed graph, using a virtual clock -}

def Vwait(t :: Integer) = Vawait(t + (Vtime() :!: Integer))

Vclock(IntegerTimeOrder) >> Vawait(0) >> (
type Node = Integer
type Distance = Integer

def path(source :: Node,
		 sink :: Node,
		 cell :: lambda(Node) :: Cell[List[Node]],
		 succ :: lambda(Node) :: (Node,Distance)
		 ) :: List[Node] =
  def run(n :: Node, p :: List[Node]) :: Bot =
    cell(n).write(p) >>
    succ(n) >(m,d)>
    Vwait(d) >>
    run(m,m:p)
  run(source, [source])
  ; reverse(cell(sink).read())

-- A small test graph
val source = 0
val sink = 3

def mkcell() = Cell[List[Node]]()

val cell0 = mkcell()
val cell1 = mkcell()
val cell2 = mkcell()
val cell3 = mkcell()

def cell(Node) :: Cell[List[Node]]
def cell(0) = cell0
def cell(1) = cell1
def cell(2) = cell2
def cell(3) = cell3

def succ(Node) :: (Node,Distance)
def succ(0) = (1,2) | (2,6) | (3,9)
def succ(1) = (3,7)
def succ(2) = (3,2)
def succ(3) = stop

path(source, sink, cell, succ)
)

{-
OUTPUT:
[0, 2, 3]
-}
]]></programlisting>
			</example>

		</section>
		<section xml:id="ref.time.virtual.links">
			<title>Related Links</title>
			<itemizedlist>
				<title>Related Reference Topics</title>
				<listitem><para><link linkend="ref.stdlib.time">Standard Library: Time</link></para></listitem>
				<listitem><para><link linkend="ref.stdlib.time.Vclock"><code>Vclock</code> site</link></para></listitem>
				<listitem><para><link linkend="ref.stdlib.time.Vawait"><code>Vawait</code> site</link></para></listitem>
				<listitem><para><link linkend="ref.stdlib.time.Vtime"><code>Vtime</code> site</link></para></listitem>
			</itemizedlist>
			<itemizedlist>
				<title>Related Tutorial Sections</title>
				<listitem><para><olink targetdoc="userguide" targetptr="ug.idioms.forkjoin">Fork-join</olink></para></listitem>
			</itemizedlist>
		</section>

	</section>
