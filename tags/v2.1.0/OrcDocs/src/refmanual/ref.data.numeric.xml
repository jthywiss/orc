<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.numeric.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.numeric" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Numerics</title>

<para>Orc includes two numeric types, <indexterm><primary>Integer</primary></indexterm><firstterm>integers</firstterm> and <indexterm><primary>Number</primary></indexterm><firstterm>numbers</firstterm>.
Orc's integers are arbitrary-precision two's complement integers. 
Orc's numbers are <indexterm><primary>floating point</primary></indexterm>floating point numbers, with an arbitrary-precision two's complement significand and a 32-bit two's complement exponent (base 10).
These numbers behaves in accordance with the ANSI INCITS 274-1996 subset of ANSI/IEEE Std 754-2008.
Namely, "infinite, NaN, or subnormal results are always treated as errors, and â€“0 results are hidden".
</para>

<para>
Note that the <indexterm><primary>divide</primary></indexterm><link linkend="ref.stdlib.core.Div">divide operation</link> on Orc numbers can encounter a
non-terminating decimal expansion, where there is no exact representable
decimal result.  In this case, the divide operation falls back to division
using IEEE 754 binary64 (formerly called double precision)
binary floating-point operands.
This fall back may result in a loss of precision for this operation.
</para>

<para>
Similarly, the <indexterm><primary>exponent</primary></indexterm><link linkend="ref.stdlib.core.Exponent">exponent operation</link> may fall back to IEEE 754 binary64
binary floating-point operands in the case of a fractional exponent.
This fall back may result in a loss of precision for this operation.
</para>

<section xml:id="ref.data.numeric.literals">
<title>Literals</title>

<section xml:id="ref.data.numeric.literals.syntax">
<title>Syntax</title>
<productionset>
<productionrecap linkend="ebnf.literal.integer"/>
<productionrecap linkend="ebnf.literal.number"/>
<productionrecap linkend="ebnf.literal.decimalpart"/>
<productionrecap linkend="ebnf.literal.exponentpart"/>
</productionset>

<para>Numeric literals in Orc are specified in decimal.
Leading zeros are allowed, but have no significance.  Trailing zeros after a decimal point also have no significance.
If a numeric literal contains a decimal point or an "<code>E</code>", it is a number (floating point) literal, otherwise it is an integer literal.
</para>

</section>

</section>


<section xml:id="ref.data.numeric.operations">
<title>Operations</title>

<para>Notable operations on integers and numbers include:
<itemizedlist>
<listitem><para>Add: <code>+</code></para></listitem>
<listitem><para>Subtract: <code>-</code></para></listitem>
<listitem><para>Negate (unary minus): <code>-</code></para></listitem>
<listitem><para>Multiply: <code>*</code></para></listitem>
<listitem><para>Divide: <code>/</code></para></listitem>
<listitem><para>Exponent: <code>**</code></para></listitem>
<listitem><para>Remainder: <code>%</code></para></listitem>
<listitem><para>Absolute value: <code>abs</code></para></listitem>
<listitem><para>Signum: <code>signum</code></para></listitem>
<listitem><para>Floor: <code>Floor</code></para></listitem>
<listitem><para>Ceiling: <code>Ceil</code></para></listitem>
</itemizedlist>
</para>

<para>
	Arithmetic operators with two integer arguments will perform an integer operation and 
	return an integer result; for example, <code>5 / 2</code> performs integer <indexterm><primary>division</primary></indexterm>division and 
	returns 2. However, if either argument to an operator has a decimal part 
	(even if it is trivial, as in <code>3.0</code>), the other argument will be promoted, and 
	a decimal operation will be performed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both 
	perform decimal division and return 2.5. 
</para>

</section>

<section xml:id="ref.data.numeric.javacalls">
<title>Java calls</title>

<para>
Orc integer values are passed in calls to and returns
from Java code as <code language="java">java.math.BigInteger</code>, or if the callee
method expects a specific numeric type, an Orc integer will be
converted to a <code language="java">java.lang.Byte</code>, <code language="java">java.lang.Short</code>,
<code language="java">java.lang.Integer</code>, <code language="java">java.lang.Long</code>,
<code language="java">java.lang.Float</code>, or <code language="java">java.lang.Double</code>, as appropriate.
These values are boxed and unboxed per <citetitle pubwork="book" xlink:href="http://docs.oracle.com/javase/specs/jls/se5.0/html/conversions.html#5.1.7">The Java Language Specification</citetitle>.
</para>

<para>
Orc number values are passed in calls to and returns
from Java code as <code language="java">java.math.BigDecimal</code>, or if the callee
method expects a specific numeric type, an Orc number will be
converted to a <code language="java">java.lang.Float</code> or 
<code language="java">java.lang.Double</code>, as appropriate.
These values are boxed and unboxed per <citetitle pubwork="book" xlink:href="http://docs.oracle.com/javase/specs/jls/se5.0/html/conversions.html#5.1.7">The Java Language Specification</citetitle>.
</para>

</section>

<section xml:id="ref.data.numeric.type">
  <title>Type</title>
	<para>
		All numeric values (integers and numbers) have type <code>Number</code>. Integer values also
		have the more specific type <code>Integer</code>, which is a subtype of <code>Number</code>.
	</para>
</section>


<section xml:id="ref.data.numeric.examples">
<title>Examples</title>

<example xml:id="ref.data.numeric.examples.precedence">
<title>Operator Precedence</title>
<programlisting language="orc-demo"><![CDATA[
{- Operators follow common precedence practice. 
   Combinators have lower precedence than operators.
-}

4 + 15 / 3 * 2 >result> result

{-
OUTPUT:
14
-}
]]></programlisting>

<para>See the Orc <link linkend="ref.syntax.precedence">precedence table</link>.</para>

</example>

<example xml:id="ref.data.numeric.examples.int2float">
<title>Integer to Number Promotion</title>
<programlisting language="orc-demo"><![CDATA[
{- Arithmetic operations, when all arguments are integers,
   operate as integer operations.  If any argument is a floating-
   point number, then the operation treats all arguments as
   floating-point numbers and operates in that domain.
-}

16 - 8 + 50.0 / 3 * 1 >a>
16 - Floor(8.5) + Ceil(4e1 + 9.99) / 3 * 1 >b>
(a, b) 

{-
OUTPUT:
(24.666666666666668, 24)
-}
]]></programlisting>
</example>

<example xml:id="ref.data.numeric.examples.sqrt">
<title>Square Roots and Squares</title>
<programlisting language="orc-demo"><![CDATA[
{- Calculate the square roots and squares of
   a list of numbers
-}

val nums = [1, 2, 3, 4.0, 5.00]

each(nums) >x> ( 
  x**(1.0/2) >sqrt>
  x**2 >sq>
  (x,sqrt,sq)
)

{-
OUTPUT:PERMUTABLE
(1, 1.0, 1)
(2, 1.4142135623730951, 4)
(3, 1.7320508075688772, 9)
(4.0, 2.0, 16.00)
(5.00, 2.23606797749979, 25.0000)
-}
]]></programlisting>
</example>
		  
</section>

	<section xml:id="ref.data.numeric.links">
		<title>Related Links</title>

		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.stdlib.core.Add"><code>+</code> operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Sub"><code>-</code> operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.UMinus">unary <code>-</code> operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Mult"><code>*</code> operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Exponent"><code>**</code> (exponentiation) operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Div"><code>/</code> operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Mod"><code>%</code> (modulus) operator</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.abs"><code>abs</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.signum"><code>signum</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Floor"><code>Floor</code> site</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Ceil"><code>Ceil</code> site</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.introduction.simple.values">Literal Values</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.introduction.simple.operators">Operators</olink></para></listitem>
		</itemizedlist>
</section>

</section>
