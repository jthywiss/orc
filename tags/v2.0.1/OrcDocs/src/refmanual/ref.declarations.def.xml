<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.declarations.def.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- def -->
	<section xml:id="ref.declarations.def" xmlns="http://docbook.org/ns/docbook">
		<title><code>def</code>:  Define Function</title>
		
		<!-- Index pointers for unwritten terms -->
		<indexterm><primary>argument type</primary></indexterm>
		
		<para>
			The <code><indexterm><primary>def</primary></indexterm>def</code> declaration defines a function. 
			A function definition consists of an identifier, a sequence of <indexterm significance="preferred"><primary>parameter</primary></indexterm><firstterm baseform="parameter">parameters</firstterm>,
		  and a <indexterm significance="preferred"><primary>body</primary></indexterm><firstterm>body</firstterm> expression. 
		</para>
		
		<para>
		  An Orc function behaves much like a function, method, procedure, or subroutine in other programming languages. 
		  However, there are two key differences:
		</para>
		
		<para>
		<itemizedlist>
		<listitem><para>
		Orc functions are <indexterm><primary>lenient</primary></indexterm><link linkend="ref.expressions.call.function">lenient</link>: when a function is called, the argument expressions and the 
		function body are evaluated in parallel. 
		</para></listitem>
		<listitem><para>
		Orc functions may <link linkend="ref.concepts.publish">publish</link> any number of values, including zero,
		during the execution of the function body.
		</para></listitem>		  
		</itemizedlist>
		</para>
		
		<para>
		Orc functions have additional features, many of them adopted from typed functional programming languages:
		</para>
		
		<para>
		<itemizedlist>
		  <listitem><para>Orc functions may be recursive. A group of functions may be mutually recursive.</para></listitem>
		  <listitem><para><link linkend="ref.patterns">Patterns</link> may be used as function parameters.</para></listitem>
		  <listitem><para>A function may have a guard, which allows the function body to be executed only if a given condition holds.</para></listitem>
		  <listitem><para>A function may be defined by multiple clauses.</para></listitem>
		</itemizedlist>
		</para>
	
		  
		<section xml:id="ref.declarations.def.syntax">
		  <title>Syntax</title>
		  <para>
		    <productionset>
		    	<productionrecap linkend="ebnf.declaration.def"/>
		    	<productionrecap linkend="ebnf.parameters"/>
		    	<productionrecap linkend="ebnf.guard"/>
		    </productionset>
		  </para>
    </section>
    
    
		 
		<section xml:id="ref.declarations.def.execution">
		<title>Function Execution</title>
		
		  <para>
		  The simplest case of argument binding uses only <link linkend="ref.patterns.variable">variables</link> and <link linkend="ref.patterns.wildcard">wildcards</link> as parameters.
		  </para>
		
			<para>
		   When a function is <link linkend="ref.expressions.call.function">called</link>, the function body executes,
		   and in parallel the argument expressions of the call are <indexterm><primary>deflate</primary></indexterm><link linkend="ref.concepts.deflate">deflated</link>.
		   </para>
		   
		   <para>
		   If the execution of the body encounters a <link linkend="ref.expressions.variable">use of a parameter</link> whose corresponding argument expression 
		  has not yet published a value, that use <link linkend="ref.concepts.states.block">blocks</link> 
		  until the argument value is available,
			but the rest of the body continues to execute. 
			</para>
			
			<para>
		  Whenever the execution of the body would publish a value, the function call publishes that value.
		  If execution of the body <link linkend="ref.concepts.states.halt">halts</link>, the function call also halts.
		  As a result, a function call might publish any number of times, including zero.
		  </para>
		  
		  <para>
		  If the function call is <link linkend="ref.concepts.states.kill">killed</link>,
		  execution of the body expression is also immediately killed.
		  </para>
		  
		  <para>
		  Because functions are lenient, the following two programs are equivalent:
		  
		  <programlisting language="orc"><![CDATA[
def fn(x,y) = E
fn(G,H)
]]></programlisting>

<programlisting language="orc"><![CDATA[
val x = G
val y = H
E
]]></programlisting>

		</para>
		   
		</section> 
		  
		
		<section xml:id="ref.declarations.def.pattern">
		<title>Patterns as Parameters</title>
		
		  <para>
		  A function parameter may be any pattern. 
		  A <indexterm significance="preferred"><primary>lenient pattern</primary></indexterm><firstterm>lenient pattern</firstterm> is either a variable pattern or a wildcard pattern; 
		  such patterns will never fail to match. 
		  Any other pattern is a <indexterm significance="preferred"><primary>strict pattern</primary></indexterm><firstterm>strict pattern</firstterm>, which could fail to match. 
		  </para>
		  
		  <para>
		  When a function is called, the call blocks until a value is available for each strict pattern. The values are then matched
		  against the strict patterns. If all of these matches succeed, then the function call executes as described earlier. If any 
		  strict pattern match fails, or if any of the argument expressions corresponding to a strict pattern halts, 
		  then the function call halts. 
		  </para>
		  
		  <para>
		  Suppose <code>P</code> is a strict pattern. The following two programs are equivalent:
		  
		  <programlisting language="orc"><![CDATA[
def fn(x,P) = E
fn(G,H)
]]></programlisting>

<programlisting language="orc"><![CDATA[
val x = G
val z = H
z >P> E
]]></programlisting>

		</para>
		
		</section>
		
		
		<section xml:id="ref.declarations.def.recursion">
    <title>Recursion</title>
    
    	<!-- Index pointers for unwritten terms -->
		<indexterm><primary>recursion</primary></indexterm>
    
      <para>
        Functions can be recursive; that is, the name of a function may be used in its own body.
      </para>
        
<programlisting language="orc"><![CDATA[
{- A recursive factorial function -}
def fact(n) = if (n <= 1) then 1 else n * fact(n-1)
]]></programlisting>

      <para>
        A recursive function might continue executing indefinitely, producing an infinite number of publications.
      </para>  
        
<programlisting language="orc"><![CDATA[
{- Publishes a signal every second, forever -}
def metronome() = signal | Rwait(1000) >> metronome()
]]></programlisting>
        
        <para>
        A set of functions may be mutually recursive by naming each other in their bodies.
        There is no special keyword for <indexterm><primary>mutual recursion</primary></indexterm>mutual recursion; 
        whenever two or more function definitions are adjacent, they are allowed to mutually recurse.
        </para>

    </section>
    
		
		<section xml:id="ref.declarations.def.guard">
		<title>Guards</title>
		
		  <para>
		  A function definition may include a guard, of the form <code>if</code> <code>(</code> <replaceable>E</replaceable> <code>)</code>.
		  When a function is called, and each strict pattern matches successfuly as described earlier, then the guard expression
		  <replaceable>E</replaceable> is deflated. If <replaceable>E</replaceable> deflates to <code>true</code>, then the function
		  body is executed. If <replaceable>E</replaceable> deflates to some other value, or halts without publishing a value,
		  then the function call halts silently. 
		  </para>
			
			<para>
		  Suppose <code>P</code> is a strict pattern and <code>Gd</code> is a guard expression.
		  The following two programs are equivalent:
		  
		  <programlisting language="orc"><![CDATA[
def fn(x,P) if (Gd) = E
fn(G,H)
]]></programlisting>

<programlisting language="orc"><![CDATA[
val x = G
val z = H
z >P> Ift(Gd) >> E
]]></programlisting>

			</para>
			
		</section>  
		
		<section xml:id="ref.declarations.def.clauses">
		<title>Clausal Definition</title>
		
		  <para>
			  A function can be defined by a sequence of <indexterm significance="preferred"><primary>clause</primary></indexterm><firstterm baseform="clause">clauses</firstterm>: repeated
			  function definitions with the same identifier but different parameters. Each clause must have
			  the same number of parameters.  
			</para>
			
			<para>
			  When a function with multiple clauses is called, the argument expressions are deflated, and in
			  parallel the first clause is executed.
			  The clause will <indexterm significance="preferred"><primary>clause failure</primary></indexterm><firstterm baseform="clause failure">fail</firstterm> under any of the following conditions:
			  <orderedlist>
			  <listitem><para>One of the parameters is a strict pattern, and that pattern fails to match.</para></listitem>
			  <listitem><para>One of the parameters is a strict pattern, and the corresponding argument expression has halted <link linkend="ref.concepts.silent">silently</link>.</para></listitem>
			  <listitem><para>There is a guard expression, and it did not deflate to <code>true</code>.</para></listitem>
			  </orderedlist>
			  
			  If each strict pattern matches successfully, and the guard expression (if present) deflates to <code>true</code>, 
			  then the corresponding function body executes. 
			  If the clause fails, then the next clause is executed.
			  If the last clause fails, then the function call halts silently. 
			</para>
			
			

	  </section>
		 
	  

	  <section xml:id="ref.declarations.def.type">
	    <title>Type</title>
	    <para>
	      When a function is defined, the function identifier is bound to a <link linkend="ref.data.closure">closure</link>.
	      A definition must be given <link linkend="ref.types.typeinfo.function">additional type information</link> so that the typechecker can deduce the correct <link linkend="ref.data.closure.type">function type</link> for the identifier.
	    </para>
	  </section>
	  

    <section xml:id="ref.declarations.def.examples">
			<title>Examples</title>
			 
			 <example xml:id="ref.declarations.def.examples.lenientpairs">
			 <title>Available Pairs</title>       
<programlisting language="orc-demo"><![CDATA[
{- 
  Publish pairs of results from three computations, as they become available.
-}
def pairs(x, y, z) = (x, y) | (x, z) | (y, z)
			
pairs(Rwait(2000) >> 0, 1, Rwait(1000) >> 2)

{-
OUTPUT:
(1, 2)
(0, 1)
(0, 2)
-}
{-
OUTPUT:
(1, 2)
(0, 2)
(0, 1)
-}
]]></programlisting>
</example>
			  
			<example xml:id="ref.declarations.def.examples.parallelor">
			<title>Parallel-Or Function</title>       
<programlisting language="orc-demo"><![CDATA[
{- 
  Define a parallel-or function. 
-}
def parallelor(x,y) = 
  val first = Ift(x) >> true | Ift(y) >> true | (x || y)
  first
			
parallelor(false, Rwait(1000) >> true)

{-
OUTPUT:
true
-}
]]></programlisting>
</example>
			
			
		  <example xml:id="ref.declarations.def.examples.evenodd">
		  <title>Even/Odd Using Mutual Recursion</title>       
<programlisting language="orc-demo"><![CDATA[
{- Test if a number is even or odd, using mutual recursion -}
def even(n) = Ift(n = 0) >> true
            | Ift(n <: 0) >> odd(n+1) 
            | Ift(n :> 0) >> odd(n-1)
    
def odd(n) = Ift(n = 0) >> false
           | Ift(n <: 0) >> even(n+1) 
           | Ift(n :> 0) >> even(n-1)

odd(-4)

{- 
OUTPUT:
false
-}
]]></programlisting>
</example>       
			
			<example xml:id="ref.declarations.def.examples.listhead">
			<title>List Head</title>
<programlisting language="orc-demo"><![CDATA[
{- 
  Publish the head of a nonempty list.
  If the list is empty, halt silently.
-}
def head(h:_) = h

head([2, 3]) | head([])

{-
OUTPUT:
2
-}
]]></programlisting>
		  </example>
			
			
			<example xml:id="ref.declarations.def.examples.listlength">
			<title>List Length</title>
<programlisting language="orc-demo"><![CDATA[
{- Find the length of a list -}
def length([]) = 0
def length(_:rest) = length(rest) + 1
			
length([1, 2, 4])

{-
OUTPUT:
3
-}
]]></programlisting>
		  </example>
			
			
			<example xml:id="ref.declarations.def.examples.listsum">
			<title>List Sum</title>
<programlisting language="orc-demo"><![CDATA[
{- Sum the elements of a list -}

def sum([]) = 0
def sum(h:t) = h + sum(t)
sum([1, 2, 3])

{-
OUTPUT:
6
-}

]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.declarations.def.examples.zip">
			<title>Same-Length Zip</title>
<programlisting language="orc-demo"><![CDATA[
{- 
  "Zip" a pair of lists together into a list of pairs.
  If the lists are of inequal length, halt silently.
-}
def zip(x:xs, y:ys) = (x, y):zip(xs, ys)
def zip([], []) = []

  zip([0, 1], [false, true]) 
| zip([1, 2, 3], signal)

{-
OUTPUT:
[(0, false), (1, true)]
-}

]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.declarations.def.clausal.examples.fib">
		  <title>Fibonacci Function</title>
<programlisting language="orc-demo"><![CDATA[
{- Fibonacci numbers -}

def fib(0) = 1
def fib(1) = 1
def fib(n) if (n :> 1) = fib(n-1) + fib(n-2)

fib(5)

{-
OUTPUT:
8
-}
]]></programlisting>
		  </example>


	  </section>

		<section xml:id="ref.declarations.def.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.expressions.call.function">Function Calls</link></para></listitem>
			<listitem><para><link linkend="ref.patterns">Patterns</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.publish">Publication</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.states.block">Blocking</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.deflate">Deflation</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.lambda"><code>lambda</code> Expressions</link></para></listitem>
			<listitem><para><link linkend="ref.data.closure">Closures</link></para></listitem>
			<listitem><para><link linkend="ref.types.typeinfo.function">Adding Type Information to Functions</link></para></listitem>
			<listitem><para><link linkend="ref.declarations.defclass"><code>def class</code>: Define Site in Orc</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.introduction.functions">Functions</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.additional.closures">First-class Functions</olink></para></listitem>
		</itemizedlist>
		  
	  </section>
	</section>
