<?xml version="1.0" ?>

<!-- build.xml - Ant buildfile (additional tasks for project build)
     Project Orchard

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<project name="orchard" default="all" basedir=".">
	<description>
		Ant build file for Orchard binary distribution.
	</description>
	<property file="build.properties" />
	<property name="target.name" value="${ant.project.name}-${orc.version}" />

	<fileset id="orchard.war.jars" dir="lib" description="JARs packaged in the Orchard WAR">
		<include name="orc-${orc.version}.jar" /> <!-- maintained by copylib target -->
		<include name="orc-sites-${orc.version}.jar" />  <!-- maintained by copylib target -->
	</fileset>

	<fileset id="orchard.extra.jars" dir="lib" description="JARs needed by Orchard in the container's classpath">
		<include name="*.jar" />
		<!-- already in WAR -->
		<exclude name="orc-*.jar" />
		<exclude name="orc-sites-*.jar" />
		<!-- only used in demo jar -->
		<exclude name="jetty-*.jar" />
		<exclude name="servlet-api*.jar" />
		<!-- for build only -->
		<exclude name="yuicompressor-*.jar" />
	</fileset>

	<fileset id="orchard-demo.extra.jars" dir="lib" description="JARs needed for the standalone Orchard demo apps">
		<include name="jetty-*.jar" />
		<include name="servlet-api*.jar" />
	</fileset>

	<path id="wsgen.classpath" description="Classpath needed to run wsgen on Orchard">
		<pathelement location="build/classes" />
		<pathelement location="lib/orc-${orc.version}.jar" />
		<pathelement location="lib/orc-sites-${orc.version}.jar" />
	</path>

	<path id="kilim.classpath" description="Classpath needed to run Kilim on Orchard">
		<pathelement path="${orc.location.OrcJava}/lib/kilim.jar" />
		<pathelement path="build/classes" />
		<fileset refid="orchard.war.jars" />
		<fileset refid="orchard.extra.jars" />
		<fileset refid="orchard-demo.extra.jars" />
	</path>

	<fileset id="orchard.static-web-files" dir="web" description="Static files to include in the Orchard WAR">
		<include name="**/*" />
		<exclude name="codemirror" />
		<exclude name="orc-ready.js" />
		<exclude name="orc-parser.js" />
		<exclude name="**/CVS" />
		<exclude name="**/.svn" />
	</fileset>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copylib                      
         - - - - - - - - - - - - - - - - - -->
    <target name="copylib">
		<delete> <!-- Remove other Orc versions' JARs -->
			<fileset dir="lib">
				<include name="orc-*.jar" />
				<exclude name="orc-${orc.version}.jar" />
				<exclude name="orc-sites-${orc.version}.jar" />
			</fileset>
		</delete>
		<copy preservelastmodified="true" todir="lib" verbose="true">
			<fileset dir="${orc.location.OrcJava}/build" includes="orc-${orc.version}.jar" />
			<fileset dir="${orc.location.OrcSites}/build" includes="orc-sites-${orc.version}.jar" />
			<fileset dir="${orc.location.OrcSites}/lib" includes="jettison-1.0.1.jar" />  <!-- jaxws-json needs this outside the WAR -->
		</copy>
    </target>

	<!-- ================================= 
          target: wsgen              
         ================================= -->
<!--	<taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen">
			<classpath>
				<pathelement location="tools.jar" />
			</classpath>
		</taskdef>-->
	<target name="wsgen" depends="copylib" description="Generate web service artifacts">
<!--		<wsgen sei="orc.orchard.soap.CompilerService" destdir="build/classes" xendorsed="true">
			<classpath><path refid="wsgen.classpath" /></classpath>
		</wsgen>-->
		<exec executable="wsgen" failonerror="true">
			<arg value="-cp" />
			<arg pathref="wsgen.classpath" />
			<arg value="-d" />
			<arg value="build/classes" />
			<arg value="orc.orchard.soap.CompilerService" />
		</exec>
<!--		<wsgen sei="orc.orchard.soap.ExecutorService" destdir="build/classes" xendorsed="true">
			<classpath><path refid="wsgen.classpath" /></classpath>
		</wsgen>-->
		<exec executable="wsgen" failonerror="true">
			<arg value="-cp" />
			<arg pathref="wsgen.classpath" />
			<arg value="-d" />
			<arg value="build/classes" />
			<arg value="orc.orchard.soap.ExecutorService" />
		</exec>
	</target>

	<!-- ================================= 
          target: properties              
         ================================= -->
	<target name="properties" description="Copy properties files into place">
		<copy file="orchard.properties" todir="build/classes/orc/orchard" />
		<copy file="oauth.jks" todir="build/classes/orc/orchard" />
	</target>

	<!-- ================================= 
          target: kilim              
         ================================= -->
	<target name="kilim" depends="copylib,wsgen,properties" description="Kilim weaving">
		<java classname="kilim.tools.Weaver" fork="yes" failonerror="true">
			<classpath refid="kilim.classpath" />
			<assertions>
				<enable />
			</assertions>
		    <sysproperty key="java.awt.headless" value="true" />
			<arg value="-d" />
			<arg value="build/classes" />
			<arg value="build/classes" />
		</java>
	</target>

	<!-- ================================= 
          target: jaxws-json              
         ================================= -->
	<target name="jaxws-json" description="Build JAX-WS JSON JAR">
		<jar destfile="lib/jaxws-json.jar" duplicate="fail">
			<fileset dir="build/classes">
				<include name="org/jvnet/jax_ws_commons/json/**" />
				<include name="META-INF/services/com.sun.xml.ws.api.BindingIDFactory" />
				<include name="META-INF/services/com.sun.xml.internal.ws.api.BindingIDFactory" />
			</fileset>
		</jar>
	</target>

	<!-- ================================= 
          target: minify              
         ================================= -->
	<target name="minify" description="minify javascript files">
		<java jar="lib/yuicompressor-2.3.6.jar" fork="yes" failonerror="true">
			<arg value="--type" />
			<arg value="js" />
			<arg value="web/orc-ready.js" />
			<arg value="-o" />
			<arg value="web/orc-ready-min.js" />
		</java>
		<java jar="lib/yuicompressor-2.3.6.jar" fork="yes" failonerror="true">
			<arg value="--type" />
			<arg value="js" />
			<arg value="web/orc-parser.js" />
			<arg value="-o" />
			<arg value="web/orc-parser-min.js" />
		</java>
		<!-- codemirror and codemirror-extra -->
		<java jar="lib/yuicompressor-2.3.6.jar" fork="yes" failonerror="true">
			<arg value="--type" />
			<arg value="js" />
			<arg value="web/codemirror/codemirror.js" />
			<arg value="-o" />
			<arg value="build/codemirror-min.tmp" />
		</java>
		<concat destfile="web/codemirror-min.js">
			<filelist files="web/codemirror/README build/codemirror-min.tmp" />
		</concat>
		<delete file="build/codemirror-min.tmp" />
		<concat destfile="build/codemirror-extra.tmp">
			<fileset dir="web/codemirror">
				<include name="*.js" />
				<exclude name="codemirror.js" />
			</fileset>
		</concat>
		<java jar="lib/yuicompressor-2.3.6.jar" fork="yes" failonerror="true">
			<arg value="--type" />
			<arg value="js" />
			<arg value="build/codemirror-extra.tmp" />
			<arg value="-o" />
			<arg value="build/codemirror-extra-min.tmp" />
		</java>
		<delete file="build/codemirror-extra.tmp" />
		<concat destfile="web/codemirror-extra-min.js">
			<filelist files="web/codemirror/README build/codemirror-extra-min.tmp" />
		</concat>
		<delete file="build/codemirror-extra-min.tmp" />
	</target>

	<!-- ================================= 
          target: war              
         ================================= -->
	<target name="war" depends="kilim,jaxws-json,minify" description="generate the war">
		<war destfile="build/${ant.project.name}.war" duplicate="fail">
			<manifest>
				<attribute name="Implementation-Title" value="Orc Orchard" />
				<attribute name="Implementation-Version" value="${orc.version}" />
				<attribute name="Implementation-Vendor" value="The University of Texas at Austin" />
				<attribute name="Implementation-Vendor-Id" value="edu.utexas" />
				<attribute name="Specification-Title" value="Orc Orchard" />
				<attribute name="Specification-Version" value="${orc.version}" />
				<attribute name="Specification-Vendor" value="The University of Texas at Austin" />
			</manifest>
			<fileset refid="orchard.static-web-files" />
			<classes dir="build/classes">
				<exclude name="orc/Orchard.class" />
				<exclude name="orc/OrchardDemo.class" />
				<exclude name="org/jvnet/**" />
				<exclude name="META-INF/**" />
			</classes>
			<lib refid="orchard.war.jars" />
		</war>
	</target>

	<!-- ================================= 
          target: demo-jar              
         ================================= -->
	<target name="demo-jar" depends="war" description="generate the demo jar">
		<war destfile="build/demo-root.war" duplicate="fail">
			<fileset dir="${orc.location.Website}">
				<include name="demo.shtml" />
				<include name="jquery.treeview.css" />
				<include name="tryorc-menu.css" />
				<include name="tryorc-menu.js" />
				<include name="jquery.treeview.min.js" />
				<include name="WEB-INF/**/*" />
				<include name="tryorc/**/*" />
				<include name="images/**/*" />
				<exclude name="**/CVS/*" />
				<exclude name="**/.svn/*" />
			</fileset>
		</war>
		<pathconvert property="orchard-demo.mappedclasspath">
			<path>
				<fileset refid="orchard.extra.jars" />
				<fileset refid="orchard-demo.extra.jars" />
			</path>
			<mapper>
				<chainedmapper>
					<flattenmapper/>
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<manifestclasspath property="orchard-demo.manifestclasspath" jarfile="${target.name}-demo.jar">
			<classpath>
				<pathelement path="${orchard-demo.mappedclasspath}" />
			</classpath>
		</manifestclasspath>
		<jar destfile="build/${target.name}-demo.jar" duplicate="fail">
			<manifest>
				<attribute name="Main-Class" value="orc.OrchardDemo" />
				<attribute name="Class-Path" value="${orchard-demo.manifestclasspath}" />
				<attribute name="Implementation-Title" value="Orc Orchard demo" />
				<attribute name="Implementation-Version" value="${orc.version}" />
				<attribute name="Implementation-Vendor" value="The University of Texas at Austin" />
				<attribute name="Implementation-Vendor-Id" value="edu.utexas" />
				<section name="orc.orchard">
					<attribute name="Implementation-Title" value="Orc Orchard demo" />
					<attribute name="Implementation-Version" value="${orc.version}" />
					<attribute name="Implementation-Vendor" value="The University of Texas at Austin" />
					<attribute name="Implementation-Vendor-Id" value="edu.utexas" />
					<attribute name="Specification-Title" value="Orc Orchard demo" />
					<attribute name="Specification-Version" value="${orc.version}" />
					<attribute name="Specification-Vendor" value="The University of Texas at Austin" />
				</section>
			</manifest>
			<fileset dir="build/classes">
				<include name="orc/Orchard.class" />
				<include name="orc/OrchardDemo.class" />
				<exclude name="org/jvnet/**" />
				<exclude name="META-INF/**/*" />
			</fileset>
			<!-- XXX: We've got this class in two places (OrcSites and the demo-app's JAR).  But, it's one short static method with no fields, so not that bad. -->
			<fileset dir="${orc.location.OrcSites}/build/classes" includes="com/centerkey/utils/BareBonesBrowserLaunch.class" />
		</jar>
		<!-- Useful for testing the demo-app JAR version -->
		<!-- <exec executable="ln" failonerror="no">
			<arg value="-s" />
			<arg value="../lib" />
			<arg value="build/lib" />
		</exec> -->
	</target>

	<!-- ================================= 
          target: zip              
         ================================= -->
    <target name="zip" depends="demo-jar" description="Build orchard.zip for distribution">
    	<delete file="build/${target.name}.zip" />
        <zip destfile="build/${target.name}.zip" duplicate="fail">
        	<zipfileset prefix="${target.name}" file="build/orchard.war" />
        	<zipfileset prefix="${target.name}" file="build/${target.name}-demo.jar" />
        	<zipfileset prefix="${target.name}" file="build/demo-root.war" />
			<zipfileset prefix="${target.name}/lib" refid="orchard.extra.jars" />
			<zipfileset prefix="${target.name}/lib" refid="orchard-demo.extra.jars" />
			<zipfileset prefix="${target.name}" dir=".">
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="INSTALL"/>
				<include name="examples/**"/>
				<include name="licenses.yml"/>
				<include name="licenses/**"/>
				<include name="doc/**"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.svn/*"/>
			</zipfileset>
        </zip>
    </target>

	<!-- ================================= 
          target: demo-app              
         ================================= -->
	<!-- WARNING: this does not work on non-Unix systems (without cp and tar) -->
	<target name="demo-app" depends="demo-jar" description="generate a Mac OS X application">
		<property name="appname" value="Orchard" />
		<property name="appdir" value="build/${appname}.app" />
		<delete dir="${appdir}" /> <!-- clean up any old files -->
		<mkdir dir="${appdir}" />
		<!-- copy most files without filtering -->
		<copy todir="${appdir}">
			<fileset dir="app-skeleton">
				<include name="**/*" />
				<exclude name="**/*.plist" />
				<exclude name="**/CVS/*" />
				<exclude name="**/.svn/*" />
				<exclude name="**/JavaApplicationStub" />
			</fileset>
		</copy>
		<pathconvert property="orchard.extra.jars.JAVAROOT" refid="orchard.extra.jars">
			<map from="${basedir}/lib" to="$JAVAROOT" />
		</pathconvert>
		<pathconvert property="orchard-demo.extra.jars.JAVAROOT" refid="orchard-demo.extra.jars">
			<map from="${basedir}/lib" to="$JAVAROOT" />
		</pathconvert>
		<!-- copy plist files with token filtering -->
		<copy todir="${appdir}">
			<fileset dir="app-skeleton">
				<include name="**/*.plist" />
			</fileset>
			<filterset>
				<filter token="app.jar" value="${appname}.jar" />
				<filter token="app.classpath" value="$JAVAROOT/${appname}.jar:${orchard.extra.jars.JAVAROOT}:${orchard-demo.extra.jars.JAVAROOT}" />
				<filter token="orc.version" value="${orc.version}" />
			</filterset>
		</copy>
		<!-- copy JavaApplicationStub with the unix cp command to preserve permissions -->
		<exec executable="cp" failonerror="true">
			<arg line="-p app-skeleton/Contents/MacOS/JavaApplicationStub" />
			<arg value="${appdir}/Contents/MacOS/JavaApplicationStub" />
		</exec>
		<copy file="build/${target.name}-demo.jar" tofile="${appdir}/Contents/Resources/Java/${appname}.jar" />
		<copy todir="${appdir}/Contents/Resources/Java">
			<fileset dir="build">
				<include name="orchard.war" />
				<include name="demo-root.war" />
			</fileset>
			<fileset refid="orchard.extra.jars" />
			<fileset refid="orchard-demo.extra.jars" />
		</copy>
		<!-- create tgz package -->
		<exec executable="tar" dir="build" failonerror="true">
			<arg line="-zcf ${target.name}-app.tgz ${appname}.app" />
		</exec>
	</target>
	
	<!-- ================================= 
          target: all              
         ================================= -->
    <target name="all" depends="zip,demo-app" description="Build all targets" />

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="clean up">
		<delete file="lib/orc-${orc.version}.jar" />
		<delete file="lib/orc-sites-${orc.version}.jar" />
		<delete file="lib/jaxws-json.jar" />
		<delete dir="build" followsymlinks="no" />
	</target>

</project>
