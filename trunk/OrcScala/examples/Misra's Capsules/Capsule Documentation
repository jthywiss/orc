Do:
Rendezvous with data transmission, GeneralRendezvous.orc needs writing.
  PureRendezvous.orc is working.
Documentation of Readers-writers. Also use Semaphore pool.
Finish SemaphorePool.

A capsule is used to create a site out of an Orc program.

Capsule is like a def. Capsule arguments apply to all instances that 
will ever be created out of this capsule.

Each def within a capsule is a method. 

Call to a method could be made concurrently by many threads, 
and they would all execute concurrently. To avoid concurrent execution,
use semaphores. 

Note: Replace capsule by Site. There is no need for Site within
 Orc programs.

An exercise: Write a wrapper function that takes a closure f as argument,
and returns another closure, wf. Every call to wf behaves like f, except
at most one copy of wf can execute at any time.


def sum2(x,y) = x + y
def sum3(x,y, z) = x + y + z
def capsule Wrap(f) =
 val s = Semaphore(1)
 def main() = 
  s.acquire() >>
  f() >v>
  s.release()>>
  v 
stop

val wf = Wrap(sum2).main()

wf(2,3)