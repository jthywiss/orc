<?xml version="1.0" ?>
<project name="orc" default="jar" basedir=".">
	<description>
		Ant build file for Orc binary distribution.
	</description>
	<property file="build.properties" />
	
	<path id="orc.classpath">
		<fileset dir="${orc.location.lib}" includes="*.jar" />
		<pathelement path="${orc.location.build}" />
	</path>

	<property name="target.name" value="${ant.project.name}-${orc.version}" />
	
	<target name="jar" depends="kilim" description="generate the distribution">
		<!-- Put everything in ${orc.location.build} into orc-sites.jar -->
		<jar jarfile="${target.name}.jar" basedir="${orc.location.build}">
			<exclude name="orc/test/**"/>
			<exclude name="orc/build/**"/>
			<!-- Include library dependencies -->
			<zipgroupfileset dir="${orc.location.lib}">
				<include name="*.jar"/>
				<!-- Only needed for compilation -->
				<exclude name="rats.jar"/>
				<!-- Only needed for compilation -->
				<exclude name="kilim.jar"/>
				<exclude name="jyaml-*.jar"/>
				<!-- Only needed for testing -->
				<exclude name="junit-*.jar"/>
			</zipgroupfileset>
			<manifest>
				<attribute name="Main-Class" value="orc.Orc"/>
			</manifest>	
		</jar>
	</target>
	
	
	<target name="zip" depends="jar" description="generate the ZIP">
		<zip zipfile="${ant.project.name}-${orc.version}.zip">
			<zipfileset prefix="${ant.project.name}-${orc.version}" dir=".">
				<exclude name="**/CVS/*"/>
				<include name="${ant.project.name}-${orc.version}.jar"/>
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="INSTALL"/>
				<include name="examples/**"/>
				<include name="licenses.yml"/>
				<include name="licenses/**"/>
				<include name="doc/**"/>
			</zipfileset>
		</zip>
	</target>
	

	<!-- 
	<target name="macos" depends="jar" description="generate a Mac OS bundle">
		<taskdef name="jarbundler"
		             classpath="${orc.location.jarbundler}/jarbundler.jar" 
		             classname="net.sourceforge.jarbundler.JarBundler"/>

		<jarbundler dir="${orc.location.build}" verbose="true" showPlist="true"
	       	      	name="Orchard"
		            mainclass="orc.Orc"
		            jar="${target.name}.jar"
		            icon="${orchard.icon}"
		            version="${orc.version}"/>
	</target>
	-->
	
	<target name="clean" description="clean up">
		<delete dir="${orc.location.build}" />
		<delete file="${ant.project.name}-${orc.version}.jar"/>
		<delete file="${ant.project.name}-${orc.version}.zip"/>
		<delete file="${ant.project.name}-${orc.version}-doc.zip"/>
	</target>

	<target name="kilim" description="Kilim weaving">
		<java classname="kilim.tools.Weaver" fork="yes">
			<classpath refid="orc.classpath"/>
				<assertions>
					<enable/>
				</assertions>
			<arg value="-d" />
			<arg value="${orc.location.build}" />
			<arg value="${orc.location.build}" />
		</java>
	</target>

	<!-- javac does some weird compilation that Kilim doesn't like, so for now
	     you have to use the eclipse compiler
	<target name="compile" depends="rats" description="javac compile">
		<mkdir dir="${orc.location.build}" />
		<javac source="1.5" target="1.5" debug="yes"
			srcdir="${orc.location.src}"
			destdir="${orc.location.build}"
			classpathref="orc.classpath" />
		<copy todir="${orc.location.build}">
			<fileset dir="${orc.location.src}" excludes="**/*.java **/CVS/*"/>
		</copy>
	</target>
	-->
	
	<target name="stdlib-doc" description="Build standard library docs">
		<java classname="orc.doc.MakeDoc" fork="yes"
				dir="${orc.location.src}/orc/inc/prelude"
				output="stdlib.xml">
			<classpath refid="orc.classpath"/>
				<assertions>
					<enable/>
				</assertions>
			<!-- FIXME: how can we replace this with a fileset? -->
			<arg value="core.inc"/>
			<arg value="state.inc"/>
			<arg value="idioms.inc"/>
			<arg value="list.inc"/>
			<arg value="text.inc"/>
			<arg value="time.inc"/>
			<arg value="util.inc"/>
		</java>
	</target>
	
	<target name="rats" depends="rats1,rats2,rats3" description="Build rats parser" />

	<target name="rats1" depends="rats1.required" unless="rats1.notRequired">
		<java classname="xtc.parser.Rats" fork="yes">
			<classpath>
				<pathelement path="${orc.location.lib}/rats.jar" />
			</classpath>
			<arg value="-lgpl" />
			<arg value="-in" />
			<arg value="${orc.location.src}" />
			<arg value="-out" />
			<arg value="${orc.location.src}/orc/parser" />
			<arg value="${orc.location.src}/orc/parser/OrcParserRats.rats" />
		</java>
	</target>
	<target name="rats1.required">
		<uptodate property="rats1.notRequired"
			srcfile="${orc.location.src}/orc/parser/OrcParserRats.rats"
			targetfile="${orc.location.src}/orc/parser/OrcParserRats.java"/>
	</target>

	<target name="rats2" depends="rats2.required" unless="rats2.notRequired">
		<java classname="xtc.parser.Rats" fork="yes">
			<classpath>
				<pathelement path="${orc.location.lib}/rats.jar" />
			</classpath>
			<arg value="-lgpl" />
			<arg value="-in" />
			<arg value="${orc.location.src}" />
			<arg value="-out" />
			<arg value="${orc.location.src}/orc/doc" />
			<arg value="${orc.location.src}/orc/doc/DocParser.rats" />
		</java>
	</target>
	<target name="rats2.required">
		<uptodate property="rats2.notRequired"
			srcfile="${orc.location.src}/orc/doc/DocParser.rats"
			targetfile="${orc.location.src}/orc/doc/DocParser.java"/>
	</target>
	
	<target name="rats3" depends="rats3.required" unless="rats3.notRequired">
		<java classname="xtc.parser.Rats" fork="yes">
			<classpath>
				<pathelement path="${orc.location.lib}/rats.jar" />
			</classpath>
			<arg value="-lgpl" />
			<arg value="-in" />
			<arg value="${orc.location.src}" />
			<arg value="-out" />
			<arg value="${orc.location.src}/orc/parser" />
			<arg value="${orc.location.src}/orc/parser/OrcLiteralParser.rats" />
		</java>
	</target>
	<target name="rats3.required">
		<uptodate property="rats3.notRequired"
			srcfile="${orc.location.src}/orc/parser/OrcLiteralParser.rats"
			targetfile="${orc.location.src}/orc/parser/OrcLiteralParser.java"/>
	</target>

	<target name="ChangeLog" description="ChangeLog">
		<exec executable="cvs2cl">
			<arg value="--hide-filenames" />
			<arg value="--no-wrap" />
			<arg value="-F" /> <arg value="TRUNK" />
		</exec>
	</target>
	<target name="javadoc" description="Build Javadoc">
		<delete dir="${orc.location.javadoc}" />
		<javadoc destdir="${orc.location.javadoc}"
				author="true"
				access="protected"
				source="1.5"
				sourcepath="${orc.location.src}"
				splitindex="true"
				windowtitle="Orc ${orc.version}"
				doctitle="Orc ${orc.version}"
				use="true"
				version="true">
			<classpath refid="orc.classpath"/>
		</javadoc>
		<zip zipfile="${ant.project.name}-${orc.version}-doc.zip" basedir="${orc.location.javadoc}" />
	</target>
</project>
