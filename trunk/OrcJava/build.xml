<?xml version="1.0" ?>
<project name="orc" default="jar" basedir=".">
	<description>
		Ant build file for Orc binary distribution.
	</description>
	<property file="build.properties" />
	<property file="googlecode.properties" />
	<property name="target.name" value="${ant.project.name}-${orc.version}" />
	
	<path id="orc.classpath">
		<fileset dir="lib" includes="*.jar" />
		<pathelement path="build/classes" />
	</path>
	
	<target name="jar" depends="kilim" description="generate the distribution">
		<jar jarfile="build/${target.name}.jar" basedir="build/classes">
			<exclude name="orc/test/**"/>
			<!-- Include library dependencies -->
			<zipgroupfileset dir="lib">
				<include name="*.jar"/>
				<!-- Only needed for testing -->
				<exclude name="junit-*.jar"/>
				<!-- Only needed for compilation -->
				<exclude name="rats.jar"/>
				<exclude name="kilim.jar"/>
				<exclude name="AppleJavaExtensions.jar"/>
			</zipgroupfileset>
			<manifest>
				<attribute name="Main-Class" value="orc.gui.OrcGui"/>
			</manifest>	
		</jar>
	</target>
	
	
	<target name="zip" depends="jar,win-setup" description="generate the ZIP">
		<zip zipfile="build/${target.name}.zip">
			<zipfileset prefix="${target.name}" dir="build">
				<include name="${target.name}.jar"/>
				<include name="SETUP.BAT"/>
			</zipfileset>
			<zipfileset prefix="${target.name}" dir=".">
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="INSTALL"/>
				<include name="examples/**"/>
				<include name="licenses.yml"/>
				<include name="licenses/**"/>
				<include name="doc/**"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.svn/*"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="clean" description="clean up">
		<delete dir="build" />
	</target>

	<target name="kilim" description="Kilim weaving">
		<java classname="kilim.tools.Weaver" fork="yes">
			<classpath refid="orc.classpath"/>
			<assertions><enable/></assertions>
			<arg value="-d" />
			<arg value="build/classes" />
			<arg value="build/classes" />
		</java>
	</target>

	<!-- javac does some weird compilation that Kilim doesn't like, so for now
	     you have to use the eclipse compiler
	<target name="compile" depends="rats" description="javac compile">
		<mkdir dir="build/classes" />
		<javac source="1.5" target="1.5" debug="yes"
			srcdir="src"
			destdir="build/classes"
			classpathref="orc.classpath" />
		<copy todir="build/classes">
			<fileset dir="src" excludes="**/*.java **/CVS/*"/>
		</copy>
	</target>
	-->
	
	<target name="stdlib-doc" description="Build standard library docs">
		<java classname="orc.doc.MakeDoc" fork="yes"
				dir="src/orc/inc/prelude"
				output="build/stdlib.xml">
			<classpath refid="orc.classpath"/>
				<assertions>
					<enable/>
				</assertions>
			<!-- FIXME: how can we replace this with a fileset? -->
			<arg value="core.inc"/>
			<arg value="state.inc"/>
			<arg value="idioms.inc"/>
			<arg value="list.inc"/>
			<arg value="text.inc"/>
			<arg value="time.inc"/>
			<arg value="util.inc"/>
		</java>
	</target>
	
	<target name="rats" depends="rats1,rats2,rats3" description="Build rats parser" />

	<target name="rats1" depends="rats1.required" unless="rats1.notRequired">
		<java classname="xtc.parser.Rats" fork="yes">
			<classpath>
				<pathelement path="lib/rats.jar" />
			</classpath>
			<arg value="-lgpl" />
			<arg value="-in" />
			<arg value="src" />
			<arg value="-out" />
			<arg value="src/orc/parser" />
			<arg value="src/orc/parser/OrcParserRats.rats" />
		</java>
	</target>
	<target name="rats1.required">
		<uptodate property="rats1.notRequired"
			srcfile="src/orc/parser/OrcParserRats.rats"
			targetfile="src/orc/parser/OrcParserRats.java"/>
	</target>

	<target name="rats2" depends="rats2.required" unless="rats2.notRequired">
		<java classname="xtc.parser.Rats" fork="yes">
			<classpath>
				<pathelement path="lib/rats.jar" />
			</classpath>
			<arg value="-lgpl" />
			<arg value="-in" />
			<arg value="src" />
			<arg value="-out" />
			<arg value="src/orc/doc" />
			<arg value="src/orc/doc/DocParser.rats" />
		</java>
	</target>
	<target name="rats2.required">
		<uptodate property="rats2.notRequired"
			srcfile="src/orc/doc/DocParser.rats"
			targetfile="src/orc/doc/DocParser.java"/>
	</target>
	
	<target name="rats3" depends="rats3.required" unless="rats3.notRequired">
		<java classname="xtc.parser.Rats" fork="yes">
			<classpath>
				<pathelement path="lib/rats.jar" />
			</classpath>
			<arg value="-lgpl" />
			<arg value="-in" />
			<arg value="src" />
			<arg value="-out" />
			<arg value="src/orc/parser" />
			<arg value="src/orc/parser/OrcLiteralParser.rats" />
		</java>
	</target>
	<target name="rats3.required">
		<uptodate property="rats3.notRequired"
			srcfile="src/orc/parser/OrcLiteralParser.rats"
			targetfile="src/orc/parser/OrcLiteralParser.java"/>
	</target>

	<target name="javadoc" description="Build Javadoc">
		<delete dir="build/javadoc" />
		<javadoc destdir="build/javadoc"
				author="true"
				access="protected"
				source="1.5"
				sourcepath="src"
				splitindex="true"
				windowtitle="Orc ${orc.version}"
				doctitle="Orc ${orc.version}"
				use="true"
				version="true">
			<classpath refid="orc.classpath"/>
		</javadoc>
		<zip zipfile="build/${target.name}-doc.zip" basedir="build/javadoc" />
	</target>

	<!-- WARNING: this does not work on non-Unix systems (without ln and tar) -->
	<target name="app" depends="jar" description="generate a Mac OS bundle">
		<delete dir="build/${target.name}"/> <!-- clean up any old files -->
		<property name="appdir" value="build/${target.name}/Orc.app" />
		<mkdir dir="${appdir}"/>
		<!-- first copy plist files with token filtering -->
		<copy todir="${appdir}">
			<fileset dir="app-skeleton">
				<include name="**/*.plist"/>
			</fileset>
			<filterset>
				<filter token="orc.version" value="${orc.version}"/>
				<filter token="orc.jar" value="${target.name}.jar"/>
			</filterset>
		</copy>
		<!-- then copy remaining files without filtering -->
		<copy todir="${appdir}">
			<fileset dir="app-skeleton">
				<include name="**/*"/>
				<exclude name="**/*.plist"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.svn/*"/>
			</fileset>
		</copy>
		<!-- copy jar -->
		<copy file="build/${target.name}.jar" todir="${appdir}/Contents/Resources/Java" />
		<!-- create symlink -->
		<exec executable="ln">
			<arg value="-s" />
			<arg value="/Developer/Applications/Xcode.app/Contents/Library/Spotlight/SourceCode.mdimporter/Contents/MacOS" />
			<arg value="${appdir}/Contents/Library/Spotlight/Orc.mdimporter/Contents/MacOS" />
		</exec>
		<!-- zip doesn't include symlinks
		<zip zipfile="build/${target.name}-app.zip">
			<zipfileset prefix="${target.name}" dir="build">
				<include name="${app.dir}/**"/>
			</zipfileset>
			<zipfileset prefix="${target.name}" dir=".">
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="INSTALL"/>
				<include name="examples/**"/>
				<include name="licenses.yml"/>
				<include name="licenses/**"/>
				<include name="doc/**"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.svn/*"/>
			</zipfileset>
		</zip>
		-->
		<!-- create directory with supplemental files -->
		<copy todir="build/${target.name}">
			<fileset dir=".">
				<include name="README"/>
				<include name="LICENSE"/>
				<include name="INSTALL"/>
				<include name="examples/**"/>
				<include name="licenses.yml"/>
				<include name="licenses/**"/>
				<include name="doc/**"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.svn/*"/>
			</fileset>
		</copy>
		<!-- create tgz package -->
		<exec executable="tar" dir="build">
			<arg line="-zcf ${target.name}-app.tgz ${target.name}" />
		</exec>
	</target>

	<target name="win-setup" description="create SETUP.BAT">
		<copy file="SETUP.BAT" todir="build">
			<filterset><filter token="orc.jar" value="${target.name}.jar"/></filterset>
		</copy>
	</target>

	<target name="upload" depends="zip,javadoc" description="upload to google code">
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
			classpath="lib/ant-googlecode-0.0.1.jar" name="gcupload"/>
		<gcupload 
			username="${orc.googlecode.username}" 
			password="${orc.googlecode.password}" 
			projectname="orc" 
			filename="build/${target.name}.zip" 
			targetfilename="${target.name}.zip"
			summary="Core Orc interpreter."
			labels="Featured, Type-Archive, OpSys-All" />
		<gcupload 
			username="${orc.googlecode.username}" 
			password="${orc.googlecode.password}" 
			projectname="orc" 
			filename="build/${target.name}-doc.zip" 
			targetfilename="${target.name}-doc.zip"
			summary="Javadoc documentation for core Orc interpreter."
			labels="Type-Docs, OpSys-All" />
	</target>
</project>
