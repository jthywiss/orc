<?xml version="1.0" encoding="UTF-8"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="serif,Symbol,ZapfDingbats" font-size="10pt" text-align="justify" line-height="normal" font-selection-strategy="character-by-character" line-height-shift-adjustment="disregard-shifts" language="en"><fo:layout-master-set><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="blank"><fo:region-body margin-top="0.5in" margin-bottom="0.5in" display-align="center" region-name="blank-body"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-blank"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-blank"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-first"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-odd"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-even"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-first"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-odd"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-even"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-first"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-odd"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-even"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-first"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-odd"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-even"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-first"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-odd"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-even"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-first"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-odd"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-even"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="blank-draft"><fo:region-body margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-blank"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-blank"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-first-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-odd-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="titlepage-even-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-first-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-odd-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="lot-even-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-first-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-odd-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="front-even-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-first-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-odd-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="body-even-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-first-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-odd-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in - 0pt" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="back-even-draft"><fo:region-body column-count="1" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-first-draft"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-first"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-first"/></fo:simple-page-master><fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-odd-draft"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-odd"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-odd"/></fo:simple-page-master><fo:simple-page-master margin-left="1in" margin-right="1in" margin-bottom="0.5in" margin-top="0.5in" page-height="11in" page-width="8.5in" master-name="index-even-draft"><fo:region-body column-count="2" column-gap="12pt" margin-top="0.5in" margin-bottom="0.5in" background-image="url(http://docbook.sourceforge.net/release/images/draft.png)" background-attachment="fixed" background-repeat="no-repeat" background-position-horizontal="center" background-position-vertical="center"/><fo:region-before display-align="before" extent="0.4in" region-name="xsl-region-before-even"/><fo:region-after display-align="after" extent="0.4in" region-name="xsl-region-after-even"/></fo:simple-page-master><fo:page-sequence-master master-name="titlepage"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="titlepage-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="titlepage-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="lot-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="lot-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="front-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="front-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="body-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="body-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="back-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="back-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank"/><fo:conditional-page-master-reference page-position="first" master-reference="index-first"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="index-odd"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="titlepage-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank-draft"/><fo:conditional-page-master-reference page-position="first" master-reference="titlepage-first-draft"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="titlepage-odd-draft"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="titlepage-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="lot-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank-draft"/><fo:conditional-page-master-reference page-position="first" master-reference="lot-first-draft"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="lot-odd-draft"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="lot-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="front-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank-draft"/><fo:conditional-page-master-reference page-position="first" master-reference="front-first-draft"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="front-odd-draft"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="front-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="body-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank-draft"/><fo:conditional-page-master-reference page-position="first" master-reference="body-first-draft"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="body-odd-draft"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="body-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="back-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank-draft"/><fo:conditional-page-master-reference page-position="first" master-reference="back-first-draft"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="back-odd-draft"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="back-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master><fo:page-sequence-master master-name="index-draft"><fo:repeatable-page-master-alternatives><fo:conditional-page-master-reference blank-or-not-blank="blank" master-reference="blank-draft"/><fo:conditional-page-master-reference page-position="first" master-reference="index-first-draft"/><fo:conditional-page-master-reference odd-or-even="odd" master-reference="index-odd-draft"/><fo:conditional-page-master-reference odd-or-even="even" master-reference="index-odd-draft"/></fo:repeatable-page-master-alternatives></fo:page-sequence-master></fo:layout-master-set><fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" master-reference="lot" hyphenate="true" language="en" format="i" initial-page-number="auto" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="blank-body"><fo:block text-align="center"/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="4pc" end-indent="0pt"><fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" id="toc...N2000B"><fo:block><fo:block><fo:block font-family="sans-serif,Symbol,ZapfDingbats" font-weight="bold" font-size="17.28pt" start-indent="0pt" margin-left="0pt" space-after="0.5em" space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em">Table of Contents</fo:block></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2000E">1. Introducing Orc</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2000E"><fo:page-number-citation ref-id="N2000E"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language">2. The Orc Programming Language</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language"><fo:page-number-citation ref-id="language"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.language" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2001F">Introduction</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2001F"><fo:page-number-citation ref-id="N2001F"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.base">Base Expressions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.base"><fo:page-number-citation ref-id="language.base"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.language.base" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20049">Constants</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20049"><fo:page-number-citation ref-id="N20049"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20084">Variables</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20084"><fo:page-number-citation ref-id="N20084"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2008C">Call</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2008C"><fo:page-number-citation ref-id="N2008C"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.base.oeprators">Operators</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.base.oeprators"><fo:page-number-citation ref-id="language.base.oeprators"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2019E">If</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2019E"><fo:page-number-citation ref-id="N2019E"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201BF">Data structures</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201BF"><fo:page-number-citation ref-id="N201BF"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N201F5">Messages</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N201F5"><fo:page-number-citation ref-id="N201F5"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2023C">Stop</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2023C"><fo:page-number-citation ref-id="N2023C"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.combinators">Combinators</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.combinators"><fo:page-number-citation ref-id="language.combinators"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.language.combinators" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.combinators.bar">Bar ( | )</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.combinators.bar"><fo:page-number-citation ref-id="language.combinators.bar"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.combinators.push">Push ( &gt;&gt; )</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.combinators.push"><fo:page-number-citation ref-id="language.combinators.push"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.combinators.pull">Pull ( &lt;&lt; )</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.combinators.pull"><fo:page-number-citation ref-id="language.combinators.pull"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.combinators.before">Before ( ; )</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.combinators.before"><fo:page-number-citation ref-id="language.combinators.before"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.patterns">Patterns</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.patterns"><fo:page-number-citation ref-id="language.patterns"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.language.patterns" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N202F3">Syntax</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N202F3"><fo:page-number-citation ref-id="N202F3"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N203D4">Occurrences</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N203D4"><fo:page-number-citation ref-id="N203D4"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2040B">Patterns as views</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2040B"><fo:page-number-citation ref-id="N2040B"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.declarations">Declarations</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.declarations"><fo:page-number-citation ref-id="language.declarations"/></fo:basic-link></fo:inline></fo:block><fo:block id="toc.N2000B.language.declarations" margin-left="24pt"><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="language.declarations.val">Val</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="language.declarations.val"><fo:page-number-citation ref-id="language.declarations.val"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20456">Functions</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20456"><fo:page-number-citation ref-id="N20456"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N2050D">Services</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N2050D"><fo:page-number-citation ref-id="N2050D"/></fo:basic-link></fo:inline></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20534">Includes</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20534"><fo:page-number-citation ref-id="N20534"/></fo:basic-link></fo:inline></fo:block></fo:block><fo:block text-align-last="justify" text-align="start" end-indent="24pt" last-line-end-indent="-24pt"><fo:inline keep-with-next.within-line="always"><fo:basic-link internal-destination="N20540">Comments</fo:basic-link></fo:inline><fo:inline keep-together.within-line="always"> <fo:leader keep-with-next.within-line="always" leader-alignment="reference-area" leader-pattern-width="3pt" leader-pattern="dots"/> <fo:basic-link internal-destination="N20540"><fo:page-number-citation ref-id="N20540"/></fo:basic-link></fo:inline></fo:block></fo:block></fo:block></fo:flow></fo:page-sequence>

<fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" master-reference="body" hyphenate="true" language="en" format="1" initial-page-number="1" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block>Introducing Orc</fo:block></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block>Introducing Orc</fo:block></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="blank-body"><fo:block text-align="center"/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="4pc" end-indent="0pt"><fo:block id="N2000E"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block margin-left="0pt"><fo:block font-weight="bold" font-size="24.8832pt"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="left" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Chapter 1. Introducing Orc</fo:block></fo:block></fo:block></fo:block></fo:block>

</fo:flow></fo:page-sequence>




<fo:page-sequence xmlns:axf="http://www.antennahouse.com/names/XSL/Extensions" master-reference="body" hyphenate="true" language="en" format="1" initial-page-number="auto" force-page-count="no-force" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2"><fo:static-content flow-name="xsl-region-before-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block>The Orc Programming Language</fo:block></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block>The Orc Programming Language</fo:block></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-before-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-bottom-width="0.5pt" border-bottom-style="solid" border-bottom-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="before" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="center" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="before" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader color="black" leader-pattern="rule" leader-length="1in"/></fo:block></fo:static-content><fo:static-content flow-name="blank-body"><fo:block text-align="center"/></fo:static-content><fo:static-content flow-name="xsl-region-after-first"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-odd"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-even"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after-blank"><fo:block font-family="serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:table table-layout="fixed" width="100%" border-top-width="0.5pt" border-top-style="solid" border-top-color="black"><fo:table-column column-number="1" column-width="proportional-column-width(1)"/><fo:table-column column-number="2" column-width="proportional-column-width(1)"/><fo:table-column column-number="3" column-width="proportional-column-width(1)"/><fo:table-body><fo:table-row block-progression-dimension.minimum="14pt"><fo:table-cell display-align="after" text-align="left" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="center" relative-align="baseline"><fo:block><fo:block><fo:page-number/></fo:block></fo:block></fo:table-cell><fo:table-cell display-align="after" text-align="right" relative-align="baseline"><fo:block><fo:block/></fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body" start-indent="4pc" end-indent="0pt"><fo:block id="language"><fo:block font-family="sans-serif,Symbol,ZapfDingbats"><fo:block margin-left="0pt"><fo:block font-weight="bold" font-size="24.8832pt"><fo:block keep-with-next.within-column="always" space-before.optimum="10pt" space-before.minimum="10pt * 0.8" space-before.maximum="10pt * 1.2" hyphenate="false" text-align="left" start-indent="0pt" hyphenation-character="-" hyphenation-push-character-count="2" hyphenation-remain-character-count="2">Chapter 2. The Orc Programming Language</fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
In this chapter, we describe the full capabilities of the Orc programming language. This is intended
to be a comprehensive reference for the Orc programmer.  
</fo:block>

<fo:block id="N2001F"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Introduction</fo:marker><fo:block font-size="20.735999999999997pt">Introduction</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Orc more strongly resembles functional programming languages such as Haskell and ML than imperative
languages such as Java and C. The reader is assumed to have at least a passing familiarity with the
concept of variable binding (as opposed to variable assignment), as encountered in functional
languages, as well as lexical scope. It may also help to be familiar with the concepts of lexical 
closure and pattern matching.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An Orc program is a structured expressions which does computation, invokes services, and then
<fo:inline font-style="italic">publishes</fo:inline> some number of values. Publishing a value is similar to
returning a value in other languages, except that an expression may publish multiple times,
or it might never publish at all. An expression which never publishes is called 
<fo:inline font-style="italic">silent</fo:inline>.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An Orc program is built up from <fo:basic-link internal-destination="language.base"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">base expressions</fo:inline></fo:basic-link>, the simplest 
programs. These are connected by <fo:basic-link internal-destination="language.combinators"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">combinators</fo:inline></fo:basic-link> to form 
larger expressions. Such expressions may also be enclosed by 
<fo:basic-link internal-destination="language.declarations"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">declarations</fo:inline></fo:basic-link> which define functions, compute values, or 
introduce new sites. Orc expressions are always compositional: two expressions joined by a combinator
form an expression, and an expression prefixed by a declaration also forms an expression.
</fo:block>
</fo:block>




<fo:block id="language.base"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Base Expressions</fo:marker><fo:block font-size="20.735999999999997pt">Base Expressions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An Orc program is built up from base expressions. A base expression on its own is always a valid Orc program. 
</fo:block>

<fo:block id="N20049"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Constants</fo:marker><fo:block font-size="17.28pt">Constants</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The simplest program one can write is a constant value. Orc supports the following set of constants:

<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N2004F"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20051"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
<fo:block>
Integer constants: <fo:inline font-family="monospace">( ... -1, 0, 1 ... )</fo:inline>
</fo:block>
</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N2005A"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
<fo:block>
Booleans: <fo:inline font-family="monospace">true</fo:inline> and <fo:inline font-family="monospace">false</fo:inline>
</fo:block>
</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20066"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
<fo:block>
Strings: <fo:inline font-family="monospace">"orc"</fo:inline>, <fo:inline font-family="monospace">"ceci n'est pas une |"</fo:inline>
</fo:block>
</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N20072"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
<fo:block>
A special value <fo:inline font-family="monospace">signal</fo:inline>, which carries no information (analagous to the unit value <fo:inline font-family="monospace">()</fo:inline> in ML). 
</fo:block>
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
When evaluated, a constant simply publishes that value immediately.
</fo:block>

</fo:block>

<fo:block id="N20084"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Variables</fo:marker><fo:block font-size="17.28pt">Variables</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An identifier on its own is a valid expression; it represents a variable. It waits for that variable to 
be bound, and then publishes that bound value. If the variable is already bound when the expression is 
evaluated, its bound value is published immediately. The expression never publishes if the variable never
becomes bound.
</fo:block>

</fo:block>

<fo:block id="N2008C"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Call</fo:marker><fo:block font-size="17.28pt">Call</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An identifier followed by a parenthesized sequence of <fo:inline font-style="italic">arguments</fo:inline> is a call.
A call may have zero arguments, in which case we write an identifier followed by empty parens <fo:inline font-family="monospace">()</fo:inline>.
The identifier is a variable which names the value that will be called. For now, we assume that
the arguments are either variables or constants.  
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A call does nothing until the identifier is bound to a value (the <fo:inline font-style="italic">target</fo:inline>).
Once the target is known, the behavior of the call depends on whether the target is a site or a 
<fo:inline xmlns:xlink="http://www.w3.org/1999/xlink"> defined function</fo:inline>.

<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N200A2"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N200A4"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
If the target is a site, the call subsequently waits for each variable argument to be bound;
we say that calls to sites are <fo:inline font-style="italic">strict</fo:inline> since they must wait for all of
their arguments to be bound. Once the values of all of the arguments are known (constants
are always known and variables are known once they have bound values), the service associated
with that site is invoked with those values. The call waits for the service to respond with
a value. If the service responds, the call publishes that value. The call acknowledges at most
one response from the service, so at most one publication occurs.  
</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N200AA"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
If the target is a defined function, the call is replaced by the body of the function, 
where each of the call's arguments is substituted for the function's formal parameters in
the body (even if those arguments are unbound variables). We say that function calls are
<fo:inline font-style="italic">lenient</fo:inline> because they do not need to wait for their arguments to be
bound. 
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N200B1"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block>
Any Orc expression can be used as an argument; see 
<fo:basic-link internal-destination="language.combinators.pull.args"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">the pull combinator</fo:inline></fo:basic-link><fo:basic-link xmlns:xlink="http://www.w3.org/1999/xlink" internal-destination="language.combinators.pull.args"><fo:inline keep-together.within-line="always"> [<fo:page-number-citation ref-id="language.combinators.pull.args"/>]</fo:inline></fo:basic-link> for more details.
</fo:block></fo:block>

</fo:block>


</fo:block>
 

<fo:block id="language.base.oeprators"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Operators</fo:marker><fo:block font-size="17.28pt">Operators</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Orc supports a standard set of arithmetic, logical, and comparison operators. 
They are written in the usual infix style, and have C-like precedence. 


<fo:block space-before.minimum="0.5em" space-before.optimum="1em" space-before.maximum="2em" space-after.minimum="0.5em" space-after.optimum="1em" space-after.maximum="2em" id="ops-table" xmlns:rx="http://www.renderx.com/XSL/Extensions"><fo:table border-before-width.conditionality="retain" border-collapse="collapse" border-left-style="none" border-right-style="none" border-top-style="none" border-bottom-style="none" table-layout="fixed" width="80%"><fo:table-column column-number="1"/><fo:table-column column-number="2" column-width="proportional-column-width(3)"/><fo:table-column column-number="3"/><fo:table-column column-number="4" column-width="proportional-column-width(3)"/><fo:table-column column-number="5"/><fo:table-column column-number="6" column-width="proportional-column-width(3)"/><fo:table-header end-indent="0pt" start-indent="0pt"><fo:table-row keep-with-next.within-column="always"><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block font-weight="bold">Arithmetic</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block font-weight="bold">Comparison</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block font-weight="bold">Logical</fo:block></fo:table-cell></fo:table-row></fo:table-header><fo:table-body end-indent="0pt" start-indent="0pt"><fo:table-row><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">+</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>addition</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">=</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>equality</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">&amp;&amp;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>logical and</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">-</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>subtraction</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">/=</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>inequality</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">||</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>logical or</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">*</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>multiplication</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">&lt;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>less than</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">~</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>logical not</fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">/</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>division</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">&gt;</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>greater than</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block> </fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">%</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>modulus</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">&lt;=</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>less than or equal</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block> </fo:block></fo:table-cell></fo:table-row><fo:table-row><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block> </fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block><fo:inline font-family="monospace">&gt;=</fo:inline></fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left"><fo:block>greater than or equal</fo:block></fo:table-cell><fo:table-cell padding-left="2pt" padding-right="2pt" padding-top="2pt" padding-bottom="2pt" text-align="left" number-columns-spanned="2"><fo:block> </fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:block>

</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
These operators are actually sites, and behave like sites; they differ only in syntax. 
Accordingly, any Orc expression can be used as an operand; it undergoes the same 
<fo:basic-link internal-destination="language.combinators.pull.args"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">translation</fo:inline></fo:basic-link><fo:basic-link xmlns:xlink="http://www.w3.org/1999/xlink" internal-destination="language.combinators.pull.args"><fo:inline keep-together.within-line="always"> [<fo:page-number-citation ref-id="language.combinators.pull.args"/>]</fo:inline></fo:basic-link> as an argument to a call.
</fo:block>

</fo:block>

<fo:block id="N2019E"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">If</fo:marker><fo:block font-size="17.28pt">If</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The expression <fo:inline font-family="monospace">if(b)</fo:inline>, where <fo:inline font-family="monospace">b</fo:inline> is some boolean expression,
will publish a signal if <fo:inline font-family="monospace">b</fo:inline> evaluates to true, and otherwise remains silent.
<fo:inline font-family="monospace">if</fo:inline> is used together with the <fo:basic-link internal-destination="language.combinators.push"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">push
combinator</fo:inline></fo:basic-link> to form conditional expressions.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-family="monospace">if</fo:inline> is a site; it is called a <fo:inline font-style="italic">fundamental site</fo:inline> because it
is always available.
</fo:block>
</fo:block>

<fo:block id="N201BF"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Data structures</fo:marker><fo:block font-size="17.28pt">Data structures</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Orc supports two basic data structures:

<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" space-after.optimum="1em" space-after.minimum="0.8em" space-after.maximum="1.2em" provisional-label-separation="0.2em" provisional-distance-between-starts="1.0em" id="N201C5"><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N201C7"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
A <fo:inline font-style="italic">tuple</fo:inline> is a comma-separated sequence of arguments enclosed
by parentheses. It looks like a call without a preceding identifier: <fo:inline font-family="monospace">(x,2,y)</fo:inline>. 
A tuple must have at least two arguments. Like a site call, a tuple waits for each of its 
arguments to become bound. Then, it publishes a tuple value containing each of those bound values.
</fo:block></fo:list-item-body></fo:list-item><fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="N201D0"><fo:list-item-label end-indent="label-end()"><fo:block>•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()"><fo:block>
A <fo:inline font-style="italic">list</fo:inline> is a comma-separated sequence of arguments enclosed by
square brackets: <fo:inline font-family="monospace">[2,11,0]</fo:inline>. It may be of any length, including zero; the
empty list is written <fo:inline font-family="monospace">[]</fo:inline>. A list can also be extended using the 
<fo:inline font-style="italic">cons</fo:inline> operation, written <fo:inline font-family="monospace">h:t</fo:inline>, which publishes a new 
list whose first element is <fo:inline font-family="monospace">h</fo:inline> and whose tail is <fo:inline font-family="monospace">t</fo:inline>.  
</fo:block></fo:list-item-body></fo:list-item></fo:list-block>
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Again, as with operators, each data structuring operation is actually a site call.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
To learn more about inspecting and using these data structures after they have been
created, read about <fo:basic-link internal-destination="language.patterns"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">patterns</fo:inline></fo:basic-link>.
</fo:block>

</fo:block>


<fo:block id="N201F5"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Messages</fo:marker><fo:block font-size="17.28pt">Messages</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
In many object-oriented programming languages, one calls a method or accesses a field of an
object using the dot operator; for example, <fo:inline font-family="monospace">obj.m()</fo:inline> calls the method
<fo:inline font-family="monospace">m</fo:inline> of the object <fo:inline font-family="monospace">obj</fo:inline>. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
There is a special kind of call in Orc which serves a similar purpose. One may write
<fo:inline font-family="monospace">x.msg</fo:inline>, for any identifiers <fo:inline font-family="monospace">x</fo:inline> and <fo:inline font-family="monospace">msg</fo:inline>. This attempts
to send the <fo:inline font-style="italic">message</fo:inline> 'msg' to the value bound to <fo:inline font-family="monospace">x</fo:inline>. 
The message may not be understood, in which case no publication occurs. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Typically this capability is used so that sites may be treated like objects, with multiple
methods and fields. For example, a channel <fo:inline font-family="monospace">c</fo:inline> might understand the messages
<fo:inline font-family="monospace">get</fo:inline> and <fo:inline font-family="monospace">put</fo:inline>, to get values from and put values on that channel,
respectively. Such calls would be written <fo:inline font-family="monospace">c.get()</fo:inline>, or <fo:inline font-family="monospace">c.put(6)</fo:inline>.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N20228"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block>
Such calls actually occur in two steps: first <fo:inline font-family="monospace">c.put</fo:inline> sends the message
<fo:inline font-family="monospace">put</fo:inline> to the value <fo:inline font-family="monospace">c</fo:inline>; this publishes a site whose only purpose
is to put values to that channel. Then, that 'put site' is called on the argument
<fo:inline font-family="monospace">6</fo:inline>, sending 6 on that channel. Readers familiar with functional programming
will recognize this technique as <fo:inline font-style="italic">currying</fo:inline>.
</fo:block></fo:block>
</fo:block>



</fo:block>


<fo:block id="N2023C"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Stop</fo:marker><fo:block font-size="17.28pt">Stop</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-family="monospace">stop</fo:inline> is a special base expression which is silent and does no computation. 
It is typically used together with a <fo:basic-link internal-destination="language.combinators.push"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">push</fo:inline></fo:basic-link>
to silence the publications of another expression.
</fo:block>
</fo:block>



</fo:block>

<fo:block id="language.combinators"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Combinators</fo:marker><fo:block font-size="20.735999999999997pt">Combinators</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block id="language.combinators.bar"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Bar ( | )</fo:marker><fo:block font-size="17.28pt">Bar ( <fo:inline font-family="monospace">|</fo:inline> )</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The bar combinator <fo:inline font-family="monospace">|</fo:inline> executes two expressions in parallel, 
and publishes each of their publications as they occur. It is associative and commutative. 
</fo:block>
</fo:block>

<fo:block id="language.combinators.push"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Push ( &gt;&gt; )</fo:marker><fo:block font-size="17.28pt">Push ( <fo:inline font-family="monospace">&gt;&gt;</fo:inline> )</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The push combinator <fo:inline font-family="monospace">&gt;x&gt;</fo:inline> executes its left side; for each publication on the left side, 
a new copy of the right side starts, with the variable <fo:inline font-family="monospace">x</fo:inline> bound to that published value.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A push can be written as <fo:inline font-family="monospace">&gt;&gt;</fo:inline>, with no variable name, which behaves similarly except that
no variable binding occurs.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The variable name within the combinator may be replaced with an arbitrary pattern 
(see <fo:basic-link internal-destination="language.patterns"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">Patterns</fo:inline></fo:basic-link>). 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Pushing is right-associative, and it has higher precedence than bar.
</fo:block>

</fo:block>

<fo:block id="language.combinators.pull"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Pull ( &lt;&lt; )</fo:marker><fo:block font-size="17.28pt">Pull ( <fo:inline font-family="monospace">&lt;&lt;</fo:inline> )</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The pull combinator executes its left and right sides in parallel. 
Calls using <fo:inline font-family="monospace">x</fo:inline> on the left side block until it is bound. 
The first publication of the right side is bound to <fo:inline font-family="monospace">x</fo:inline>;
this causes the rest of the right side to stop executing. That
expression may not evaluate further; any site calls already in progress
will continue, but their return values will be ignored.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A pull can be written as <fo:inline font-family="monospace">&lt;&lt;</fo:inline>, with no variable name, which behaves similarly except that
no variable binding occurs. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The variable name within the combinator may be replaced with an arbitrary pattern 
(see <fo:basic-link internal-destination="language.patterns"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">Patterns</fo:inline></fo:basic-link>). 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Pulling is left-associative, and it has lower precedence than bar.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="language.combinators.pull.args">
A call may be written with complex expressions as arguments. This is actually a shorthand for using a pull
to evaluate each of those expressions and bind its result to a variable. For example,

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N202A6">
M(x+5, 4, N() | R())
</fo:block>

is just another way of writing

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N202A9">
M(y, 4, z)
	&lt;y&lt; x+5
	&lt;z&lt; N() | R()
</fo:block>

Thus, all of the rules governing pull apply to using an expression as an argument: it may publish at most one
value, and it terminates when it publishes a value.
</fo:block>

</fo:block>

<fo:block id="language.combinators.before"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Before ( ; )</fo:marker><fo:block font-size="17.28pt">Before ( <fo:inline font-family="monospace">;</fo:inline> )</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The before combinator executes its left side, publishing each of its publications as they occur.
When the left side has completely finished executing (i.e. it is equivalent to <fo:inline xmlns:xlink="http://www.w3.org/1999/xlink"><fo:inline font-family="monospace">stop</fo:inline></fo:inline>), then the right side executes.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N202BD"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block>
The before combinator is intended to capture as closely as possible the notion of sequential
processing, as denoted by <fo:inline font-family="monospace">;</fo:inline> in other languages. It was not present in the
original formulation of the Orc concurrency calculus; it has been added to support computation
and iteration over strictly finite data. 
</fo:block></fo:block>

</fo:block>

</fo:block>



</fo:block>

<fo:block id="language.patterns"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Patterns</fo:marker><fo:block font-size="20.735999999999997pt">Patterns</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A <fo:inline font-style="italic">pattern</fo:inline> is a special construct that may take the place of a variable binding. It examines the structure
of a published value, rather than simply binding that value to a single variable. It may <fo:inline font-style="italic">match</fo:inline> the value, 
capturing components of the value, and then bind those component values to variables or publish them. Or, it may <fo:inline font-style="italic">refuse</fo:inline> 
the value, silencing that publication entirely. A pattern is called <fo:inline font-style="italic">refutable</fo:inline> if it can refuse a value;
otherwise it is <fo:inline font-style="italic">irrefutable</fo:inline>. 
</fo:block>



<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N202E1"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Whenever possible, the structure of a pattern mimics the structure of an expression that would publish a value recognized by that pattern.
For example, the pattern <fo:inline font-family="monospace">(x,[y,z])</fo:inline> matches the value published by the expression <fo:inline font-family="monospace">(true,[3,4])</fo:inline>. However, the
converse is not true: if a pattern matches a value, the source of that value is not necessarily an expression with the same structure.
This is particularly true when <fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">views</fo:inline> are used. 
</fo:block>
</fo:block></fo:block>




<fo:block id="N202F3"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Syntax</fo:marker><fo:block font-size="17.28pt">Syntax</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
This section describes the syntax of patterns. All patterns are assumed to be refutable 
unless stated otherwise. 
</fo:block>

<fo:block id="N202FA"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Variable</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Variables are the most basic patterns.
A variable pattern simply binds the matched value to that variable. 
It is an irrefutable pattern. 
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N20300"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Important</fo:block><fo:block>
Patterns must be <fo:inline font-style="italic">linear</fo:inline>, meaning that a 
pattern may not mention the same variable more than once.
</fo:block></fo:block>
</fo:block>
</fo:block>

<fo:block id="N20308"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Wildcard</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A wildcard pattern, written <fo:inline font-family="monospace">_</fo:inline>,  matches any value, and does not bind any variables. 
It is the same as binding a variable which is not used anywhere. Like variables, wildcards are irrefutable.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N20311"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block>
The empty push (<fo:inline font-family="monospace">&gt;&gt;</fo:inline>) and empty pull (<fo:inline font-family="monospace">&lt;&lt;</fo:inline>) combinator forms 
are just shorthand for (<fo:inline font-family="monospace">&gt;_&gt;</fo:inline>) and (<fo:inline font-family="monospace">&lt;_&lt;</fo:inline>) respectively.
</fo:block></fo:block> 

</fo:block>
</fo:block>

<fo:block id="N20322"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Literal</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
A literal pattern can be any <fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">constant value</fo:inline>.
It will only match that value, and will refuse any others.
</fo:block>


<fo:block id="N2032B"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Tuple</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A tuple of patterns matches only a tuple value of exactly the same size; it refuses any other value.
It recursively matches the elements of the tuple against its own member patterns.
A tuple pattern must contain at least two subpatterns.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For example, the expression

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20334">
( (1,2) | (1,3) | (5,4) )  &gt;(1,x)&gt;  x
</fo:block>

will publish <fo:inline font-family="monospace">2</fo:inline> and <fo:inline font-family="monospace">3</fo:inline> but not <fo:inline font-family="monospace">4</fo:inline>, because the pattern 
<fo:inline font-family="monospace">(1,x)</fo:inline> refuses the value <fo:inline font-family="monospace">(5,4)</fo:inline>.
</fo:block>

</fo:block>


<fo:block id="N20348"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">List</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A list of patterns matches a list value of exactly the same length, refusing any other value.
It recursively matches each item of the list value against each of its member patterns. 
A list pattern may have any number of subpatterns, including zero.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For example, the expression

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20351">
( [4] | [5,6] | [7,8,9] )  &gt;[x,y]&gt;  x+y
</fo:block>

publishes only <fo:inline font-family="monospace">11</fo:inline>; the pattern refuses the other two lists because they are of the wrong length.
</fo:block>

</fo:block>


<fo:block id="N20359"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Cons</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
It is also possible to use the cons (<fo:inline font-family="monospace">:</fo:inline>) operator in a pattern, to split a list into its head and tail.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20362">
[1,2,3]  &gt;h:t&gt;  ( h | t )
</fo:block>

This publishes <fo:inline font-family="monospace">1</fo:inline> and <fo:inline font-family="monospace">[2,3]</fo:inline>. 

Note that a cons pattern refuses the empty list.

</fo:block>
</fo:block>

<fo:block id="N2036D"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Bang</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A bang pattern, written <fo:inline font-family="monospace">!p</fo:inline>, will publish the value that matches the pattern 
<fo:inline font-family="monospace">p</fo:inline> if the match is successful. This pattern is refutable only if <fo:inline font-family="monospace">p</fo:inline> is refutable.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2037C">
(1,2,3)  &gt;(x,!y,!z)&gt; stop
</fo:block>

This publishes <fo:inline font-family="monospace">2</fo:inline> and <fo:inline font-family="monospace">3</fo:inline>. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Note that a bang pattern will not publish if the overall match fails, even if its particular match succeeds:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20388">
( (1,2,3) | (4,5,6) )  &gt;(1,!x,y)&gt;  stop
</fo:block>

This publishes only <fo:inline font-family="monospace">2</fo:inline>. Even though the pattern <fo:inline font-family="monospace">x</fo:inline> matches the value <fo:inline font-family="monospace">5</fo:inline>, 
the overall pattern <fo:inline font-family="monospace">(1,!x,y)</fo:inline> refuses the value <fo:inline font-family="monospace">(4,5,6)</fo:inline>, so <fo:inline font-family="monospace">5</fo:inline> is not published.
</fo:block>

</fo:block>

<fo:block id="N2039F"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">As</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The pattern <fo:inline font-family="monospace">p as x</fo:inline> can be used to capture a whole subpattern <fo:inline font-family="monospace">p</fo:inline> and bind it to the variable <fo:inline font-family="monospace">x</fo:inline>.
This pattern is refutable only if <fo:inline font-family="monospace">p</fo:inline> is refutable.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N203B1">
(1,(2,3))  &gt;(x,(2,z) as w)&gt;  w
</fo:block>

This publishes <fo:inline font-family="monospace">(2,3)</fo:inline>.
</fo:block>

</fo:block>

<fo:block id="N203B9"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Site</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A site pattern, written <fo:inline font-family="monospace">M(p,...,p)</fo:inline>, matches any value which was published by a call to the
site <fo:inline font-family="monospace">M</fo:inline> with arguments that match the tuple <fo:inline font-family="monospace">(p,...,p)</fo:inline>. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Site patterns provide a generalized version of datatype matching, as seen in the <fo:inline font-family="monospace">case .. of</fo:inline>
 or <fo:inline font-family="monospace">match .. with </fo:inline> constructs provided by Haskell and ML.
</fo:block> 
 
</fo:block>


</fo:block>


<fo:block id="N203D4"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Occurrences</fo:marker><fo:block font-size="17.28pt">Occurrences</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">These are the syntactic contexts in which a pattern may replace a normal variable binding.
The effect of a pattern may be subtly different depending on the syntactic context in which it appears.</fo:block>

<fo:block id="N203DB"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">In a push</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A pattern may replace the variable name in a push combinator. When the left side publishes a value, that value
is checked against the pattern. If it matches, a new copy of the right hand side starts with all of the pattern's
variables bound in it. If the pattern refuses the value, that publication is ignored; no new copy of the right
hand side is created.
</fo:block>
</fo:block>

<fo:block id="N203E3"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">In a pull</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A pattern may replace the variable name in a pull combinator. When the right side publishes a value, that value
is checked against the pattern. If it matches, the pattern's variables become bound in the left side and the
right side terminates, as expected. However, if the pattern refuses the value, then the publication is ignored
and the right side continues to execute as normal.
</fo:block>
</fo:block>

<fo:block id="N203EB"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">In a <fo:inline font-family="monospace">val</fo:inline> declaration</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A pattern may replace the variable name in a 
<fo:basic-link internal-destination="language.declarations.val"><fo:inline xmlns:xlink="http://www.w3.org/1999/xlink"><fo:inline font-family="monospace">val</fo:inline> declaration</fo:inline></fo:basic-link>. Since a val is just a shorthand
for writing a pull, its behavior is exactly the same: whenever the expression publishes a value, it is checked
against the pattern; if the pattern refuses, the publication is ignored and the expression continues executing,
whereas if if matches, the pattern's variables are bound and the expression terminates.
</fo:block>
</fo:block>

<fo:block id="N203FC"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">As function arguments</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A pattern may replace any formal parameter in a function clause. Whenever that function is called, its
arguments are matched against the argument patterns of each clause in linear order. If every argument
pattern of a clause matches, then the patterns' variables are bound in that clause's body and the body
executes. Otherwise, the next clause is tried.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N20402"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block> 
Since function calls in Orc are not strict, some of the arguments may not be bound when they are matched
against a pattern. If an unbound argument is matched against a <fo:inline font-style="italic">refutable</fo:inline> pattern,
then that match waits for the variable to become bound, since it is impossible to tell if the pattern
will refuse without knowing the bound value. 
</fo:block></fo:block>
</fo:block>
</fo:block>

</fo:block>


<fo:block id="N2040B"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Patterns as views</fo:marker><fo:block font-size="17.28pt">Patterns as views</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
In addition to matching data structures constructed within Orc, patterns can also be used to match
external data structures and values. In this setting, a pattern does not necessarily observe the
true structure of the data, but instead provides a <fo:inline font-style="italic">view</fo:inline> of that data.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For example, a list pattern can be used to view some sequentially structured data (such as lines
in a file) as if it were a list. The views allowed on a value are determined by the value itself;
for example, a value which does not support a list view will be refused by any list pattern it
is matched against.
</fo:block>




</fo:block>


</fo:block>


<fo:block id="language.declarations"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Declarations</fo:marker><fo:block font-size="20.735999999999997pt">Declarations</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
In addition to using combinators, Orc expressions can also be built up by adding declarations. 
A declaration is a directive that precedes an expression. It does not publish any values on its
own; instead introducing one or more new identifiers so that they can be used in that expression. 
The expression following a declaration is called the <fo:inline font-style="italic">scoped expression</fo:inline> 
of that declaration. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Unless specifically stated otherwise, the scoped expression begins executing 
immediately, without waiting for the declaration to do any computation. If the scoped expression
reaches an identifier introduced by that declaration before the declaration has given it a value,
the identifier is considered unbound.
</fo:block>

<fo:block id="language.declarations.val"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Val</fo:marker><fo:block font-size="17.28pt">Val</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The simplest declaration is a value declaration. It binds the first publication of an expression 
to a variable. It is written:
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-family="monospace">val x = </fo:inline><fo:inline font-style="italic">expr</fo:inline>
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
 
This evaluates the expression <fo:inline font-style="italic">expr</fo:inline> until it publishes a value, and then binds
that value to the variable <fo:inline font-style="italic">x</fo:inline> and terminates <fo:inline font-style="italic">expr</fo:inline>. It is a shorthand
for a pull combinator; if the scoped expression is <fo:inline font-style="italic">g</fo:inline>, then writing this
declaration is exactly the same as writing:
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-style="italic">g</fo:inline> <fo:inline font-family="monospace">&lt;x&lt;</fo:inline> <fo:inline font-style="italic">expr</fo:inline>
</fo:block>

</fo:block>

<fo:block id="N20456"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Functions</fo:marker><fo:block font-size="17.28pt">Functions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block id="N2045A"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Introduction</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

Like most other programming languages, Orc has the capability to define <fo:inline font-style="italic">functions</fo:inline>,
which take arguments and are invoked in the same way as sites. Functions are defined using the keyword
<fo:inline font-family="monospace">def</fo:inline>, in the following way:

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-family="monospace">def F(</fo:inline><fo:inline font-style="italic">args</fo:inline><fo:inline font-family="monospace">) = </fo:inline><fo:inline font-style="italic">expr</fo:inline>
</fo:block>

<fo:inline font-family="monospace">F</fo:inline> is the name of the function. It may have any number of arguments; if it has zero arguments,
empty parentheses are still written <fo:inline font-family="monospace">()</fo:inline>. <fo:inline font-style="italic">expr</fo:inline> is the body of the expression.

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
For example, the expression

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2047B">
def E(x,y) = x | y | x+y
E(2,3)
</fo:block>

publishes the values 2, 3, and 5.

</fo:block>

</fo:block>

<fo:block id="N20480"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Leniency</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
As discussed in the <fo:inline xmlns:xlink="http://www.w3.org/1999/xlink">section on calls</fo:inline>, functions are lenient,
or 'call-by-name'. Function calls do not need to wait for all of their arguments to be bound:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2048A">
E(a,b) 
    &lt;a&lt; stop
    &lt;b&lt; 4
</fo:block>

This will publish 4, even though the variable <fo:inline font-family="monospace">a</fo:inline> is never bound. 
The call <fo:inline font-family="monospace">E(a,b)</fo:inline> occurs immediately, effectively executing the 
expression <fo:inline font-family="monospace">a | b | a+b</fo:inline> in its place.

</fo:block>

</fo:block>

<fo:block id="N20498"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Recursion</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

Definitions can be recursive; that is, the name of a definition is bound in its own body.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2049C">
def countdown(n) = if(n &gt; 0) &gt;&gt; ( n | countdown(n-1) )
countdown(3)
</fo:block>

This publishes 3, 2, and 1. 

</fo:block>

<fo:block id="N204A0"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Mutual Recursion</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

Mutual recursion is also supported: 

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204A4">
def even(n) = 
  if(n &gt; 0) &gt;&gt; odd(n-1)
| if(n &lt; 0) &gt;&gt; odd(n+1)
| if(n = 0) &gt;&gt; true
def odd(n) = 
  if(n &gt; 0) &gt;&gt; even(n-1)
| if(n &lt; 0) &gt;&gt; even(n+1)
| if(n = 0) &gt;&gt; false
</fo:block>

There is no special keyword for mutual recursion; any contiguous sequence of definitions is assumed to be 
mutually recursive.

</fo:block>


<fo:block id="N204A8"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Closure</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Definitions are actually values, just like any other value. Defining an expression creates a special 
value called a <fo:inline font-style="italic">closure</fo:inline> and binds it. Thus, it can be published, or put into a data structure, 
like any other value:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204B1">
f(1) | f(3)
&lt;f&lt; 
(def E(x) = x+1
 E)
</fo:block>

This publishes 2 and 4. It defines the expression <fo:inline font-family="monospace">E</fo:inline>, then publishes that 
definition as a closure, which is then bound to the variable <fo:inline font-family="monospace">f</fo:inline> and called twice. 
</fo:block>

</fo:block>


<fo:block id="N204BC"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Lexical Closure</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Like any other declaration, a function definition may appear within the context of any expression. This
means that variables from that context may appear in the body of the function:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204C2">
val pi = 3.14159
def area(r) = pi * r * r
</fo:block>

Functions are also values in Orc, so the function <fo:inline font-family="monospace">area</fo:inline> might be published, and then called
in some other context. What happens to the variable <fo:inline font-family="monospace">pi</fo:inline>? It 'remembers' the value that it
had when the function <fo:inline font-family="monospace">area</fo:inline> was defined (3.14159), and uses that value, even if <fo:inline font-family="monospace">pi</fo:inline>
has a different value in the scope where the function is called: 

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204D1">
val pi = 2.71828
area(10)
</fo:block>

This is called lexical closure: the body of the function is a closure because it remembers the values 
of all of its free variables, and the closure is 'lexical' because it occurs when the function is defined, 
not when it is used.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" margin-left="0.25in" margin-right="0.25in" id="N204D4"><fo:block font-size="14pt" font-weight="bold" hyphenate="false" keep-with-next.within-column="always">Note</fo:block><fo:block>
Lexical closure has an interesting subtlety when combined with variables that are in scope but have
not yet been bound to a value (such as pull variables). Since the closure must capture the values of
each of those variables, the closure operation itself must actually wait for all of those variables
to become bound. Thus, the function name itself is unbound until the closure can be created. 
</fo:block></fo:block>  

</fo:block>

</fo:block>

<fo:block id="N204D9"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Anonymouns Functions</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
Sometimes one would like to create a closure directly without bothering to name the defined expression. 
There is a special keyword <fo:inline font-family="monospace">lambda</fo:inline> for this purpose:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204E0">
lambda (x) = x+1
{-    equivalent to (def E(x) = x+1  E)    -}
</fo:block>

</fo:block>

<fo:block id="N204E4"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Patterns</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

A defined expression, just like the push and pull combinators, may have patterns instead of variables as its arguments:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204E8">
def E([x,y]) = x | y
</fo:block>

This definition publishes two elements of a list, but only if its argument is in fact a two-element list. 
Otherwise, the call remains silent.

Note that using patterns as arguments interacts with the call-by-name semantics of defined expressions: 
if a pattern is refutable, then the body of the expression cannot execute until that argument is bound.
</fo:block>


<fo:block id="N204EC"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Clauses</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The combination of functions and pattern matching offers a powerful capability: 
<fo:inline font-style="italic">clausal</fo:inline> definition of functions. We can define expressions which execute 
different code depending on the structure of their arguments. Here's an example:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N204F5">
def sum([]) = 0
def sum(h:t) = h + sum(t)
</fo:block>

<fo:inline font-family="monospace">sum(L)</fo:inline> publishes the sum of the numbers in the list <fo:inline font-family="monospace">L</fo:inline>. It has two clauses: 
one which matches the empty list, and one which matches any nonempty list. If its argument is an empty 
list, it returns 0, the appropriate sum for an empty list. If the argument is a nonempty list, it adds 
the first element of that list to the sum of all of the other elements. In this way, it recursively finds 
the sum of the list.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A function may have multiple clauses, each of which has a sequence of patterns to match each formal argument, 
and a body expression. All clauses of a function must have the same number of arguments. Any contiguous sequence 
of definitions with the same name and different arguments is interpreted as  a clausal definition, where each
individual definition is a clause of the larger function. 
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
When the function is called, the clauses are tried in the order in which they appear until a match is found. 
If no clause matches, the call remains silent.
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Mutual recursion and clausal definitions are allowed to occur together.
For example, this definition takes a list and publishes a new list with every other element repeated:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20507">
def stutter([]) = []
def stutter(h:t) = h:h:mutter(t)
def mutter([]) = []
def mutter(h:t) = h:stutter(t)
</fo:block>

</fo:block>

</fo:block>



</fo:block>


<fo:block id="N2050D"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Services</fo:marker><fo:block font-size="17.28pt">Services</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Certain declarations are used to provide access to external services.
</fo:block>

<fo:block id="N20514"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Sites</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A <fo:inline font-family="monospace">site</fo:inline> declaration instantiates a Java object to be used as a site in an Orc program:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2051D">
{-  Define the Buffer site  -}
site Buffer = orc.lib.state.Buffer
</fo:block>
</fo:block>

</fo:block>

<fo:block id="N20522"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:block font-size="14.399999999999999pt">Classes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">

A <fo:inline font-family="monospace">class</fo:inline> declaration looks very similar to a <fo:inline font-family="monospace">site</fo:inline> declaration, 
but serves a different purpose. Rather than creating a Java object to be used as a site, 
this declaration actually creates a proxy for the class's constructor, which can then be 
invoked, and its publications used like Java objects by using the dot syntax:

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2052E">
class Str = java.lang.String
val s = Str("foo")
s.concat("bar")
</fo:block>

Thus, it makes all of the capabilities of sequential Java programming, including its
large standard library, available to the Orc programmer. 

</fo:block>

</fo:block>

</fo:block>

<fo:block id="N20534"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Includes</fo:marker><fo:block font-size="17.28pt">Includes</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An include declaration names a file containing a sequence of declarations. It loads all
of those declarations in the order given in the file, as if they had been written 
directly into the program at that point. This is a convenient way to organize large groups 
of declarations.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2053A">
{-  include some useful list functions  -}
include "inc/orc/list.inc"
</fo:block>

</fo:block>

</fo:block>

</fo:block>


<fo:block id="N20540"><fo:block><fo:block><fo:block keep-together.within-column="always" font-family="sans-serif,Symbol,ZapfDingbats" margin-left="0pt"><fo:block keep-with-next.within-column="always"><fo:block font-family="sans-serif" font-weight="bold" keep-with-next.within-column="always" space-before.minimum="0.8em" space-before.optimum="1.0em" space-before.maximum="1.2em" text-align="left" start-indent="0pt"><fo:marker marker-class-name="section.head.marker">Comments</fo:marker><fo:block font-size="20.735999999999997pt">Comments</fo:block></fo:block></fo:block></fo:block></fo:block></fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The implementation supports two kinds of comments.   

</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A line which begins with two dashes (<fo:inline font-family="monospace">--</fo:inline>), preceded only by whitespace, is a single line comment.
The region from the two dashes to the next encountered newline, inclusive, is ignored.  
<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N2054C">
-- This is a single line comment.
	 -- This is also a single line comment.
</fo:block>
</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Multiline comments are enclosed by matching braces of the form <fo:inline font-family="monospace">{- -}</fo:inline>. 
Multiline comments may be nested. They may appear anywhere, even in the middle of an expression.

<fo:block space-before.minimum="0.8em" space-before.optimum="1em" space-before.maximum="1.2em" space-after.minimum="0.8em" space-after.optimum="1em" space-after.maximum="1.2em" hyphenate="false" wrap-option="no-wrap" white-space-collapse="false" white-space-treatment="preserve" linefeed-treatment="preserve" text-align="start" font-family="monospace" id="N20555">
{- 
   This is a
   multiline comment.
-}
   
{- Multiline comments {- can be nested -} -}

1 | 2 {- They may appear anywhere, -} &gt;x&gt; {- even in the middle of an expression. -} x+3
</fo:block>

</fo:block>

<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Commented regions are ignored by the compiler. They are often eliminated entirely by the parser, 
and do not appear in intermediate representations of a program.
</fo:block>

</fo:block>

</fo:flow></fo:page-sequence>


 
</fo:root>