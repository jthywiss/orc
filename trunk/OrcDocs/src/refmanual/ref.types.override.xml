<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.types.override.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Type overrides -->
<section xml:id="ref.types.override" xmlns="http://docbook.org/ns/docbook">
	<title>Type Override</title>

   <productionset>
	   <productionrecap linkend="ebnf.expression.typeoverride"/>
	 </productionset>

<para>
While the typechecker can be helpful, it will not accept programs that are not typesafe according to
its <link linkend="ref.types.metatheory">algorithm</link>. This can be burdensome when the programmer knows that an expression will have a
certain type but the typechecker cannot verify it.
</para>

<para>
Since the typechecker is optional, it can always be turned off in these cases. But this is often
too drastic a solution: typechecking difficulties often arise from small segments of a much larger
program, and the rest of the program still benefits from typechecking. 
</para>

<para>
The typechecker may be selectively disabled for parts of a program. For this purpose,
the typechecker allows an <indexterm significance="preferred"><primary>override</primary></indexterm><firstterm>override</firstterm>
of the type of an expression. Overriding is like <link linkend="ref.types.typeinfo">adding type information</link> to an expression, 
but rather than verifying that an expression has the stated type, the typechecker instead 
assumes that the stated type is correct, without examining the expression at all. Thus, 
the programmer can supply any type without being restricted by the typechecking algorithm.
</para>

<para>
This feature should be used sparingly, with the knowledge that it does compromise the integrity
of the typechecking algorithm. If the supplied type is wrong, runtime type errors could propagate to any
part of the program that depends on that type. Overrides are useful for rapid prototyping, but
they are not recommended for production code.
</para>
		 
	<section xml:id="ref.types.override.links">
		<title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.types.typeinfo">Adding Type Information</link></para></listitem>
			<listitem><para><link linkend="ref.types.metatheory">Metatheory</link></para></listitem>
		</itemizedlist>
	</section>
	  
</section>
