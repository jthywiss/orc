<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.combinators.otherwise.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Otherwise Combinator -->
   <section xml:id="ref.combinators.otherwise" xmlns="http://docbook.org/ns/docbook">
      <title>Otherwise Combinator</title>
      
      <!-- Index pointers for unwritten terms -->
      <indexterm><primary>otherwise combinator</primary></indexterm>
	  <indexterm><primary>silent</primary></indexterm>
      
	  <section xml:id="ref.combinators.otherwise.syntax">
		  <title>Syntax</title>
		  <para>
		    <productionset>
		    <productionrecap linkend="ebnf.expression.otherwise"/>
		    </productionset>
		  </para>
		  <para><emphasis role="strong">Combinator Precedence</emphasis>: 
			  <olink targetdoc="userguide" targetptr="combinators.sequential">sequential</olink> >
			  <olink targetdoc="userguide" targetptr="combinators.parallel">parallel</olink> > 
			  <olink targetdoc="userguide" targetptr="combinators.pruning">pruning</olink> > 
			  <olink targetdoc="userguide" targetptr="combinators.otherwise">otherwise</olink>
			        [<link linkend="ref.syntax.precedence">Full Table</link>]
		  </para>
	  </section>
		  
		  <section xml:id="ref.combinators.otherwise.identities">
		  <title>Notable Identities</title>	  
			  <para>
			  <informaltable tabstyle="identitylist" frame="none" pgwide="0"><tgroup align="left" cols="4" colsep="0" rowsep="0">
			    <colspec align="right"/>
			    <colspec align="center"/>
			    <colspec align="left"/>
			    <colspec align="right"/>
				<tbody>
				  <row>
				    <entry><replaceable>F</replaceable><code><![CDATA[ ; ]]></code><replaceable>G</replaceable><code><![CDATA[ ; ]]></code><replaceable>H</replaceable></entry>
				    <entry> = </entry>
				    <entry><code><![CDATA[(]]></code><replaceable>F</replaceable><code><![CDATA[ ; ]]></code><replaceable>G</replaceable><code><![CDATA[) ; ]]></code><replaceable>H</replaceable></entry>
				    <entry>  (Left Associative)</entry>
				  </row>
				  <row>
				    <entry><replaceable>F</replaceable><code><![CDATA[ ; ]]></code><replaceable>G</replaceable><code><![CDATA[ ; ]]></code><replaceable>H</replaceable></entry>
				    <entry> = </entry>
				    <entry><replaceable>F</replaceable><code><![CDATA[ ; (]]></code><replaceable>G</replaceable><code><![CDATA[ ; ]]></code><replaceable>H</replaceable><code><![CDATA[)]]></code></entry>
				    <entry>  (Right Associative)</entry>
				  </row>
				</tbody>
				</tgroup></informaltable>
			  </para>
    	  </section>

	  <section xml:id="ref.combinators.otherwise.behavior">
		  <title>Behavior</title>
		  <para>
		  <variablelist>
			<varlistentry><term><replaceable>F</replaceable><code><![CDATA[ ; ]]></code><replaceable>G</replaceable></term>
			<listitem>
			<para>
				The execution of
				<replaceable>F</replaceable><code><![CDATA[ ; ]]></code><replaceable>G</replaceable> proceeds as follows. First, <replaceable>F</replaceable> is executed. 
				If <replaceable>F</replaceable> <link linkend="ref.concepts.states.halt"><indexterm><primary>halt</primary></indexterm>halts</link>, 
				and has not published any values, then <replaceable>G</replaceable> executes. 
				If <replaceable>F</replaceable> <indexterm><primary>publish</primary></indexterm>publishes one or more values, 
				then <replaceable>G</replaceable> is ignored. The publications of <replaceable>F</replaceable><code><![CDATA[ ; ]]></code><replaceable>G</replaceable> are those
				of <replaceable>F</replaceable> if <replaceable>F</replaceable> publishes, or those of <replaceable>G</replaceable>
				if <replaceable>F</replaceable> is <link linkend="ref.concepts.silent">silent</link>.
			</para>
			</listitem>
			</varlistentry>
			</variablelist>
		  </para>
	  </section>
	  
	  <section xml:id="ref.combinators.otherwise.type">
		  <title>Type</title>
			<para>
				The type of <replaceable>F</replaceable> <code>;</code> <replaceable>G</replaceable> 
				is the <link linkend="ref.types.subtyping.join">join</link> of the types of <replaceable>F</replaceable> and <replaceable>G</replaceable>.
			</para>
		</section>
	  
	  <section xml:id="ref.combinators.otherwise.examples">
		  <title>Examples</title>

		  <example xml:id="ref.combinators.otherwise.examples.fallback"><title>Fall-back Search</title>
<programlisting language="orc"><![CDATA[
{- Attempt to retrieve search results from Google.
   If Google does not respond, then use Yahoo.
-}  

Google("cupcake") ; Yahoo("cupcake")

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.otherwise.examples.sublist"><title>Lexicographic sublist</title>
<programlisting language="orc-demo"><![CDATA[
{- A call to sum(n, xs), where n is an integer and xs is a list
   of integers, find the first sublist of xs lexicographically
   whose elements add up to n.  The call publishes nothing if
   there is no solution
-}

def sum(0,[]) = []
def sum(n,[]) = stop
def sum(n, x:xs) =
  x:sum(n-x, xs) ; sum(n, xs)
  
sum(-5,[-2,5,1,-3,8,-7])

{-
OUTPUT:
[-2,4,-7]
-}

{- sum(-5,[-2,4,1,8]) would be silent -}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.otherwise.examples.transfer"><title>Buffer Transfer</title>
<programlisting language="orc-demo"><![CDATA[
{- Transfer all items from a buffer to a list.  Assume that the
   process has exclusive access to the buffer, so that no other
   process is adding or removing items.
-}

def xfer(b) =
  b.getD() >x> x:xfer(b) ; []

{-
OUTPUT:
no output
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.otherwise.examples.helpfulpub"><title>Helpful publication</title>
<programlisting language="orc"><![CDATA[
{- Publish a list of all publications of f.
   Assume f is helpful.  Assume you have xfer() from above.
-}

f() >x> b.put(x) >> stop ; xfer(b)

{-
NONRUNNABLE
-}

{- (1 | 2 | 3) >x> c.put(x) >> stop ; xfer(c) outputs
   [1,2,3]
-}
]]></programlisting>
		  </example>
		  
	  </section>
	  
	  <section xml:id="ref.combinators.otherwise.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.concepts.states.halt">Halting</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.publish">Publication</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.silent">Silence</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.helpful">Helpful Sites</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.stop"><code>stop</code></link></para></listitem>
			<listitem><para><link linkend="ref.types.subtyping.join">Join</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="combinators.otherwise">Otherwise Combinator</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="patterns.extensions">Pattern Matching Extensions</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="orc.sites">Sites</olink></para></listitem>
		</itemizedlist>
		  
	  </section>
   </section>
