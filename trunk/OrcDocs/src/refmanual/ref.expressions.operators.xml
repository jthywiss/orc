<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.expressions.operators.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Operators -->
<section xml:id="ref.expressions.operators" xmlns="http://docbook.org/ns/docbook">
	<title>Operators</title>

<para>
Orc has a standard set of infix, prefix, and postfix <indexterm significance="preferred"><primary>operator</primary></indexterm><firstterm baseform="operator">operators</firstterm>. 
Operators in Orc are syntactic sugar for <indexterm><primary>site call</primary></indexterm><link linkend="ref.expressions.call.site">site calls</link>;
they <link linkend="ref.concepts.publish">publish</link> at most once, and their operands are <link linkend="ref.concepts.deflate">deflated</link>.
For example, <code>1 + 2</code> is equivalent to <code>(+)(1, 2)</code> and <code>1 + 2 * 3</code> is equivalent to <code>(+)(1, (*)(2, 3))</code>.
</para>

<para>
Operators are parsed using the <indexterm><primary>associativity</primary></indexterm><link linkend="ref.syntax.precedence">precedence and associativity</link> rules of Orc. 
In particular, these rules describe the relationship between operators and <link linkend="ref.combinators">combinators</link>.
</para>

<section xml:id="ref.expressions.operators.syntax">
	<title>Syntax</title>
	<para>
		<productionset>
			<productionrecap linkend="ebnf.expression.prefixoperation" />
			<productionrecap linkend="ebnf.expression.infixoperation" />
			<productionrecap linkend="ebnf.expression.postfixoperation" />
		</productionset>
	</para>
</section>

<section>
<title>Standard Orc Operators</title>

<section>
<title>Arithmetic Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>+</code></entry>
    <entry>Addition</entry>
  </row>
  <row>
    <entry><code>-</code></entry>
    <entry>Subtraction</entry>
  </row>
  <row>
    <entry><code>*</code></entry>
    <entry>Multiplication</entry>
  </row>
  <row>
    <entry><code>/</code></entry>
    <entry>Division</entry>
  </row>
  <row>
    <entry><code>%</code></entry>
    <entry>Modulus</entry>
  </row>
  <row>
    <entry><code>**</code></entry>
    <entry>Exponentiation</entry>
  </row>
  <row>
    <entry><code>-</code> (unary prefix form)</entry>
    <entry>Arithmetic negation</entry>
  </row>
</tbody></tgroup></informaltable>

<para>
Numeric literals with no decimal part, such as <code>3</code>, are treated as integers. Arithmetic operators with two integer arguments will perform
an integer operation and return an integer result; for example, <code>5 / 2</code> performs integer division and returns <code>2</code>.
However, if either argument to an operator has a decimal part (even if it is trivial, as in <code>3.0</code>), the other argument will
be promoted, and a decimal operation will be performed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both 
perform decimal division and return <code>2.5</code>.
</para>

</section>

<section>
<title>Comparison Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>=</code></entry>
    <entry>Equal to</entry>
  </row>
  <row>
    <entry><code>/=</code></entry>
    <entry>Not equal to</entry>
  </row>
  <row>
    <entry><code>&lt;:</code></entry>
    <entry>Less than</entry>
  </row>
  <row>
    <entry><code>:&gt;</code></entry>
    <entry>Greater than</entry>
  </row>
  <row>
    <entry><code>&lt;=</code></entry>
    <entry>Less than or equal to</entry>
  </row>
  <row>
    <entry><code>&gt;=</code></entry>
    <entry>Greater than or equal to</entry>
  </row>
</tbody></tgroup></informaltable>

<para>
The <code>=</code> operator can compare values of any type. Values of different type are always unequal; for example,
<code>10 = true</code> publishes <code>false</code>.
</para>

</section>

<section>
<title>Logical Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>&#x26;&#x26;</code></entry>
    <entry><indexterm><primary>logical and</primary></indexterm>Logical and</entry>
  </row>
  <row>
    <entry><code>||</code></entry>
    <entry><indexterm><primary>logical or</primary></indexterm>Logical or</entry>
  </row>
  <row>
    <entry><code>~</code></entry>
    <entry><indexterm><primary>logical negation</primary></indexterm>Logical negation</entry>
  </row>
</tbody></tgroup></informaltable>

</section>

<section>
<title>String Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>+</code></entry>
    <entry>Concatenation</entry>
  </row>
</tbody></tgroup></informaltable>

</section>

<section>
<title>List Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>:</code></entry>
    <entry>List construction</entry>
  </row>
</tbody></tgroup></informaltable>

</section>

<section>
<title>Record Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>+</code></entry>
    <entry>Extension</entry>
  </row>
</tbody></tgroup></informaltable>

</section>

<section>
<title>Reference Operators</title>

<informaltable frame="none" pgwide="0">
	<tgroup cols="2">
		<colspec align="center" colwidth="1*"/>
		<colspec align="left" colwidth="9*"/>
		<tbody valign="top">
  <row>
    <entry><code>?</code></entry>
    <entry>Dereference</entry>
  </row>
  <row>
    <entry><code>:=</code></entry>
    <entry>Assignment</entry>
  </row>
</tbody></tgroup></informaltable>

</section>

</section>


<section xml:id="ref.expressions.operators.redefining">
<title>Redefining Operators</title>

<para>
The <link linkend="ref.syntax.precedence">operators' syntax</link> (fixity, precedence, and <indexterm><primary>associativity</primary></indexterm>associativity) is fixed by the Orc grammar; however, the site
called is defined by the <link linkend="ref.stdlib">library</link> and can be changed by a <link linkend="ref.declarations.def"><code>def</code></link>
or <link linkend="ref.declarations.site"><code>import site</code></link> declaration.
</para>
<para>
Orc permits a special identifier form for operators: the operator name
surrounded by parenthesis, as in <code>(+)</code>.
To disambiguate the unary prefix operator <code>-</code> from the
binary infix operator <code>-</code>, Orc translates the
unary prefix operator as <code>(0-)</code>. Binding a value to such
an identifier redefines the corresponding operator in the scope of
that binding.
</para>
</section>

<section>
<title>Type</title>
<para>
  Assuming that an operator has not been redefined, it obeys the following typing rules:
  <itemizedlist>
  <listitem><para>
    An arithmetic operation publishes an <code>Integer</code> if all of its operands have type <code>Integer</code>. 
    If any operand has type <code><indexterm><primary>Number</primary></indexterm>Number</code> (but not <code>Integer</code>), the operation publishes a <code>Number</code>.
  </para></listitem>
  <listitem><para>
    A comparison operation allows operands of any type, and publishes a <code>Boolean</code>.
  </para></listitem>
  <listitem><para>
    A logical operation allows only <code>Boolean</code> operands, and publishes a <code>Boolean</code>.
  </para></listitem>
  <listitem><para>
    A string concatenation requires at least one <code>String</code> operand.
    Other operands may be of type <code>Top</code>; they are converted to strings. 
    String concatenation publishes a <code>String</code>.
  </para></listitem>
  <listitem><para>
    <link linkend="ref.data.list">List</link> construction is <link linkend="ref.types.polymorphism">polymorphic</link>.
    It takes an operand of type <replaceable>T</replaceable> and an operand of type <code>List</code><code>[</code><replaceable>T</replaceable><code>]</code>.
    It returns a value of type <code>List</code><code>[</code><replaceable>T</replaceable><code>]</code>.
  </para></listitem>
  <listitem><para>
    Record extension takes two <link linkend="ref.data.record.type">records</link> and publishes a record.
  </para></listitem>
  <listitem><para>
    Dereference takes an operand of type <code><indexterm><primary>Ref</primary></indexterm>Ref</code><code>[</code><replaceable>T</replaceable><code>]</code> and publishes a <replaceable>T</replaceable>.
  </para></listitem>
  <listitem><para>
    Assignment takes operands of types <code>Ref</code><code>[</code><replaceable>T</replaceable><code>]</code> and <replaceable>T</replaceable>, and publishes a <code>Signal</code>. 
  </para></listitem>
  </itemizedlist>
</para>
</section>

<section xml:id="ref.expressions.operators.examples">
<title>Examples</title>

<example xml:id="ref.expressions.operators.examples.precedence">
<title>Operator precedence</title>
<programlisting language="orc-demo"><![CDATA[
1 + 2 * 3
  
{-
OUTPUT:
7
-} 
]]></programlisting>
</example>

<example xml:id="ref.expressions.operators.examples.pubonce">
<title>Operators publish once</title>
<programlisting language="orc-demo"><![CDATA[
1 + (2 | 3)

{-
OUTPUT:
3
-}
{-
OUTPUT:
4
-}
]]></programlisting>
</example>

<example xml:id="ref.expressions.operators.examples.redefine">
<title>Redefine an operator</title>
<programlisting language="orc-demo"><![CDATA[
{- Redefine the "||", "~", and "?" operators -}

def (||)(x,y) = x + ", or " + y
def (~)(x) = "not " + x
def (?)(r) = r + ", that is the question."

signal >> ("To be" || ~ "to be")?

{-
OUTPUT:
"To be, or not to be, that is the question."
-}
]]></programlisting>
</example>
		  
</section>

<section xml:id="ref.expressions.operators.links">
	<title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.syntax.precedence">Precedence and Associativity Table</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.call.site">Site Calls</link></para></listitem>
			<listitem><para><link linkend="ref.data.numeric">Numerics</link></para></listitem>
			<listitem><para><link linkend="ref.data.string">Strings</link></para></listitem>
			<listitem><para><link linkend="ref.data.boolean">Booleans</link></para></listitem>
			<listitem><para><link linkend="ref.data.list">Lists</link></para></listitem>
			<listitem><para><link linkend="ref.data.record">Records</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.state.Ref"><code>Ref</code></link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="language.base.operators">Operators</olink></para></listitem>
		</itemizedlist>

</section>

</section>
