<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.expressions.dot.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Dot Access -->
	<section xml:id="ref.expressions.dot" xmlns="http://docbook.org/ns/docbook">
		<title>Dot Access</title>
		
		<para>
			A <indexterm significance="preferred"><primary>dot</primary></indexterm><firstterm baseform="dot">dot access</firstterm> is an expression which retrieves a named <indexterm significance="preferred"><primary>member</primary></indexterm><firstterm>member</firstterm> of a value.
			It consists of a <indexterm significance="preferred"><primary>target</primary></indexterm><firstterm>target</firstterm> expression <replaceable>E</replaceable> and a <indexterm significance="preferred"><primary>key</primary></indexterm><firstterm>key</firstterm> <replaceable>K</replaceable>.
			First, <replaceable>E</replaceable> is <link linkend="ref.concepts.deflate">deflated</link> to a value <replaceable>v</replaceable>.
			If the value <replaceable>v</replaceable> has a member named <replaceable>K</replaceable>, that member
			is published. Otherwise, the expression halts.
		</para>
			
		<para>
			Not all values have members. 
			<link linkend="ref.data.record">Records</link> have members, as do many sites.
			A value created by an <link linkend="ref.declarations.class">imported class</link> has
			a member for each method and field of the corresponding class.
			A value created by a <link linkend="ref.declarations.class">defined class</link> has
			a member for each <code>def</code> and <code>val</code> declaration in the class.
		</para>
			
		<para>
			Like many expressions in Orc, a dot access is simply another form of <indexterm><primary>site call</primary></indexterm>site call. The key
			is converted to a special value and passed to the site call as the only argument. The
			site call publishes the member named by the key if it exists, and halts otherwise.
		</para>
		
		<section xml:id="ref.expressions.dot.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.expression.dot"/>
	    </productionset>
	  </para>
	  </section>
	  
	  <section xml:id="ref.expressions.dot.type">
	    <title>Type</title>
	    <para>
	    	If the target expression <replaceable>E</replaceable> has the record type <code>{.</code> <replaceable>K<subscript>0</subscript></replaceable> <code>::</code> <replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>K<subscript>n</subscript></replaceable> <code>::</code> <replaceable>T<subscript>n</subscript></replaceable> <code>.}</code>,
	    	then the dot access <replaceable>E</replaceable><code>.</code><replaceable>K<subscript>i</subscript></replaceable> has type <replaceable>T<subscript>i</subscript></replaceable>.
	    </para>
	    <para>
	    	If the target has a Java class or object type, the <link linkend="ref.declarations.class.type">usual Java typing rules</link> apply.
	    </para>
	    <para>
	      If the target is a site, then the type of the dot access is determined entirely by the site, like any other site call.
	    </para>
	  </section>
	  
		<section xml:id="ref.expressions.dot.examples">
		  <title>Examples</title>

		  <example xml:id="ref.expressions.dot.examples.recordaccess"><title>Record Access</title>
<programlisting language="orc-demo"><![CDATA[
{- Add two members of a record -} 

val displacement = {. dx = 3.0, dy = 0.3, dz = 1.1 .}

displacement.dx + displacement.dy

{-
OUTPUT:
3.3
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.expressions.dot.examples.channelops"><title>Channel Operations</title>
<programlisting language="orc-demo"><![CDATA[
{- Create a channel, and perform some operations on it. -}

val c = Buffer()

  c.get() >x> c.put(x+1) >> stop
| c.get() >y> c.put(y*2) >> stop
| c.put(3) >> stop
  ;
  c.get()

{-
OUTPUT:
7

OUTPUT:
8
-}
]]></programlisting>
		  </example>
		  
		</section>
		  		
		<section xml:id="ref.expressions.dot.links">
		  <title>Related Links</title>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Reference Topics</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
	          			<listitem><para><link linkend="ref.data.record">Records</link></para></listitem>
	          			<listitem><para><link linkend="ref.declarations.defclass"><code>def class</code>: Define Site in Orc</link></para></listitem>
	          			<listitem><para><link linkend="ref.declarations.class"><code>class</code>:  Import Class from Java</link></para></listitem>
	          			<listitem><para><link linkend="ref.sites.java">Java Sites</link></para></listitem>
	        		</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
		  <!-- 
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Tutorial Sections</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
          				<listitem><para><olink targetdoc="userguide" targetptr="TODO">TODO</olink></para></listitem>
        			</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
       -->
	  </section>
	</section>
