<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.patterns.list.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- List Pattern -->
	<section xml:id="ref.patterns.list" xmlns="http://docbook.org/ns/docbook">
		<title>List Pattern</title>
		<para>
			Each element of a <indexterm significance="preferred"><primary>list pattern</primary></indexterm><firstterm>list pattern</firstterm> matches the corresponding element of a <link linkend="ref.data.list">list value</link>.
		</para>
		
		<section xml:id="ref.patterns.list.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.pattern.list"/>
	    </productionset>
	  </para>
	  </section>
		
		<section xml:id="ref.patterns.list.type">
	  <title>Type</title>
	  <para>
	    When a list pattern <code>[</code> <replaceable>P<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>P<subscript>n</subscript></replaceable> <code>]</code> 
	    is matched against a list type <code>List[</code><replaceable>T</replaceable><code>]</code>,
	    each <replaceable>P<subscript>i</subscript></replaceable> is matched against the type <replaceable>T</replaceable>, 
	    producing <link linkend="ref.types.context">typing contexts</link> Γ<subscript>i</subscript>. The typing context
	    produced by the whole match is the union of the contexts Γ<subscript>i</subscript>.
	  </para>
	  </section>
		
		 <section xml:id="ref.patterns.list.examples">
		  <title>Examples</title>

		  <example xml:id="ref.patterns.list.examples.associative"><title>Insertion Sort</title>
<programlisting language="orc-demo"><![CDATA[
{- Insertion Sort -}

def insert(x, []) = [x]
def insert(x, y:ys) = if (x <: y) then x:y:ys else y:insert(x,ys)

def sort([]) = []
def sort([x]) = [x]
def sort([x,y]) = if (x <: y) then [x,y] else [y,x]
def sort(x:xs) = insert(x, sort(xs))

sort([3, 1, 4, 1, 5, 9])

{-
OUTPUT:
[1, 1, 3, 4, 5, 9]
-}
]]></programlisting>
		  </example>
		</section>
		
		<section xml:id="ref.patterns.list.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.patterns.cons">Cons Pattern</link></para></listitem>
			<listitem><para><link linkend="ref.data.list">Lists</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.introduction.structures.patterns">Patterns</olink></para></listitem>
		</itemizedlist>
		  
	  </section>
	</section>
