<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.list.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.list" xmlns="http://docbook.org/ns/docbook">
<title>Lists</title>

<para>
A <indexterm significance="preferred"><primary>list</primary></indexterm><firstterm>list</firstterm> consists of a finite sequence of values. 
It may be empty; the empty list is written as <code>[]</code>.
</para>

<section xml:id="ref.data.list.syntax">
  <title>Syntax</title>
  <para>
    <productionset>
    <productionrecap linkend="ebnf.expression.list"/>
    </productionset>
  </para>
</section>

<section xml:id="ref.data.list.constructors">
<title>Constructors</title>

<para>
The list expression <code>[</code> <replaceable>E<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>E<subscript>n</subscript></replaceable> <code>]</code> publishes the list <code>[</code> <replaceable>v<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>v<subscript>n</subscript></replaceable> <code>]</code>
only if each expression <replaceable>E<subscript>i</subscript></replaceable> <link linkend="ref.concepts.deflate">deflates</link> to value <replaceable>v<subscript>i</subscript></replaceable>. 
Otherwise, it <link linkend="ref.concepts.states.halt">halts</link> <link linkend="ref.concepts.silent">silently</link>.
</para>

</section>

<section xml:id="ref.data.list.operations">
<title>Operations</title>

<para>Notable list operations include:
<itemizedlist>
<listitem><para><emphasis>Cons</emphasis> (construct) a list with first element <replaceable>h</replaceable> and remaining elements <replaceable>t</replaceable>: <replaceable>h</replaceable><code>:</code><replaceable>t</replaceable></para></listitem>
<listitem><para>Publish <code>true</code> iff the list <replaceable>l</replaceable> has no elements: <code>empty(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish the length of list <replaceable>l</replaceable>: <code>length(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish the first element of list <replaceable>l</replaceable>: <code>head(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish a list with every element in list <replaceable>l</replaceable> except the first: <code>tail(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish all but the last element of list <replaceable>l</replaceable>: <code>init(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish the last element of list <replaceable>l</replaceable>: <code>last(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish the <replaceable>n</replaceable>th element of a list, counting from 0: <code>index(</code><replaceable>l</replaceable><code>, </code><replaceable>n</replaceable><code>)</code></para></listitem>
<listitem><para>Publish a list with the first <replaceable>n</replaceable> elements of the list <replaceable>l</replaceable>: <code>take(</code><replaceable>n</replaceable><code>, </code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish a list with all but the first <replaceable>n</replaceable> elements of the list <replaceable>l</replaceable>: <code>drop(</code><replaceable>n</replaceable><code>, </code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish every value in list <replaceable>l</replaceable>, simultaneously: <code>each(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Concatenate list <replaceable>a</replaceable> and list <replaceable>b</replaceable>: <code>append(</code><replaceable>a</replaceable><code>, </code><replaceable>b</replaceable><code>)</code></para></listitem>
<listitem><para>Publish a list with the elements of list <replaceable>l</replaceable> in reverse order: <code>reverse(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish a list containing only those elements of <replaceable>l</replaceable> which satisfy the function <replaceable>f</replaceable>: <code>filter(</code><replaceable>f</replaceable><code>, </code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Apply unary function <replaceable>f</replaceable> to every element of list <replaceable>l</replaceable> (in parallel), and return a list of the results: <code>map(</code><replaceable>f</replaceable><code>, </code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Apply a binary function to every element of a list: <code>foldl</code>, <code>foldr</code>, and many variations thereof.</para></listitem>
<listitem><para>Combine two lists into a list of pairs, and its reverse: <code>zip</code> and <code>unzip</code></para></listitem>
<listitem><para>Concatenate a list of lists <replaceable>l</replaceable> into a single list: <code>concat(</code><replaceable>l</replaceable><code>)</code></para></listitem>
<listitem><para>Publish <code>true</code> if item <replaceable>x</replaceable> is a member of list <replaceable>l</replaceable>: <code>member(</code><replaceable>l</replaceable><code>)</code></para></listitem>
</itemizedlist>
</para>

</section>

<section xml:id="ref.data.list.type">
<title>Type</title>
<para>
The type of a list is <code>List[</code><replaceable>U</replaceable><code>]</code>, where <replaceable>U</replaceable> is the join 
of the types of each of its elements. In particular, if all of the elements 
have the same type <replaceable>T</replaceable>, then the list will have type <code>List[</code><replaceable>T</replaceable><code>]</code>.
</para>
</section>

<section xml:id="ref.data.list.javacalls">
<title>Java calls</title>

<para>
Orc lists do not correspond to any Java value, so if a list is passed to Java code, 
it will be as a <code language="java">java.lang.Object</code> of a type not specified here.
</para>

</section>

<section xml:id="ref.data.list.examples">
<title>Examples</title>


<example xml:id="ref.data.list.examples.sample">
<title>Sample Lists</title>
<programlisting language="orc"><![CDATA[
  []                       -- empty list
| [1, 2, 3]                -- a list of integers
| [(1, 2), (2, 3), (3, 4)] -- a list of tuples of integers
| [1, 1 * 2, 1 * 2 * 3]    -- a list of the first 3 factorials
| [[1], [2, 2], [3, 3, 3]] -- a list of lists of integers

{-
OUTPUT:PERMUTABLE:
[]
[1, 2, 3]
[(1, 2), (2, 3), (3, 4)]
[1, 2, 6]
[[1], [2, 2], [3, 3, 3]]
-}
]]></programlisting>
</example>

<example xml:id="ref.data.list.examples.notsets">
<title>Lists Are Not Sets</title>
<programlisting language="orc"><![CDATA[
{- 
  Lists do not behave like sets.
  The order and number of elements in a list do matter.
-}

  [2,3] /= [3,2]  
| [2] /= [2,2]

{-
OUTPUT:
true
true
-}
]]></programlisting>
</example>



<example xml:id="ref.data.list.examples.cons">
<title>Building Lists with Cons</title>
<programlisting language="orc"><![CDATA[
  3:[]
| 4:3:[2,1]

{-
OUTPUT:PERMUTABLE:
[3]
[4, 3, 2, 1]
-}
]]></programlisting>
</example>

</section>

<section xml:id="ref.data.list.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
        			<listitem><para><link linkend="ref.stdlib.list">Standard library list functions</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.each"><code>each</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.map"><code>map</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.reverse"><code>reverse</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.filter"><code>filter</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.head"><code>head</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.tail"><code>tail</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.init"><code>init</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.last"><code>last</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.empty"><code>empty</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.index"><code>index</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.append"><code>append</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.foldl"><code>foldl</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.foldl1"><code>foldl1</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.foldr"><code>foldr</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.foldr1"><code>foldr1</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.afold"><code>afold</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.cfold"><code>cfold</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.zip"><code>zip</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.unzip"><code>unzip</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.concat"><code>concat</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.length"><code>length</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.take"><code>take</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.drop"><code>drop</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.member"><code>member</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.merge"><code>merge</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.mergeBy"><code>mergeBy</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.mergeUnique"><code>mergeUnique</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.mergeUniqueBy"><code>mergeUniqueBy</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.sort"><code>sort</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.sortBy"><code>sortBy</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.sortUnique"><code>sortUnique</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.sortUniqueBy"><code>sortUniqueBy</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.group"><code>group</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.groupBy"><code>groupBy</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.range"><code>range</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.rangeBy"><code>rangeBy</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.any"><code>any</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.all"><code>all</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.sum"><code>sum</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.product"><code>product</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.and"><code>and</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.or"><code>or</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.minimum"><code>minimum</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.maximum"><code>maximum</code> function</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="cor.data">Data Structures</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
</section>

</section>
