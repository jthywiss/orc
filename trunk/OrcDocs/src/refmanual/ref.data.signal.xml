<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.signal.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.signal" xmlns="http://docbook.org/ns/docbook">
<title><code>signal</code></title>

<para>A <indexterm significance="preferred"><primary>signal</primary></indexterm><firstterm>signal</firstterm> is a value that carries no information. 
It typically indicates completion of a <link linkend="ref.expressions.call">call</link>, when there is no other meaningful value to return. 
It is analogous to <code language="java">void</code> in Java or <code>()</code> in ML.
</para>

  <section xml:id="ref.data.signal.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    <productionrecap linkend="ebnf.literal.signal"/>
	    </productionset>
	  </para>
	</section>

<section xml:id="ref.data.signal.operations">
<title>Operations</title>

<para>Notable signal operations include:
<itemizedlist>
<listitem><para>Publish a signal if an expression is true: <link linkend="ref.stdlib.core.Ift"><code>Ift</code></link></para></listitem>
<listitem><para>Publish a signal if an expression is false: <link linkend="ref.stdlib.core.Iff"><code>Iff</code></link></para></listitem>
<listitem><para>Publish some number of signals simultaneously: <link linkend="ref.stdlib.util.signals"><code>signals</code></link></para></listitem>
</itemizedlist>
</para>

</section>

<section xml:id="ref.data.signal.type">
  <title>Type</title>
	<para>
		The <code>signal</code> value has type <code>Signal</code>.
	</para>
</section>

<section xml:id="ref.data.signal.javacalls">
<title>Java calls</title>

<para>Orc signals don't correspond to any Java value, so if a signal
is passed to Java code, it will be as an <code language="java">java.lang.Object</code> of a type not specified here.
A return of type <code language="java">void</code> from Java code is converted into a signal return value.</para>

</section>

<!-- 
<section xml:id="ref.data.signal.examples">
<title>Examples</title>

<example xml:id="ref.data.signal.examples.metronome">
<title>Metronome</title>
<programlisting language="orc-demo"><![CDATA[
{- metronome publishes a signal once every second -}

def metronome() = signal | Rwait(1000) >> metronome()
metronome()

{-
OUTPUT:
signal
signal
signal
...
-}
]]></programlisting>
</example>
-->

<!-- 

Perhaps a sequential print example?

</section>
-->

<section xml:id="ref.data.signal.links">
<title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.stdlib.core.Ift"><code>Ift</code> site</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.core.Iff"><code>Iff</code> site</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.time.metronome"><code>metronome</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.util.signals"><code>signals</code> function</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="orc.sites.calling">Calling a site</olink></para></listitem>
		</itemizedlist>
</section>

</section>
