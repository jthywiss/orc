<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.types.xml - DocBook source for an Orc reference manual chapter

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<chapter
	xml:id="ref.types"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude">

<title>Type System</title>

<para>
The Orc language is
dynamically typed. If an operation occurs at runtime which is not type correct, 
that operation <link linkend="ref.concepts.states.halt">halts</link>
<link linkend="ref.concepts.silent">silently</link>, and reports an error on the console. 
</para>

<para>
Orc also has an optional static typechecker, which will guarantee that a program is
free of type errors before the program is run. For every expression in the program,
the typechecker tries to find the types of values that the expression could <link linkend="ref.concepts.publish">publish</link>, 
and then checks that all such types are consistent. The typechecker performs a limited form of
<link linkend="ref.types.metatheory">type inference</link>, so it can discover many of these types automatically.
However, the programmer must provide <link linkend="ref.types.typeinfo">additional type information</link> for function definitions
and for a few other specific cases.
</para>

<para>
The typechecker is disabled by default, though typed syntax is still permitted (and types are still
checked for syntax errors) even when the typechecker is not used. It may be enabled as a project
property in the Eclipse plugin, or by using the <code>--typecheck</code> switch on the command line. 
</para>


<para>
If the typechecker can verify that a program is correctly typed, it will display the message
</para>

<para>
<code language="en">Program type checks as </code><replaceable>T</replaceable>
</para>

<para>
This means that the program has no type errors, and that every value published by the program will be of type <replaceable>T</replaceable>.
</para>

<xi:include href="ref.types.metatheory.xml"/>
<xi:include href="ref.types.polymorphism.xml"/>
<xi:include href="ref.types.subtyping.xml"/>
<xi:include href="ref.types.typeinfo.xml"/>
<xi:include href="ref.types.override.xml"/>
<xi:include href="ref.types.context.xml"/>

</chapter>
