<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.types.typeinfo.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Adding type information -->
<section xml:id="ref.types.typeinfo" xmlns="http://docbook.org/ns/docbook">
	<title>Adding Type Information</title>
	
	<!-- Index pointers for unwritten terms -->
	<indexterm><primary>argument type</primary></indexterm>
	
	<para>
	The Orc typechecker uses a <link linkend="ref.types.metatheory.origin">type inference algorithm</link> to deduce
	type information from a program without any help from the programmer. In many contexts, the typechecker can
	find all of the type information it needs; however, there are some cases where extra information is needed.
	For this purpose, there are four kinds of <indexterm significance="preferred"><primary>type information</primary></indexterm>
	type information that may be added to an Orc program.
	</para>
	
	<para>
	Note that due to the <link linkend="ref.types.metatheory.erasure">erasure</link> property of the Orc type system,
	adding type information will never change the runtime behavior of the program.
	</para>
	
	<section xml:id="ref.types.typeinfo.explicitargs">
	<title>Explicit Type Arguments</title>
	
	<para>
		Type information may be added to a <link linkend="ref.types.polymorphism.calls">polymorphic</link> <link linkend="ref.expressions.call">site or function call</link>
		by providing explicit type arguments. The typechecker can usually infer type arguments, 
		but there are certain cases where it does not have enough information, such as when 
		calling polymorphic factory sites like <code>Channel</code> or <code>Ref</code>.
	</para>
	
	</section>
	
	<section xml:id="ref.types.typeinfo.function">
	<title>Function Type Information</title>
	<para>
		Whenever a function is defined (using the <code>def</code> keyword),
		in order for the typechecker to determine its type, 
		the definition must be accompanied by information about the argument types and return type
		of the function. If the function is polymorphic, the names of its type parameters must also be given.
		This is the same information that a <link linkend="ref.data.closure.type">function type</link> carries.
		There are multiple ways to provide this information, and some of it can be inferred under certain conditions.
  </para>

	<para>
	  The most comprehensive way to provide type information about a function is through a <indexterm significance="preferred"><primary>signature</primary></indexterm><firstterm>signature</firstterm>.
		A signature precedes a function definition, providing a sequence of type parameters, a sequence of argument types,
		and a return type.
	</para>
	
	<para>
	  <productionset>
	    <productionrecap linkend="ebnf.declaration.signature"/>
	    <productionrecap linkend="ebnf.declaration.def"/>
	  </productionset>
	</para>
		
	<para>
	  Type information may also be written directly into a clause of a function definition. 
	  For example, the following definitions are equivalent:

<programlisting language="orc"><![CDATA[
{- Adding type information using a signature -}
def min(Number, Number) :: Number
def min(x,y) = if (x <: y) then x else y

{- Inline type information -}
def min(x :: Number, y :: Number) :: Number = if (x <: y) then x else y
]]></programlisting>

	</para>  
	  
	<para>
	  If the function is not recursive, then the inline return type is optional, because the typechecker 
	  can infer the return type from the body expression.
	</para>

	<para>
	  When writing a <link linkend="ref.expressions.lambda"><code>lambda</code> expression</link>, type information
	  must be included in this way, since there is no way to write a separate signature. The return type 
	  is not needed, since a <code>lambda</code> will never be recursive. The parameter types are required and cannot
	  be inferred, except in one context: when a <code>lambda</code> expression appears as an argument to a call which
	  requires no other inference, then the argument types can be inferred from the type of the target.  
	</para>

	</section>
		
  <section xml:id="ref.types.typeinfo.pattern">
	<title>Pattern Type Information</title>
	
	<para>
	<productionset>
	  <productionrecap linkend="ebnf.pattern.withtypeinfo"/>
	</productionset>
	</para>
	
	<para>
	A pattern may specify the type of values against which it may be matched. The typechecker can
	then verify this stated type, rather than attempting to infer it, which may provide enough type information to
	make other inferences possible or resolve ambiguities. Furthermore, adding extra type information makes it easier 
	to pinpoint the source of a typechecking failure. Note that this type information has no effect on
	the runtime match behavior of the pattern.
	</para>    
	
	</section>
		
	 <section xml:id="ref.types.typeinfo.expression">
	 <title>Expression Type Information</title>
	 
	 <para>
		 <productionset>
	    <productionrecap linkend="ebnf.expression.withtypeinfo"/>
	   </productionset>
   </para>
   
   <para>
		 An expression may specify the type of values that it will publish. The typechecker can
		 then verify this stated type, rather than attempting to infer it, which may provide enough type information to
		 make other inferences possible or resolve ambiguities. For example, the typechecker may not be able to infer the correct join type for a parallel combinator,
		 but it is always able to check that both branches are subtypes of an already provided type. Furthermore, adding extra
		 type information makes it easier to pinpoint the source of a typechecking failure.
	 </para>   

	</section>
		 
		 
	<section xml:id="ref.types.typeinfo.links">
	  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.declarations.def"><code>def</code>:  Define Function</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.lambda"><code>lambda</code> Expressions</link></para></listitem>
			<listitem><para><link linkend="ref.patterns">Patterns</link></para></listitem>
		</itemizedlist>
		<!-- 
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para>TODO</para></listitem>
		</itemizedlist>
		-->		  
	  </section>
	  
</section>
