<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.expressions.lambda.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Lambda -->
	<section xml:id="ref.expressions.lambda" xmlns="http://docbook.org/ns/docbook">
		<title><code>lambda</code></title>

		<para>
		Sometimes one would like to create a <link linkend="ref.data.closure">closure</link> directly, without bothering to give it a name. 
		There is a special keyword <code><indexterm><primary>lambda</primary></indexterm>lambda</code> for this purpose. By writing a 
		<link linkend="ref.declarations.def">function definition</link> without the keyword <code><indexterm><primary>def</primary></indexterm>def</code> and replacing the function name with
		the keyword <code>lambda</code>, that definition becomes an expression which <link linkend="ref.concepts.publish">publishes</link> a closure. 
		</para>
		<para>
		Note that a <code>lambda</code> cannot create a recursive function, since the function is
		not given a name in the body.
		</para>
		
		<section xml:id="ref.expressions.lambda.syntax">
		  <title>Syntax</title>
		  <para>
		    <productionset>
		    	<productionrecap linkend="ebnf.expression.lambda"/>
		    </productionset>
		  </para>
	  </section>
		
		<section xml:id="ref.expressions.lambda.examples">
		  <title>Examples</title>

		  <example xml:id="ref.expressions.lambda.examples.onetwosum"><title>One Two Sum</title>
<programlisting language="orc-demo"><![CDATA[
{- Define a function that sums the results of its argument function
   evaluated with arguments 1 and 2
-}

def onetwosum(f) = f(1) + f(2)

onetwosum( lambda(x) = x * 3 )

{- 
  identical to:
  def triple(x) = x * 3
  onetwosum(triple)
-}

{-
OUTPUT:
9
-}

]]></programlisting>
		  </example>
	  </section>
		
		<section xml:id="ref.expressions.lambda.type">
		  <title>Type</title>
		  <para>
		    The type of a <code>lambda</code> expression is exactly the type of the <link linkend="ref.data.closure">closure</link> it creates.
		  </para>
	  </section>
		
		<section xml:id="ref.expressions.lambda.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.data.closure">Closures</link></para></listitem>
			<listitem><para><link linkend="ref.declarations.def"><code>def</code>:  Define Function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.idioms">Higher-Order Idioms</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.list.map"><code>map</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.list.filter"><code>filter</code> function</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="orc.language.lambda">Lambda</olink></para></listitem>
		</itemizedlist>

	  </section>
	</section>
