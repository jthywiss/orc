<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.string.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.string" xmlns="http://docbook.org/ns/docbook">
<title>Character Strings</title>

<!-- <para><emphasis role="strong">Type</emphasis>: <code>String</code></para> -->

<para>Orc's character sequence representation is a <indexterm><primary>character string</primary><see>string</see></indexterm><indexterm><primary>string</primary></indexterm><firstterm>string</firstterm>.
Characters in Orc strings are drawn from the Unicode
character set, and are encoded in the UTF-16 encoding form.
(Note that Orc source code files are encoded in the UTF-8 encoding form.)
Orc strings have an explicit length and are not zero-terminated.
They are limited to a maximum length of 2^31-1 (2 147 483 647) characters.</para>

<section xml:id="ref.data.string.literals">
<title>Literals</title>

<section xml:id="ref.data.string.literals.syntax">
<title>Syntax</title>
<productionset>
<productionrecap linkend="ebnf.literal.string"/>
</productionset>

<para>String literals are enclosed in quotation marks (U+0022).
Any Unicode character can be placed between the quotation marks, except:
line terminators (CR, LF, NEL [U+0085], LS [U+2028], FF, or PS [U+2029])
or a quotation mark.
A reverse solidus (backslash) and its subsequent character are treated as follows:
<itemizedlist>
<listitem><para><code>\f</code>: represents form feed (FF) (U+000C)</para></listitem>
<listitem><para><code>\n</code>: represents line feed (LF) (U+000A)</para></listitem>
<listitem><para><code>\r</code>: represents carriage return (CR) (U+000D)</para></listitem>
<listitem><para><code>\t</code>: represents character tabulation (HT) (U+0009)</para></listitem>
<listitem><para><code>\\</code>: represents reverse solidus (backslash) (U+005C)</para></listitem>
<listitem><para><code>\"</code>: represents quotation mark (U+0022)</para></listitem>
<listitem><para><code>\</code> followed by any other character: represents that character</para></listitem>
</itemizedlist>
</para>

</section>

</section>


<section xml:id="ref.data.string.operations">
<title>Operations</title>

<para>Notable string operations include:
<itemizedlist>
<listitem><para>All <code language="java">java.lang.String</code> operations</para></listitem>
<listitem><para>Convert an Orc value to a string: <code>write</code></para></listitem>
<listitem><para>Split a string into a list of strings corresponding to its lines: <code>lines</code></para></listitem>
<listitem><para>Combine a list of strings into one multi-line string: <code>unlines</code></para></listitem>
<listitem><para>Split a string into a list of strings corresponding to its words: <code>words</code></para></listitem>
<listitem><para>Combine a list of strings into one multi-word strings: <code>unwords</code></para></listitem>
</itemizedlist> 
</para>

</section>

<section xml:id="ref.data.string.type">
  <title>Type</title>
	<para>
		A string value has type <code>String</code>.
	</para>
</section>

<section xml:id="ref.data.string.javacalls">
<title>Java calls</title>

<para>
Orc strings are passed in calls to and returns
from Java code as <code language="java">java.lang.String</code>.</para>

</section>

<section xml:id="ref.data.string.examples">
<title>Examples</title>


<example xml:id="ref.data.string.examples.concat">
<title>String Concatenation</title>
<programlisting language="orc-demo"><![CDATA[
{- Concatenate two strings -}

"hello" + " world"

{-
OUTPUT:
"hello world"
-}
]]></programlisting>
</example>

<example xml:id="ref.data.string.examples.functions">
<title>String Functions</title>
<programlisting language="orc-demo"><![CDATA[
{- Showcase some Orc library string functions -}

Println("I go to the console") >>
unwords(["I", "like", "Orc"])

{-
OUTPUT:
I go to the console
"I like Orc"
-}
]]></programlisting>
</example>
		  
</section>

<section xml:id="ref.data.string.links">
<title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.syntax.lexical.tokens.stringliteral">String literal</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.text.Write"><code>Write</code> site</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.text.lines"><code>lines</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.text.unlines"><code>unlines</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.text.words"><code>words</code> function</link></para></listitem>
			<listitem><para><link linkend="ref.stdlib.text.unwords"><code>unwords</code> function</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="orc.constants">Constants</olink></para></listitem>
		</itemizedlist>
</section>

</section>
