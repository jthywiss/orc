<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.types.metatheory.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Type Metatheory -->
<section xml:id="ref.types.metatheory" xmlns="http://docbook.org/ns/docbook">
	<title>Metatheory</title>
	
		<!-- Index pointers for unwritten terms -->
		<indexterm><primary>polymorphism</primary></indexterm>
	
		<para xml:id="ref.types.metatheory.origin">
		The typechecker uses the local <indexterm significance="preferred"><primary>type inference</primary></indexterm><firstterm>type inference</firstterm> algorithm described by Pierce and Turner in the paper 
		<ulink url="http://www.cis.upenn.edu/~bcpierce/papers/lti-toplas.pdf">Local Type Inference</ulink>.
		The typechecker extends this algorithm with polymorphic type operators (e.g. <code>List</code> or
		<code>Buffer</code>), forming a second-order type system. It also includes polymorphic user-defined <link linkend="ref.declarations.type.datatype">datatypes</link>,
		and a typing procedure for external services.
		</para>
	
		<para xml:id="ref.types.metatheory.polymorphisms">
		The typechecker supports both generics and subtyping, though it does not currently implement <emphasis>bounded polymorphism</emphasis>, which combines the two.
		Sites may also be overloaded (<indexterm significance="preferred"><primary>ad-hoc polymorphism</primary></indexterm><firstterm>ad-hoc polymorphism</firstterm>), but the programmer cannot
		write overloaded functions within Orc itself.  
		</para>
	
		<para xml:id="ref.types.metatheory.erasure">
		The Orc type system currently uses an <indexterm significance="preferred"><primary>erasure</primary></indexterm><firstterm>erasure</firstterm> semantics, meaning that type information
		does not affect runtime behavior, and may be removed from a program after typechecking is finished. In the
		case of <link linkend="ref.declarations.type.datatype">datatype declarations</link>, the type information and 
		constructor site bindings are separated by the compiler, so that datatypes may be used in an untyped setting.
		</para>	
		 
	<section xml:id="ref.types.metatheory.links">
	  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.types.polymorphism">Parametric Polymorphism</link></para></listitem>
			<listitem><para><link linkend="ref.types.subtyping">Subtyping</link></para></listitem>
			<listitem><para><link linkend="ref.declarations.type.datatype">Datatype Declaration</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para>TODO</para></listitem>
		</itemizedlist>		  
	  </section>
	  
</section>
