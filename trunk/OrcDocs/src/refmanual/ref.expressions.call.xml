<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.expressions.call.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Site and Function Calls -->
	<section xml:id="ref.expressions.call" xmlns="http://docbook.org/ns/docbook">
		<title>Site and Function Calls</title>
			<para>
			A <indexterm significance="preferred"><primary>call</primary></indexterm><firstterm>call</firstterm> is an invocation of a <indexterm significance="preferred"><primary>target</primary></indexterm><firstterm>target</firstterm> expression on a sequence of <indexterm significance="preferred"><primary>argument</primary></indexterm><firstterm>argument</firstterm> expressions. 
			First, the target expression is <indexterm><primary>deflate</primary></indexterm><link linkend="ref.concepts.deflate">deflated</link> to a value <replaceable>g</replaceable>.
			If <replaceable>g</replaceable> is a <link linkend="ref.sites">site</link>, then the call is a <indexterm significance="preferred"><primary>site call</primary></indexterm><firstterm>site call</firstterm>. 
			If <replaceable>g</replaceable> is a <link linkend="ref.data.closure">closure</link>, then the call is a <indexterm significance="preferred"><primary>function call</primary></indexterm><firstterm>function call</firstterm>.
			If <replaceable>g</replaceable> is a <link linkend="ref.data.record">record</link>, then the call is a <indexterm significance="preferred"><primary>record application</primary></indexterm><firstterm>record application</firstterm>.
			Each of these cases is described below.		
			</para>
		
		<section xml:id="ref.expressions.call.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.expression.call"/>
	    	<productionrecap linkend="ebnf.arguments"/>
	    	<productionrecap linkend="ebnf.typearguments"/>
	    </productionset>
	  </para>
	  </section>
	  
	  <section xml:id="ref.expressions.call.site">
	  <title>Site Calls</title>
	  <para>
	    A <indexterm><primary>site call</primary></indexterm>site call is <indexterm significance="preferred"><primary>strict</primary></indexterm><firstterm>strict</firstterm>.
	    Execution of a site call <replaceable>g</replaceable><code>(</code> <replaceable>E<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>E<subscript>n</subscript></replaceable> <code>)</code>
	    deflates each expression <replaceable>E<subscript>i</subscript></replaceable> to a value <replaceable>v<subscript>i</subscript></replaceable>.
	    The site <replaceable>g</replaceable> is then invoked with arguments <replaceable>v<subscript>i</subscript></replaceable>.
	  </para>
	  <para>
	    A site call <link linkend="ref.concepts.publish">publishes</link> at most one value. Once it publishes a value, it immediately <link linkend="ref.concepts.states.halt">halts</link>.
	    If the site is <link linkend="ref.concepts.helpful">helpful</link>, the call may halt without publishing a value.
	  </para>
	  </section>
	  
	  <section xml:id="ref.expressions.call.function">
	  <title>Function Calls</title>
	  <para>
	    Unlike a site call, a <indexterm><primary>function call</primary></indexterm>function call is <indexterm significance="preferred"><primary>lenient</primary></indexterm><firstterm>lenient</firstterm>. 
	    <link linkend="ref.declarations.def.execution">Execution of a function call</link> <replaceable>g</replaceable><code>(</code> <replaceable>E<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>E<subscript>n</subscript></replaceable> <code>)</code>
	    deflates each expression <replaceable>E<subscript>i</subscript></replaceable>, but does not wait for values to be published; instead, the body of the function executes immediately.
	    
	  </para>
	  <para>
	    Since a function call executes an arbitrary expression, it may <indexterm><primary>publish</primary></indexterm>publish any number of values.
	  </para>
	  </section>
	  
	  <section xml:id="ref.expressions.call.record">
	  <title>Record Application</title>
	  <para>
	    A record may be called if it has a member named <indexterm significance="preferred"><primary>apply</primary></indexterm><code>apply</code>.
	    In this case, the value <replaceable>v</replaceable> bound to <code>apply</code> in the record is retrieved,
	    and then <replaceable>v</replaceable> is called on the arguments.
	    <replaceable>v</replaceable> may be a site, a closure, or even another record.
	    The call behaves exactly as if <replaceable>v</replaceable> had been the original call target. 
	  </para>
	  
	  <para>
	    If a record without an <code>apply</code> member is called, the call halts <link linkend="ref.concepts.silent">silently</link>.
	  </para>

	  </section>
		
		<section xml:id="ref.expressions.call.type">
	    <title>Type</title>
	    <para>
	      In addition to argument expressions, a call may also have type arguments <replaceable>A<subscript>j</subscript></replaceable>, since the target
	      may have a <link linkend="ref.types.polymorphism">polymorphic</link> type.     
	    </para>
	    <para>
	      Suppose the target expression <replaceable>E</replaceable> has type <replaceable>S</replaceable>,
	      and each argument expression <replaceable>E<subscript>i</subscript></replaceable> has type <replaceable>S<subscript>i</subscript></replaceable>.
	    </para>
	    <para>
	    	If <replaceable>S</replaceable> is a <link linkend="ref.data.closure.type">function type</link> <code><indexterm><primary>lambda</primary></indexterm>lambda</code> <code>[</code><replaceable>X<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>X<subscript>m</subscript></replaceable><code>]</code><code>(</code><replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable><code>)</code> <code>::</code> <replaceable>R</replaceable>,
	    	then there must be exactly as many arguments as <indexterm significance="preferred"><primary>argument type</primary></indexterm>argument types, 
	    	and each argument type <replaceable>S<subscript>i</subscript></replaceable> must be a <link linkend="ref.types.subtyping">subtype</link> of the corresponding type <replaceable>T<subscript>i</subscript></replaceable> (with all <replaceable>X<subscript>j</subscript></replaceable> replaced by <replaceable>A<subscript>j</subscript></replaceable>).
	    	Then the type of the whole call is <replaceable>R</replaceable>, the return type.	    	  
	    </para>
	    <para>
	      If <replaceable>S</replaceable> is the type of a site, <replaceable>S</replaceable> itself behaves like a site during typehcecking.
	      The typechecker passes the argument types <replaceable>S<subscript>i</subscript></replaceable> and type arguments <replaceable>A<subscript>j</subscript></replaceable> to <replaceable>S</replaceable>,
	      which then responds with the return type <replaceable>R</replaceable>, or indicates that the argument types are not appropriate.
	      If <replaceable>S</replaceable> does respond, then the type of the call expression is the return type <replaceable>R</replaceable>.
	    </para>
	  </section>
		
		<section xml:id="ref.expressions.call.examples">
		  <title>Examples</title>

		  <example xml:id="ref.expressions.call.examples.sites_are_strict"><title>Sites are Strict</title>
<programlisting language="orc-demo"><![CDATA[
{- A site call is strict. -} 

Println(Rwait(500) >> "Waited 0.5 seconds" | Rwait(1000) >> "Waited 1 second") >> stop

{-
OUTPUT:
Waited 0.5 seconds
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.expressions.call.examples.functions_are_lenient"><title>Functions are Lenient</title>
<programlisting language="orc-demo"><![CDATA[
{- 
  A function call is lenient.
  Parts of the function that do not need the arguments can execute immediately. 
  However, any part that uses the arguments must wait.
-}

def Printfn(s) =
    Println("Immediate") 
  | s >> Println("Waiting")
  
Printfn(Rwait(1000) >> signal) >> stop

{-
OUTPUT:
Immediate
Waiting
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.expressions.call.examples.record_apply"><title>Function with Domain and Range</title>
<programlisting language="orc-demo"><![CDATA[
{-
  Use a record with an apply member to create
  a function enhanced with .domain and .range members.
-} 

val implies =
  def imp(true,false) = false 
  def imp(_,_) = true 
  {.
    apply = imp,
    domain = [(true,true),(true,false),(false,true),(false,false)],
    range = [true, false]
  .}

each(implies.domain) >(x,y)> 
implies(x,y) >z> 
member(z, implies.range)
  
{-
OUTPUT:
true
true
true
true
-}
]]></programlisting>
		  </example>
		  
		</section>
		  		
		<section xml:id="ref.expressions.call.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.patterns.call">Call Pattern</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.dot">Dot Access</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.operators">Operators</link></para></listitem>
			<listitem><para><link linkend="ref.sites">Sites and Services</link></para></listitem>
			<listitem><para><link linkend="ref.data.record">Records</link></para></listitem>
			<listitem><para><link linkend="ref.data.closure">Closures</link></para></listitem>
			<listitem><para><link linkend="ref.declarations.def"><code>def</code>:  Define Function</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.deflate">Deflation</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.publish">Publication</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.silent">Silence</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.states.block">Blocking</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.states.halt">Halting</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.states.kill">Killing</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.helpful">Helpful Sites</link></para></listitem>
			<listitem><para><link linkend="ref.types.polymorphism.calls">Polymorphic Calls</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.additional.import">Importing Resources</olink></para></listitem>
		</itemizedlist>

	  </section>
	</section>
