<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.datatype.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.datatype" xmlns="http://docbook.org/ns/docbook">
<title>Algebraic Data Types</title>

<para>An Orc <indexterm><primary>datatype</primary><see>algebraic data type</see></indexterm><indexterm significance="preferred"><primary>algebraic data type</primary></indexterm><firstterm>datatype</firstterm> is an algebraic data type, or "tagged union".
A datatype value contains a sequence of values enclosed by a <indexterm significance="preferred"><primary>tag</primary></indexterm><firstterm>tag</firstterm>.
This value can be <indexterm><primary>call pattern</primary></indexterm><link linkend="ref.patterns.call">matched by a pattern</link>.
</para>

<para>
  Datatypes are defined by a <link linkend="ref.declarations.type.datatype"><code>type</code> declaration</link>.
  Each <indexterm significance="preferred"><primary>constructor</primary></indexterm><firstterm>constructor</firstterm> 
  in the declaration introduces a new tag, followed by a sequence of <emphasis>slots</emphasis>.
  The <code>|</code> separator allows multiple constructors to be defined at the same time.
</para>

<para>
  In an untyped program, slots are written as <code>_</code>. In a typed program, slots contain types.
]</para>

<section xml:id="ref.data.datatype.syntax">
  <title>Syntax</title>
  <para>
    <productionset>
    	<productionrecap linkend="ebnf.declaration.type.datatype"/>
    	<productionrecap linkend="ebnf.constructor"/>
    	<productionrecap linkend="ebnf.slot"/>
    </productionset>
  </para>
</section>

<section xml:id="ref.data.datatype.constructors">
<title>Constructors</title>

<para>
  Each constructor is a site, which takes one argument for each slot
  of the constructor, and publishes a datatype value consisting of the sequence of argument
  values, tagged with that constructor's unique tag.
</para>

<para>
  Each constructor also has a corresponding <link linkend="ref.patterns.call"><code>unapply</code> member</link>,
  which takes a value with that constructor's tag, removes the tag, and publishes the sequence of values as a tuple.
  If its argument does not have the tag, it halts. 
  Thus, constructors can be used in pattern matching. 
</para>

</section>

<section xml:id="ref.data.datatype.type">
<title>Type</title>

<para>
A datatype declaration defines a new <indexterm significance="preferred"><primary>sum type</primary></indexterm><firstterm>sum type</firstterm>.
</para>

<para>
Each constructor defined by the datatype has the <link linkend="ref.data.closure.type">function type</link> 
<code><indexterm><primary>lambda</primary></indexterm>lambda</code> <code>[</code> <replaceable>X<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>X<subscript>n</subscript></replaceable> <code>]</code><code>(</code> <replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable> <code>)</code> <code>::</code> <replaceable>S</replaceable>,
where <replaceable>X<subscript>i</subscript></replaceable> are the type parameters of the datatype, <replaceable>T<subscript>i</subscript></replaceable> are the types in the slots of the constructor,
and <replaceable>S</replaceable> is the sum type.
</para>
<para>
Each constructor also has a corresponding <link linkend="ref.patterns.call"><code>unapply</code> member</link>,
with type <code>lambda</code> <code>[</code> <replaceable>X<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>X<subscript>n</subscript></replaceable> <code>]</code><code>(</code><replaceable>S</replaceable><code>)</code> <code>::</code> <code>(</code> <replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable> <code>)</code>.
</para>

<para>
A datatype declaration may define a <indexterm significance="preferred"><primary>recursive type</primary></indexterm><firstterm>recursive type</firstterm>: the name of the type
may be used in the definition of the type itself. In fact, this is the only way to declare a recursive
type in Orc.
</para>

</section>


<section xml:id="ref.data.datatype.examples">
<title>Examples</title>


<para></para>

<example xml:id="ref.data.datatypes.examples.enumeration">
<title>Enumeration</title>
<programlisting language="orc-demo"><![CDATA[
{- An enumeration, such as Java's enum, can be represented by a datatype
   whose constructors have no arguments. Note that an empty argument list,
   (), is still needed.
-}
type objective = Primary() | Secondary() | Tertiary()

[Secondary(), Tertiary()]

{-
OUTPUT:
[Secondary(), Tertiary()]
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.shapes">
<title>Geometric shape datatype</title>
<programlisting language="orc-demo"><![CDATA[
{- A Shape type with three data constructors -}
type Shape = Rectangle(_, _) | Circle (_)

def area(Rectangle(width,height)) = width * height
def area(Circle(radius)) = 3.1415926535897 * radius ** 2

area(Rectangle(2, 3)) | area(Circle(1))

{-
OUTPUT:PERMUTABLE:
6
3.14159265358970
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.binarytree">
<title>Binary tree node</title>
<programlisting language="orc-demo"><![CDATA[
{- This is a binary tree datatype
   Leaf nodes carry integer values
-}

type Node = LeafNode(Integer) | InnerNode(Node, Node)

{- Constructing a simple tree
    /\
   1 /\
    2  3
-}
InnerNode(LeafNode(1),InnerNode(LeafNode(2),LeafNode(3)))

{-
OUTPUT:
InnerNode(LeafNode(1), InnerNode(LeafNode(2), LeafNode(3)))
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.binarytreepoly">
<title>Polymorphic binary tree node</title>
<programlisting language="orc-demo"><![CDATA[
{- This is a binary tree datatype
   Leaf nodes carry values of type T
-}

type Node[T] = LeafNode(T) | InnerNode(Node, Node)

{- Constructing a simple tree
      /\
   "A" /\
    "B"  "C"
-}
InnerNode[String](LeafNode("A"),InnerNode(LeafNode("B"),LeafNode("C")))

{-
OUTPUT:
InnerNode(LeafNode("A"), InnerNode(LeafNode("B"), LeafNode("C")))
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.option">
<title>Orc built-in Option type</title>
<programlisting language="orc"><![CDATA[
{- A datatype for optional values of type T -}

type Option[T] = Some(T) | None

{-
NONRUNNABLE
-}
]]></programlisting>
</example>

</section>

<section xml:id="ref.data.datatype.links">
<title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.patterns.call">Call pattern</link></para></listitem>
			<listitem><para><link linkend="ref.declarations.type"><code>type</code>:  Declare Type</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="section.orc.datatypes">Datatypes</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="orc.language.patterns">Patterns</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="patterns.extensions">Extensions to Pattern Matching</olink></para></listitem>
		</itemizedlist>

</section>
</section>
