<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.types.subtyping.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.
 
     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Type subtyping -->
<section xml:id="ref.types.subtyping" xmlns="http://docbook.org/ns/docbook">
	<title>Subtyping</title>
	
		<!--  add subtyping info in individual type sections -->	
	
	
	<para>
	A type <replaceable>S</replaceable> is a <indexterm significance="preferred"><primary>subtype</primary></indexterm><firstterm>subtype</firstterm> of a type <replaceable>T</replaceable>, written <replaceable>S</replaceable> <indexterm significance="preferred"><primary>&#x2264;</primary></indexterm>&#x2264; <replaceable>T</replaceable>,
	if a value of type <replaceable>S</replaceable> can be used in any context expecting a value of type <replaceable>T</replaceable>.
	</para>
	
	<para>
	A type <replaceable>U</replaceable> is a <indexterm significance="preferred"><primary>supertype</primary></indexterm><firstterm>supertype</firstterm> of a type <replaceable>T</replaceable> if <replaceable>T</replaceable> &#x2264; <replaceable>U</replaceable>.
	</para>
	
	<para>
	Subtyping is reflexive: <replaceable>S</replaceable> &#x2264; <replaceable>S</replaceable>. Subtyping is also
	transitive: if <replaceable>S</replaceable> &#x2264; <replaceable>T</replaceable> and <replaceable>T</replaceable> &#x2264; <replaceable>U</replaceable>,
	then <replaceable>S</replaceable> &#x2264; <replaceable>U</replaceable>.  
	</para>
	
	<para>
	If an expression has type <replaceable>S</replaceable>, and <replaceable>S</replaceable> &#x2264; <replaceable>T</replaceable>,
	then that expression also has type <replaceable>T</replaceable>. This is called <firstterm>subsumption</firstterm>.
	</para>
	
	<para>
		Types in Orc form a bounded lattice. The lattice is ordered by the subtyping relation,
		its maximal element is the special type <code><indexterm><primary>Top</primary></indexterm>Top</code>, and its minimal element is 
		the special type <code>Bot</code>.
  </para>
		
	<section xml:id="ref.types.subtyping.top">
	<title>Top</title>
		<indexterm><primary>Top</primary></indexterm>
		<para>
			<code>Top</code> is the universal type. 
			Every value has type <code>Top</code>.
			Every type is a subtype of <code>Top</code>.
		</para>
	</section>
		
	<section xml:id="ref.types.subtyping.Bot">
	<title>Bot</title>
		<indexterm><primary>Bot</primary></indexterm>
		<para>
		<code>Bot</code> is the empty type. 
		No value has type <code>Bot</code>. 
		<code>Bot</code> is a subtype of every type.
		An expression has type <code>Bot</code> only if it is <link linkend="ref.concepts.silent">silent</link>. 
		</para>
		
		<para>
		<code>Bot</code> has an interesting status in Orc. In other typed languages, if an expression
		has type <code>Bot</code>, this usually indicates a guaranteed error, infinite loop, or other failure
		to return a value. Since sequential programming rarely involves subexpressions that are guaranteed
		never to return, <code>Bot</code> is usually just a curiosity or a formal artifact of the type system,
		and indeed many type systems do not have a <code>Bot</code> type at all.
		</para>
		
		<para> 
		In Orc, however, <code>Bot</code> is very useful, since it is frequently the case that Orc expressions 
		are written to carry out ongoing concurrent activities but never <link linkend="ref.concepts.publish">publish</link> any values, and the type system 
		can use the type <code>Bot</code> to indicate that no publications will ever be seen from such
		expressions.
		</para>
	</section>
		
	<section xml:id="ref.types.subtyping.join">
	<title>Join</title>
		<para>
		  A <indexterm significance="preferred"><primary>common supertype</primary></indexterm><firstterm>common supertype</firstterm> of two types <replaceable>S</replaceable> and <replaceable>T</replaceable> is any type <replaceable>U</replaceable> such that 
		<replaceable>S</replaceable> &#x2264; <replaceable>U</replaceable> and <replaceable>T</replaceable> &#x2264; <replaceable>U</replaceable>. 
		The <indexterm significance="preferred"><primary>join</primary></indexterm><firstterm>join</firstterm> of <replaceable>S</replaceable> and <replaceable>T</replaceable> is the <emphasis>least</emphasis> common 
		supertype of <replaceable>S</replaceable> and <replaceable>T</replaceable>: it is a subtype of every common supertype of <replaceable>S</replaceable> and <replaceable>T</replaceable>.
		</para>
		
		<para>
		  Some common cases:
		  <itemizedlist>
		  <listitem><para>
		  The join of <replaceable>T</replaceable> and <replaceable>T</replaceable> is <replaceable>T</replaceable>.
		  </para></listitem>
		  <listitem><para>
		  If <replaceable>S</replaceable> &#x2264; <replaceable>T</replaceable>, then the join of <replaceable>S</replaceable> and <replaceable>T</replaceable> is <replaceable>T</replaceable>.
		  </para></listitem>
		  <listitem><para>
		  The join of <replaceable>T</replaceable> and <code>Top</code> is <code>Top</code>.
		  </para></listitem>
		  <listitem><para>
		  The join of <replaceable>T</replaceable> and <code>Bot</code> is <replaceable>T</replaceable>.
		  </para></listitem>
		  </itemizedlist>
		  The join of two unrelated types is usually <code>Top</code>.
		</para>
		
	</section>
		
	<section xml:id="ref.types.subtyping.meet">
	<title>Meet</title>
		<para>
		  A <indexterm significance="preferred"><primary>common subtype</primary></indexterm><firstterm>common subtype</firstterm> of two types <replaceable>S</replaceable> and <replaceable>T</replaceable> is any type <replaceable>U</replaceable> such that 
		<replaceable>U</replaceable> &#x2264; <replaceable>S</replaceable> and <replaceable>U</replaceable> &#x2264; <replaceable>T</replaceable>. 
		The <indexterm significance="preferred"><primary>meet</primary></indexterm><firstterm>meet</firstterm> of <replaceable>S</replaceable> and <replaceable>T</replaceable> is the <emphasis>greatest</emphasis> common 
		subtype of <replaceable>S</replaceable> and <replaceable>T</replaceable>: it is a supertype of every common subtype of <replaceable>S</replaceable> and <replaceable>T</replaceable>.
		</para>
		<para>
		  Some common cases:
		  <itemizedlist>
		  <listitem><para>
		  The meet of <replaceable>T</replaceable> and <replaceable>T</replaceable> is <replaceable>T</replaceable>.
		  </para></listitem>
		  <listitem><para>
		  If <replaceable>S</replaceable> &#x2264; <replaceable>T</replaceable>, then the meet of <replaceable>S</replaceable> and <replaceable>T</replaceable> is <replaceable>S</replaceable>.
		  </para></listitem>
		  <listitem><para>
		  The meet of <replaceable>T</replaceable> and <code>Top</code> is <replaceable>T</replaceable>.
		  </para></listitem>
		  <listitem><para>
		  The meet of <replaceable>T</replaceable> and <code>Bot</code> is <code>Bot</code>.
		  </para></listitem>
		  </itemizedlist>
		  The meet of two unrelated types is usually <code>Bot</code>.
		</para>
	</section>
	
	<section xml:id="ref.types.subtyping.variance">
	<title>Variance</title>

		<para>
		When types contain other types as components, such as a tuple type or a polymorphic type, the
		subtype relationship between these composite types depends on the subtype relationships between
		their components. Suppose we have a composite type of the form <replaceable>C</replaceable>{<replaceable>T</replaceable>},
		where <replaceable>T</replaceable> is a type and <replaceable>C</replaceable> is the context in
		which it appears. The <indexterm significance="preferred"><primary>variance</primary></indexterm><firstterm>variance</firstterm>
	  of the context <replaceable>C</replaceable> is defined in the standard way:
		
		<itemizedlist>
		<listitem><para>
		<replaceable>C</replaceable> is <indexterm significance="preferred"><primary>covariant</primary></indexterm><firstterm>covariant</firstterm> if <replaceable>S</replaceable> &#x2264; <replaceable>T</replaceable> implies that <replaceable>C</replaceable>{<replaceable>S</replaceable>} &#x2264; <replaceable>C</replaceable>{<replaceable>T</replaceable>}
		</para></listitem>
		<listitem><para>
		<replaceable>C</replaceable> is <indexterm significance="preferred"><primary>contravariant</primary></indexterm><firstterm>contravariant</firstterm> if <replaceable>S</replaceable> &#x2264; <replaceable>T</replaceable> implies that <replaceable>C</replaceable>{<replaceable>T</replaceable>} &#x2264; <replaceable>C</replaceable>{<replaceable>S</replaceable>}
		</para></listitem>
		<listitem><para>
		<replaceable>C</replaceable> is <indexterm significance="preferred"><primary>invariant</primary></indexterm><firstterm>invariant</firstterm> if <replaceable>S</replaceable> = <replaceable>T</replaceable> implies that <replaceable>C</replaceable>{<replaceable>S</replaceable>} = <replaceable>C</replaceable>{<replaceable>T</replaceable>}.
		</para></listitem>
		</itemizedlist>
		
		</para>

		<para>
		<link linkend="ref.data.tuple.type">Tuple types</link>, <link linkend="ref.data.record.type">record types</link>, and <link linkend="ref.data.list.type">list types</link> are all covariant contexts. 
		In a <link linkend="ref.data.closure.type">function type</link>, the return type is a covariant context, but the argument types are contravariant contexts.
		The type parameters of <link linkend="ref.data.mutable">mutable object</link> types are invariant contexts.
		</para>

		<para>
		The variance of the type parameters in an <link linkend="ref.declarations.type.alias">aliased type</link> or <link linkend="ref.data.datatype.type">datatype</link> is determined from the declaration itself, by observing the contexts in which the parameters appear. 
		If a parameter appears only in covariant contexts, it is covariant. 
		If it appears only in contravariant contexts, it is contravariant. 
		If it appears in both contexts, it is invariant.
		</para>
		
	</section>
	
		
		 
	<section xml:id="ref.types.subtyping.links">
	  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.types.metatheory">Type System Metatheory</link></para></listitem>
		</itemizedlist>
		<!-- 
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para>TODO</para></listitem>
		</itemizedlist>
		-->		  
	  </section>
	  
</section>
