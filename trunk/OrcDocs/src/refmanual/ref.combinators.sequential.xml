<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.combinators.sequential.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Sequential Combinator -->
   <section xml:id="ref.combinators.sequential" xmlns="http://docbook.org/ns/docbook">
      <title>Sequential Combinator</title>
      
      <!-- Index pointers for unwritten terms -->
	  <indexterm><primary>sequential combinator</primary></indexterm>

		  <para>
		  <variablelist>
		  	<varlistentry><term><replaceable>F</replaceable><code> &gt;</code><replaceable>x</replaceable><code>&gt; </code><replaceable>G</replaceable></term>
			<listitem>
			<para>
			  The execution of <replaceable>F</replaceable><code> &gt;</code><replaceable>x</replaceable><code>&gt; </code><replaceable>G</replaceable>
			   starts by executing <replaceable>F</replaceable>. Whenever <replaceable>F</replaceable> 
			  <indexterm><primary>publish</primary></indexterm><link linkend="ref.concepts.publish">publishes</link> a value, a new execution of <replaceable>G</replaceable> begins in parallel with <replaceable>F</replaceable> (and with any previous 
			  executions of <replaceable>G</replaceable>); in that execution of <replaceable>G</replaceable>, variable <replaceable>x</replaceable> is bound to the value
			  published by <replaceable>F</replaceable>. Any value 
			  published by any executions of <replaceable>G</replaceable> is published by the whole expression, but the values published 
			  by <replaceable>F</replaceable> are not published by the whole expression; they are consumed by the variable binding. 
			</para>
			</listitem>
			</varlistentry>
			<varlistentry><term><replaceable>F</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><replaceable>G</replaceable></term>
			<listitem>
			<para>
			  The sequential combinator may be written as <replaceable>F</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><replaceable>G</replaceable>, 
			  where <replaceable>P</replaceable> is a <link linkend="ref.patterns">pattern</link> instead of 
			  just a variable name. Any value published by <replaceable>F</replaceable> is matched against the pattern <replaceable>P</replaceable>. 
			  If this match is successful, a new execution of <replaceable>G</replaceable> begins, with all of the bindings 
			  from the match. Otherwise, the published value is simply ignored, and no new execution
			  of <replaceable>G</replaceable> is begun.
			</para>
			</listitem>
			</varlistentry>
			<varlistentry><term><replaceable>F</replaceable><code><![CDATA[ >> ]]></code><replaceable>G</replaceable></term>
			<listitem>
			<para>
			  This is equivalent to using a <link linkend="ref.patterns.wildcard">wildcard pattern</link>: <replaceable>F</replaceable><code><![CDATA[ >_> ]]></code><replaceable>G</replaceable>.  Every publication
			  of <replaceable>F</replaceable> will match the combinator pattern, causing an execution of <replaceable>G</replaceable> for every individual
			  publication of <replaceable>F</replaceable>.  No bindings will be made in <replaceable>G</replaceable> from these publications.
			</para>
			</listitem>
			</varlistentry>
			</variablelist>
		  </para>
      
	  <section xml:id="ref.combinators.sequential.syntax">
		  <title>Syntax</title>
		  <para>
		    <productionset>
		    <productionrecap linkend="ebnf.expression.sequential"/>
		    </productionset>
		  </para>
		  <para><emphasis role="strong">Combinator Precedence Level</emphasis>: 
			  <olink targetdoc="userguide" targetptr="combinators.sequential">sequential</olink> >
			  <olink targetdoc="userguide" targetptr="combinators.parallel">parallel</olink> > 
			  <olink targetdoc="userguide" targetptr="combinators.pruning">pruning</olink> >
			  <olink targetdoc="userguide" targetptr="combinators.otherwise">otherwise</olink>
			        [<link linkend="ref.syntax.precedence">Full Table</link>]
			  </para>
	  </section>
	  
	  <section xml:id="ref.combinators.sequential.identities">
		<title>Notable Identities</title>	  
			  <para>
			  <informaltable tabstyle="identitylist" frame="none" pgwide="0"><tgroup align="left" cols="4" colsep="0" rowsep="0">
			    <colspec align="right" colwidth="10*"/>
			    <colspec align="center" colwidth="1*"/>
			    <colspec align="left" colwidth="10*"/>
			    <colspec align="right" colwidth="7*"/>
				<tbody>
				  <row>
				    <entry><replaceable>F</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><replaceable>G</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><replaceable>H</replaceable></entry>
				    <entry> = </entry>
				    <entry><replaceable>F</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><code>(</code><replaceable>G</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><replaceable>H</replaceable><code>)</code></entry>
				    <entry>  (Right Associative)</entry>
				  </row>
				</tbody>
				</tgroup></informaltable>
			  </para>
      </section>
	  
	  <section xml:id="ref.combinators.sequential.type">
	    <title>Type</title>
			<para>
				The type of <replaceable>F</replaceable><code> &gt;</code><replaceable>P</replaceable><code>&gt; </code><replaceable>G</replaceable> 
				is the type of <replaceable>G</replaceable> in the <link linkend="ref.types.context">context</link> Γ<subscript>F</subscript>, 
				where Γ<subscript>F</subscript> is the result of matching the pattern <replaceable>P</replaceable> against the type of <replaceable>F</replaceable>.
			</para>
		</section>
		
	  <section xml:id="ref.combinators.sequential.examples">
		  <title>Examples</title>

		  <example xml:id="ref.combinators.sequential.examples.binding"><title>Variable Binding</title>
<programlisting language="orc-demo"><![CDATA[
{- Publish 1 and 2 in parallel -}
  
(0 | 1) >n> n+1

{-
OUTPUT:PERMUTABLE
1
2
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.sequential.examples.filtering"><title>Filtering</title>
<programlisting language="orc-demo"><![CDATA[
{- Filter out values of the form (_,false) -}

( (4,true) | (5,false) | (6,true) )  >(x,true)> x

{-
OUTPUT:PERMUTABLE
4
6
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.sequential.examples.suppressed"><title>Suppressed Publication</title>
<programlisting language="orc-demo"><![CDATA[
{- Print two strings to the console,
   but don't publish the return values of the calls.
-}

Println("goodbye") >>
Println("world") >>
stop

{-
OUTPUT:
goodbye
world
-}
]]></programlisting>
		  </example>
		  
	  </section>
	  
	  <section xml:id="ref.combinators.sequential.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.concepts.publish">Publication</link></para></listitem>
			<listitem><para><link linkend="ref.concepts.silent">Silence</link></para></listitem>
			<listitem><para><link linkend="ref.patterns">Patterns</link></para></listitem>
			<listitem><para><link linkend="ref.data.signal"><code>signal</code></link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="combinators.sequential">Sequential Combinator</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="patterns.extensions">Pattern Matching Extensions</olink></para></listitem>
			<listitem><para><olink targetdoc="userguide" targetptr="orc.sites">Sites</olink></para></listitem>
		</itemizedlist>

	  </section>
   </section>
