<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.numeric.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.numeric">
<title>Numerics</title>

<para>Orc includes two numeric types, <code>Integer</code> and <code>Number</code>.
Orc's <code>Integer</code> is an arbitrary-precision two's complement integer. 
Orc's <code>Number</code> is a floating point number, with an arbitrary-precision two's complement significand and a 32-bit two's complement exponent (base 10).
<code>Number</code> behaves in accordance with the ANSI INCITS 274-1996 subset of ANSI/IEEE Std 754-2008.
Namely, "infinite, NaN, or subnormal results are always treated as errors, and â€“0 results are hidden".
</para>

<para>
Note that the divide operation on <code>Number</code>s can encounter a
non-terminating decimal expansion, where there is no exact representable
decimal result.  In this case, the divide operation falls back to division
using IEEE 754 binary64 (formerly called double precision)
binary floating-point operands.
This fall back may result in a loss of precision for this operation.
</para>

<para>
Similarly, the exponent operation may fall back to IEEE 754 binary64
binary floating-point operands in the case of a fractional exponent.
This fall back may result in a loss of precision for this operation.
</para>

<section xml:id="ref.data.numeric.literals">
<title>Literals</title>

<para><emphasis role="strong">EBNF</emphasis>: <replaceable>Number</replaceable> ::= <replaceable>digit</replaceable>+ ( <code>.</code> <replaceable>digit</replaceable>+ )? ( (<code>E</code>|<code>e</code>) (<code>+</code>|<code>-</code>)? (<replaceable>digit</replaceable>+) )?</para>

<para>Numeric literals in Orc are specified in decimal.
Leading zeros are allowed, but have no significance.  Trailing zeros after a decimal point also have no significance.
If a numeric literal contains a decimal point or an "<code>E</code>", it is a <code>Number</code> (floating point) literal, otherwise it is an <code>Integer</code> literal.
</para>

</section>


<section xml:id="ref.data.numeric.operations">
<title>Operations</title>

<para>Notable operations on integers and numbers include:
<itemizedlist>
<listitem><para>Add: <code>+</code></para></listitem>
<listitem><para>Subtract: <code>-</code></para></listitem>
<listitem><para>Negate (unary minus): <code>-</code></para></listitem>
<listitem><para>Multiply: <code>*</code></para></listitem>
<listitem><para>Divide: <code>/</code></para></listitem>
<listitem><para>Exponent: <code>**</code></para></listitem>
<listitem><para>Remainder: <code>%</code></para></listitem>
<listitem><para>Absolute value: <code>abs</code></para></listitem>
<listitem><para>Signum: <code>signum</code></para></listitem>
<listitem><para>Floor: <code>Floor</code></para></listitem>
<listitem><para>Ceiling: <code>Ceil</code></para></listitem>
</itemizedlist>
</para>

<para>
	Arithmetic operators with two integer arguments will perform an integer operation and 
	return an integer result; for example, <code>5 / 2</code> performs integer division and 
	returns 2. However, if either argument to an operator has a decimal part 
	(even if it is trivial, as in <code>3.0</code>), the other argument will be promoted, and 
	a decimal operation will be performed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both 
	perform decimal division and return 2.5. 
</para>

<para>
A prefix unary minus sign is provided for in the Orc syntax, but not a prefix unary plus sign.
</para>

</section>

<section xml:id="ref.data.numeric.javacalls">
<title>Java calls</title>

<para>
Orc <code>Integer</code> values are passed in calls to and returns
from Java code as <code language="java">java.math.BigInteger</code>, or if the callee
method expects a specific numeric type, an <code>Integer</code> will be
converted to a <code language="java">java.lang.Byte</code>, <code language="java">java.lang.Short</code>,
<code language="java">java.lang.Integer</code>, <code language="java">java.lang.Long</code>,
<code language="java">java.lang.Float</code>, or <code language="java">java.lang.Double</code>, as appropriate.
These values are boxed and unboxed per <citetitle pubwork="book">The Java Language Specification</citetitle>.
</para>

<para>
Orc <code>Number</code> values are passed in calls to and returns
from Java code as <code language="java">java.math.BigDecimal</code>, or if the callee
method expects a specific numeric type, a <code>Number</code> will be
converted to a <code language="java">java.lang.Float</code> or 
<code language="java">java.lang.Double</code>, as appropriate.
These values are boxed and unboxed per <citetitle pubwork="book">The Java Language Specification</citetitle>.
</para>

</section>

<section xml:id="ref.data.numeric.type">
  <title>Type</title>
	<para>
		All numeric values have type <code>Number</code>. Integer values also
		have the more specific type <code>Integer</code>, which is a subtype of <code>Number</code>.
	</para>
</section>


<section xml:id="ref.data.numeric.examples">
<title>Examples</title>


<example xml:id="ref.data.numeric.examples.one">
<title>Decimal Promotion</title>
<programlisting language="orc-demo"><![CDATA[
{- An expression only publishes a decimal value
   if one of its values (including function and
   site call publications) is a decimal
-}

16 - 8 + 50 / 3 * 1 >a>
16 - 8 + 5e1 / 3 * 1 >b>
16 - floor(8.5) + ceil(49.99) / 3 * 1 >c>
(a, b, c) 

{-
OUTPUT:
(24, 24.666666666666668, 24)
-}
]]></programlisting>
</example>

<example xml:id="ref.data.numeric.examples.two">
<title>Square Roots and Squares</title>
<programlisting><![CDATA[
{- Calculate the square roots and squares of
   a list of numbers
-}

val nums = [1,2,3,4.0,5.00]

each(nums) >x> ( 
  x**(1.0/2) >sqrt>
  x**2 >sq>
  (x,sqrt,sq)
)

{-
OUTPUT:permutable
(1, 1.0, 1)
(2, 1.4142135623730951, 4)
(3, 1.7320508075688772, 9)
(4.0, 2.0, 16.00)
(5.00, 2.23606797749979, 25.0000)
-}
]]></programlisting>
</example>
		  
</section>

<section xml:id="ref.data.numeric.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
        			<!-- TODO <listitem><para><link linkend="ref.types.Integer">Integer type</link></para></listitem> -->
        			<!-- TODO <listitem><para><link linkend="ref.types.Number">Number type</link></para></listitem> -->
          			<listitem><para><link linkend="ref.stdlib.core.Add"><code>Add</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Sub"><code>Sub</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.UMinus"><code>UMinus</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Mult"><code>Mult</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Exponent"><code>Exponent</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Div"><code>Div</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Mod"><code>Mod</code> site</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.abs"><code>abs</code> function</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.signum"><code>signum</code> function</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Floor"><code>Floor</code> function</link></para></listitem>
          			<listitem><para><link linkend="ref.stdlib.core.Ceil"><code>Ceil</code> function</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="cor.constants">Constants</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="language.base.operators">Operators</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
</section>

</section>
