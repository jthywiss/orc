<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.numeric.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.numeric">
<title>Numeric Values: Integer and Floating-Point Values</title>

<para><emphasis role="strong">Type</emphasis>: <code>Integer</code></para>
<para><emphasis role="strong">Type</emphasis>: <code>Number</code></para>

<para>Orc includes two numeric types, <code>Integer</code> and <code>Number</code>.
Orc's <code>Integer</code> is an arbitrary-precision two's complement integer. 
Orc's <code>Number</code> is a floating point number, with an arbitrary-precision two's complement significand and a 32-bit two's complement exponent (base 10).
<code>Number</code> behaves in accordance with the ANSI INCITS 274-1996 subset of ANSI/IEEE Std 754-2008.
Namely, "infinite, NaN, or subnormal results are always treated as errors, and â€“0 results are hidden".
</para>

<para>
Note that the divide operation on <code>Number</code>s can encounter a
non-terminating decimal expansion, where there is no exact representable
decimal result.  In this case, the divide operation falls back to division
using IEEE 754 <code>binary64</code> (formerly called double precision)
binary floating-point operands.
This fall back may result in a loss of precision for this operation.
</para>

<para>
Similiarly, the exponent operation may fall back to IEEE 754 <code>binary64</code>
binary floating-point operands in the case of a fractional exponent.
This fall back may result in a loss of precision for this operation.
</para>

<section xml:id="ref.data.numeric.literals">
<title>Literals</title>

<para><emphasis role="strong">EBNF</emphasis>: <replaceable>Number</replaceable> ::= <replaceable>digit</replaceable>+ ( <code>.</code> <replaceable>digit</replaceable>+ )? ( (<code>E</code>|<code>e</code>) (<code>+</code>|<code>-</code>)? (<replaceable>digit</replaceable>+) )?</para>

<para>Numeric literals in Orc are specified in decimal.
Leading zeros are allowed, but have no significance.  Trailing zeros after a decimal point also have no significance.
If a numeric literal contains a decimal point or an "<code>E</code>", it is a <code>Number</code> (floating point) literal, otherwise it is an <code>Integer</code> literal.
A prefix unary minus sign is provided for in the Orc syntax, but not a prefix unary plus sign.
</para>

</section>


<section xml:id="ref.data.numeric.operations">
<title>Operations</title>

<para>Notable numeric operations include:
<itemizedlist>
<listitem><para>Add: <code>+</code></para></listitem>
<listitem><para>Subtract: <code>-</code></para></listitem>
<listitem><para>Negate (unary minus): <code>-</code></para></listitem>
<listitem><para>Multiply: <code>*</code></para></listitem>
<listitem><para>Divide: <code>/</code></para></listitem>
<listitem><para>Exponent: <code>**</code></para></listitem>
<listitem><para>Remainder: <code>%</code></para></listitem>
<listitem><para>Absolute value: <code>abs</code></para></listitem>
<listitem><para>Signum: <code>signum</code></para></listitem>
<listitem><para>Floor: <code>floor</code></para></listitem>
<listitem><para>Ceiling: <code>ceil</code></para></listitem>
</itemizedlist>
</para>

<para>
	Arithmetic 
	operators with two integer arguments will perform an integer operation and 
	return an integer result; for example, <code>5 / 2</code> performs integer division and 
	evaluates to 2. However, if either argument to an operator has a decimal part 
	(even if it is trivial, as in <code>3.0</code>), the other argument will be promoted, and 
	a decimal operation will be performed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both 
	perform decimal division and evaluate to 2.5. 
</para>

</section>

<section xml:id="ref.data.numeric.javacalls">
<title>Java calls</title>

<para>
Orc <code>Integer</code> values are passed in calls to and returns
from Java code as <code>java.math.BigInteger</code>, or if the callee
method expects a specific numeric type, an <code>Integer</code> will be
converted to a <code language="java">java.lang.Byte</code>, <code language="java">java.lang.Short</code>,
<code language="java">java.lang.Integer</code>, <code language="java">java.lang.Long</code>,
<code language="java">java.lang.Float</code>, or <code language="java">java.lang.Double</code>, as appropriate.
These values are boxed and unboxed per <citetitle pubwork="book">The Java Language Specification</citetitle>.
</para>

<para>
Orc <code>Number</code> values are passed in calls to and returns
from Java code as <code>java.math.BigDecimal</code>, or if the callee
method expects a specific numeric type, a <code>Number</code> will be
converted to a <code language="java">java.lang.Float</code> or 
<code language="java">java.lang.Double</code>, as appropriate.
These values are boxed and unboxed per <citetitle pubwork="book">The Java Language Specification</citetitle>.
</para>

</section>

<section xml:id="ref.data.numeric.examples">
<title>Examples</title>


<example xml:id="ref.data.numeric.examples.one">
<title>TODO:Example1</title>
<programlisting language="orc-demo"><![CDATA[
--TODO
signal
]]></programlisting>
</example>

<example xml:id="ref.data.numeric.examples.two">
<title>TODO:Example2</title>
<programlisting><![CDATA[
--TODO
signal
]]></programlisting>
</example>
		  
</section>

<section xml:id="ref.data.numeric.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="center">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<!-- TODO <listitem><para><olink targetdoc="ref.types.Integer" targetptr="ref.types.Integer"><code>Integer</code> type</olink></para></listitem> -->
          			<!-- TODO <listitem><para><olink targetdoc="ref.types.Number" targetptr="ref.types.Number"><code>Number</code> type</olink></para></listitem> -->
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>Add</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>Sub</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>UMinus</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>Mult</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>Exponent</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>Div</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>Mod</code> site</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>abs</code> function</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>signum</code> function</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>floor</code> function</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.stdlib.core" targetptr="ref.stdlib.core"><code>ceil</code> function</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="root" targetptr="cor.constants">Constants</olink></para></listitem>
          			<listitem><para><olink targetdoc="root" targetptr="language.base.operators">Operators</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
</section>

</section>
