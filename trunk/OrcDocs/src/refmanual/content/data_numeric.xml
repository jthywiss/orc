<?xml version="1.0" encoding="UTF-8"?>
<!-- data_numeric.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section id="ref.data.numeric">
<title>Numeric Values: Integer and Floating-Point Values</title>

<para><emphasis role="strong">Type</emphasis>: <code>Integer</code></para>
<para><emphasis role="strong">Type</emphasis>: <code>Number</code></para>

<para>Orc includes two numeric types, <type>Integer</type> and <type>Number</type>.
Orc's <type>Integer</type> is an arbitrary-precision two's complement integer. 
Orc's <type>Number</type> is a floating point number, with an arbitrary-precision two's complement significand and a 32-bit two's complement exponent (base 10).
<type>Number</type> behaves in accordance with the ANSI INCITS 274-1996 subset of ANSI/IEEE Std 754-2008.
Namely, "infinite, NaN, or subnormal results are always treated as errors, and â€“0 results are hidden".
</para>

<para>
Note that the divide operation on <type>Number</type>s can encounter a
non-terminating decimal expansion, where there is no exact representable
decimal result.  In this case, the divide operation falls back to division
using IEEE 754 <type>binary64</type> (formerly called double precision)
binary floating-point operands.
This fall back may result in a loss of precision for this operation.
</para>

<para>
Similiarly, the exponent operation may fall back to IEEE 754 <type>binary64</type>
binary floating-point operands in the case of a fractional exponent.
This fall back may result in a loss of precision for this operation.
</para>

<section id="ref.data.numeric.literals">
<title>Literals</title>

<para><emphasis role="strong">EBNF</emphasis>: Number ::= ([0-9]+)([.][0-9]+)?([Ee][+-]?([0-9]+))?</para>

<para>Numeric literals in Orc are specified in decimal.
Leading zeros are allowed, but have no significance.  Trailing zeros after a decimal point also have no significance.
If a numeric literal contains a decimal point or an "<code>E</code>", it is a <type>Number</type> (floating point) literal, otherwise it is an <type>Integer</type> literal.
A prefix unary minus sign is provided for in the Orc syntax, but not a prefix unary plus sign.
</para>

</section>


<section id="ref.data.numeric.operations">
<title>Operations</title>

<para>Notable numeric operations include:
<itemizedlist>
<listitem><para>Add: <code>+</code></para></listitem>
<listitem><para>Subtract: <code>-</code></para></listitem>
<listitem><para>Negate (unary minus): <code>-</code></para></listitem>
<listitem><para>Multiply: <code>*</code></para></listitem>
<listitem><para>Divide: <code>/</code></para></listitem>
<listitem><para>Exponent: <code>**</code></para></listitem>
<listitem><para>Remainder: <code>%</code></para></listitem>
<listitem><para>Absolute value: <code>abs</code></para></listitem>
<listitem><para>Signum: <code>signum</code></para></listitem>
<listitem><para>Floor: <code>floor</code></para></listitem>
<listitem><para>Ceiling: <code>ceil</code></para></listitem>
</itemizedlist>
</para>

</section>

<section id="ref.data.numeric.javacalls">
<title>Java calls</title>

<para>
Orc <type>Integer</type> values are passed in calls to and returns
from Java code as <type>java.math.BigInteger</type>, or if the callee
method expects a specific numeric type, an <type>Integer</type> will be
converted to a <type>java.lang.Byte</type>, <type>java.lang.Short</type>,
<type>java.lang.Integer</type>, <type>java.lang.Long</type>,
<type>java.lang.Float</type>, or <type>java.lang.Double</type>, as appropriate.
These values are boxed and unboxed per the Java Language Specification.
</para>

<para>
Orc <type>Number</type> values are passed in calls to and returns
from Java code as <type>java.math.BigDecimal</type>, or if the callee
method expects a specific numeric type, a <type>Number</type> will be
converted to a <type>java.lang.Float</type> or 
<type>java.lang.Double</type>, as appropriate.
These values are boxed and unboxed per the Java Language Specification.
</para>

</section>

<section id="ref.data.numeric.examples">
<title>Examples</title>
<examplescript/>

<example caption="Parallel Publication" id="ref.data.numeric.examples.one">
<programlisting language="orc-demo"><![CDATA[
-- Publish 1 and 2 in parallel  
1 | 1+1

-- Note the publication order may be either 1 then 2
-- or 2 then 1
]]></programlisting>
</example>

<example caption="Parallel Sites" id="ref.data.numeric.examples.two">
<programlisting><![CDATA[
{- 
 Access two search sites, Google and Yahoo, in parallel.

 Publish any results they return.

 Since each call may publish a value, the expression
 may publish up to two values.
-}  
Google("cupcake") | Yahoo("cupcake")
]]></programlisting>
</example>
		  
</section>

<section id="ref.data.numeric.links">
<title>Related Links</title>

<informaltable frame='all'>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <colspec colname='c1'/>
    <colspec colname='c2'/> 
    <thead>
      <row>
        <entry align="center">Related Reference Topics</entry>
        <entry align="center">Related Tutorial Sections</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>Combinators</entry>
        <entry><olink targetdoc="root" targetptr="special.dot">The . notation</olink></entry>
      </row>
      <row>
        <entry>Parallel Server Network</entry>
        <entry><olink targetdoc="root" targetptr="terms.constant">Constants</olink></entry>
      </row>
      <row>
        <entry>Site</entry>
        <entry><olink targetdoc="root" targetptr="cor.closures">Closures</olink></entry>
      </row>
      <row>
        <entry>JavaCall</entry>
        <!-- Use the following entry to fill up any remaining empty slots in that column -->
        <entry morerows='1' valign='middle'><para></para></entry>
      </row>
      <row>
        <entry>Baz</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

</section>

</section>
