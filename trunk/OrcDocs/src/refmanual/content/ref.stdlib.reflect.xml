<?xml version='1.0' encoding='UTF-8'?>
<section xml:id="ref.stdlib.reflect"> 
        <!--Generated by OrcDocgen from reflect.inc on Feb 2, 2011 6:07:56 PM-->
        <title>reflect</title>
        <para>Metalanguage operations.
</para><variablelist>
            <?dbfo list-presentation="list"?>
            <varlistentry xml:id="ref.stdlib.reflect.MakeSite">
  		  <term><code>MakeSite</code></term>
        <listitem>
  		 	  <para><code>site MakeSite[A](A) :: A</code></para>
  			  <para>This site promotes an Orc closure to a site; when the site is called, the
closure is executed on those arguments. These executions behave
like site calls; in particular, the following four properties hold:
</para><para><itemizedlist>
<listitem> The site, like all sites, is strict in its arguments. </listitem>
<listitem> The site returns only the first value published by the executed closure. The closure continues to run, but its subsequent publications are discarded. </listitem>
<listitem> The execution of the closure is protected from termination. If the site call is terminated, the closure still runs, and its publications are simply ignored. </listitem>
<listitem> If the execution of the closure halts, so does the site call. </listitem>
</itemizedlist>
</para><para>The typical usage of MakeSite looks like:
</para><para><programlisting language="orc-demo"><![CDATA[
def foo(...) = ...
val Foo = MakeSite(foo)]]></programlisting>
</para><para>The typing of MakeSite will enforce the side condition that the type A is an arrow
type.
</para>
  			</listitem>
  		</varlistentry>
          </variablelist>
      </section>