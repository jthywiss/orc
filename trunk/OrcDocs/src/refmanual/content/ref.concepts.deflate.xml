<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.concepts.deflate.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Deflate Concept -->
	<section xml:id="ref.concepts.deflate">
		<title>Deflating</title>
		<section xml:id="ref.concepts.deflate.definition">
		<title>Definition</title>
			<para>
			Deflating is an evaluation mechanism which extracts a single value from an expression that
			might publish many values, so that such an expression can be evaluated in a context that expects
			at most one value.
			</para>
			<para>
			Orc <indexterm significance="preferred"><primary>deflate</primary></indexterm><firstterm baseform="deflate">deflates</firstterm> a value <replaceable>v</replaceable> from an expression <replaceable>E</replaceable> in a context
			<replaceable>C</replaceable> by rewriting</para> 
			<para><replaceable>C</replaceable>[<replaceable>E</replaceable>]</para>
			<para>to</para>
			<para><replaceable>C</replaceable>[<code>x</code>]<code><![CDATA[ <x< ]]></code><replaceable>E</replaceable></para>
			<para>When <replaceable>E</replaceable> publishes a value <replaceable>v</replaceable>, 
			that value is bound to <code>x</code> and used in the context <replaceable>C</replaceable>.</para> 
			
			<para>The context <replaceable>C</replaceable> may contain multiple expressions to be deflated,
			so this transformation may be applied multiple times. For example, the expression</para>
			<para><code>(</code><replaceable>E</replaceable><code>, </code><replaceable>F</replaceable><code>, </code><replaceable>G</replaceable><code>)</code></para>
			<para>rewrites to</para>
			<para>
			  <code>(x, y, z)</code>
			  <code><![CDATA[ <x< ]]></code><replaceable>E</replaceable>
			  <code><![CDATA[ <y< ]]></code><replaceable>F</replaceable>
			  <code><![CDATA[ <z< ]]></code><replaceable>G</replaceable>
			</para>
			<para>
			  If any deflated expression <link linkend="ref.concepts.states.halt"><indexterm><primary>halts</primary></indexterm>halts</link> <link linkend="ref.concepts.silent">silently</link>, then the enclosing expression also halts silently. 
			  In the example above, if <replaceable>F</replaceable> halted silently, then the expression
			  <code>(</code><replaceable>E</replaceable><code>, </code><replaceable>F</replaceable><code>, </code><replaceable>G</replaceable><code>)</code>
			  would also halt silently. 
			</para>
			<para>
			  However, there is one exception to this rule: if <replaceable>C</replaceable> is a function call
			  it does not halt, since function evaluation is lenient.
			</para>
			<para>
		    Notice that each deflated expression is evaluated concurrently, due to the behavior of the
		    <indexterm><primary>pruning</primary></indexterm>pruning combinator. This is what makes Orc a functional concurrent language: when an expression is
		    evaluated recursively, all such evaluations take place simultaneously. 
		  </para>   
		</section>
		 <section xml:id="ref.concepts.deflate.examples">
		  <title>Examples</title>

		  <example xml:id="ref.concepts.deflate.examples.search"><title>Search Comparison</title>
<programlisting><![CDATA[
{- Return the first published value from 3 major search engines
   in the form of a tuple.  Ignore all published values from
   each engine after its first.
-}

val results = (Google("Jack Burton"), Yahoo("Jack Burton"), Bing("Jack Burton"))
results

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>
		</section>
		
		<section xml:id="ref.concepts.deflate.links">
		  <title>Related Links</title>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Reference Topics</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
	        				<listitem><para><link linkend="ref.data.tuple">Tuples</link></para></listitem>
	        				<listitem><para><link linkend="ref.data.list">Lists</link></para></listitem>
	          				<listitem><para><link linkend="ref.data.record">Records</link></para></listitem>
	        		</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Tutorial Sections</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
	        		<listitem><para><olink targetdoc="userguide" targetptr="methodology.forkjoin">Fork-join</olink></para></listitem>
        			</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
		  
	  </section>
	</section>
