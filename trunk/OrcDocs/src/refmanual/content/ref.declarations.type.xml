<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.declarations.type.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Type -->
	<section xml:id="ref.declarations.type">
		<title><code>type</code> &#8212; Declare Type</title>

			<para>
			A type declaration binds a type variable to a type. There are three kinds of 
			type declarations: aliases, imports, and datatypes.
			</para>
			
	<section xml:id="ref.declarations.type.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.declaration.type"/>
	    	<productionrecap linkend="ebnf.declaration.type.alias"/>
	    	<productionrecap linkend="ebnf.declaration.type.import"/>
	    </productionset>
	  </para>
  </section>
  
  <section xml:id="ref.declarations.type.alias">
	  <title>Type Alias</title>
	  <para>
	    A type alias gives an existing type a new name, for the programmer's ease of use.
			There is no distinction between the alias and the aliased type; they can be used
			interchangeably. A type alias may not be recursive.
	  </para>
	  
	  <para>
	    A type alias may have type parameters, in which case it defines a type operator
	    which can be applied to other types.
	  </para>
  </section>
			
	<section xml:id="ref.declarations.type.import">
	  <title>Type Import</title>
	  
	  <para>
			A type import gives a name to a type described by some external service.
			This allows new types to be added to Orc, in much the same way that
			the <code>site</code> declaration allows new sites to be added to Orc.
			These new types are used to describe new structures created by sites,
			for example a <code>Buffer</code> type or a <code>URL</code> type. 
	  </para>
	  
	</section>
	
	<section xml:id="ref.declarations.type.datatype">
	  <title>Datatype</title>	  
	  <para>
	  TODO
	  <!-- 
	  tagged union of types, i.e. a variant/sum type. also allows recursive types because it controls unfolding.
			<para>When using the Orc type system, datatypes may be polymorphic (taking type parameters).</para>
<para>Datatypes can be recursive; namely, a datatype instance may contain an instance of the same type.</para>
 -->
	  </para>
	  
	</section>
			
  <section xml:id="ref.declarations.type.examples">
		<title>Examples</title>

		<example xml:id="ref.declarations.type.examples.aliases"><title>Aliases</title>
<programlisting language="orc"><![CDATA[
{- Define a three-dimensional vector type, and a polymorphic relation type  -}

type Vector = {. x :: Number, y :: Number, z :: Number .}
type Relation[R] = (R,R) => Boolean

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>
		  
		<example xml:id="ref.declarations.type.examples.imports"><title>Imports</title>
<programlisting language="orc"><![CDATA[
{- Import the Cell type of write-once cells, and import Java's URI type -}

type Cell = orc.lib.state.types.CellType
type URI = java.net.URI

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>
		</section>
		
		<section xml:id="ref.declarations.type.links">
		  <title>Related Links</title>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Reference Topics</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
	          			<listitem><para><link linkend="ref.data.datatype">Datatypes</link></para></listitem>
	        		</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Tutorial Sections</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
          				<listitem><para><olink targetdoc="userguide" targetptr="section.orc.datatypes">Datatypes</olink></para></listitem>
        			</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>

	  </section>
	</section>
