<!-- Val -->
	<section id="ref.expressions.val">
		<title>Val</title>
		<section id="ref.expressions.lambda.body">
			<para>
The declaration <code>val x = </code>G, followed by expression F, is 
actually just a different way of writing the expression F<code><![CDATA[ <x< ]]></code>G.
Thus, <code>val</code> shares all of the behavior of the pruning combinator. (This is also true when a pattern is used instead
of variable name <code>x</code>).
</para>
		</section>
		
		<section id="ref.expressions.val.examples">
		  <title>Examples</title>
		  <examplescript/>
		  <example caption="One Two Sum" id="ref.expressions.lambda.examples.one">
<programlisting><![CDATA[
{- Assign 3 to x and 6 to y -}
val x = 1 + 2
val y = x + x
]]></programlisting>
		  </example>
	  </section>
		
		<section id="ref.expressions.val.links">
		  <title>Related Links</title>
		  <informaltable frame='all'>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1'/>
			<colspec colname='c2'/>
			<thead>
			<row>
			  <entry align="center">Related Reference Topics</entry>
			  <entry align="center">Related Tutorial Sections</entry>
			</row>
			</thead>
			<tbody>
			<row>
			  <entry>Combinators</entry>
			  <entry><olink targetdoc="root" targetptr="special.dot">Operators</olink></entry>
			</row>
			<row>
			  <entry>Parallel Server Network</entry>
			  <entry><olink targetdoc="root" targetptr="terms.constant">Constants</olink></entry>
			</row>
			<row>
			  <entry>Site</entry>
			  <entry><olink targetdoc="root" targetptr="cor.closures">Closures</olink></entry>
			</row>
			<row>
			  <entry>JavaCall</entry>
			  <!-- Use the following entry to fill up any remaining empty slots in that column -->
			  <entry morerows='1' valign='middle'><para></para></entry>
			</row>
			<row>
			  <entry>Baz</entry>
			</row>
			</tbody>
			</tgroup>
		  </informaltable>
	  </section>
	</section>