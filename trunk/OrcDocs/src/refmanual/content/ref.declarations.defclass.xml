<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.declarations.defclass.xml - DocBook source for an Orc reference manual chapter

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- def class -->
   <section xml:id="ref.declarations.defclass">
      <title><code>def class</code>: Define Site in Orc</title>
      
      <para>
      The <code>def class</code> declaration provides the capability to implement sites within Orc itself.
      It is syntactically similar to the <code>def</code> declaration, but serves a different purpose. 
      </para>
      
      <para>
      The body of a <code>def class</code> consists of a sequence of declarations followed by a 
      <indexterm significance="preferred"><primary>goal expression</primary></indexterm><firstterm baseform="goal expression">goal</firstterm> expression. Each <code>def</code> or
			<code>def class</code> declaration in this sequence is called a <indexterm significance="preferred"><primary>method</primary></indexterm><firstterm>method</firstterm>; 
			a class must have at least one method.       
      </para>
      
      <para>
      </para>
      
      <para>
      Orc's <code>def class</code> provides encapsulation in a manner similar to classes in object-oriented
      languages. In addition to colocating methods and the shared resources on which they operate,
      an Orc class may also encapsulate some computation via the goal expression, colocating methods 
      and resources with some orchestration which manages or monitors those resources.  
      </para>
      
	  <section xml:id="ref.declarations.defclass.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.declaration.defclass"/>
	    </productionset>
	  </para>
	  </section>
	  
	  <section xml:id="ref.declarations.defclass.instances">
	  <title>Creating Instances</title>
	  
	  <para>
	  A <code>def class</code> declaration binds its identifier to a new site, which we call an Orc class. 
	  When this site is called, it creates and publishes an <indexterm significance="preferred"><primary>instance</primary></indexterm><firstterm>instance</firstterm>, 
	  a site which has all of the methods defined in the class.
	  </para>
	  
	  <para>
	  In parallel, execution of the goal expression begins. 
	  Any value published by the goal expression is discarded. 
	  The class is a site, meaning that the execution of the goal expression cannot be killed by Orc; 
	  it continues independently of the rest of the program.
	  </para>
	  
	  <para>
	  When an instance is created, each <code>val</code> declaration begins to execute, 
	  and each method is captured as a <link linkend="ref.data.closure">closure</link>.
	  This has two important implications:
	  
	  <itemizedlist>
      <listitem>
        Different instances will have different values for each <code>val</code> declaration,
        created by separate computations, and these bindings are captured by the method closures.
        In particular, this means that an instance could create some mutable resource, such as
        a mutable cell or a semaphore, which is then manipulated by the methods; different
        instances will have different underlying mutable resources. Instances are thus very similar 
        to objects in object-oriented languages.
      </listitem>
      <listitem>
        Recall that creation of a closure is strict in the closure's free variables. Thus,
        the creation of the instance may block on some free variable within the class (i.e.
        a variable bound by <code>val</code>), or a free variable in the scope of the class.
        In practice, this means that instance creation will block on every <code>val</code>
        declaration whose name is mentioned in any method.
      </listitem>
    </itemizedlist>
	  
	  </para>
	  	  
	  </section>
	  
	  <section xml:id="ref.declarations.defclass.methods">
	  <title>Calling Methods</title>
	  
	  <para>
	  Each instance returned by a call to the class has a method for each <code>def</code> or <code>def class</code>
	  declaration in the class body. A method is accessed using a <link linkend="ref.expressions.dot">dot access</link>;
	  the identifier name of the declaration is used as the key. When a method is called, the corresponding definition
	  executes.
	  </para>
	  
	  <para>
	  Each method behaves as a site, in particular a <link linkend="ref.concepts.states.helpful">helpful</link> site. Therefore,
	  
	  <itemizedlist>
	    <listitem>
	      A method call, unlike a function call, is strict in all of its arguments.
	    </listitem>
	    <listitem>
        A method call returns at most one value. If the method is a <code>def</code>, its first publication
        is used, and execution of the body continues, but subsequent publications are discarded. From the
        perspective of the rest of the program, the method call returned a single value and then halted.  
      </listitem>
      <listitem>
        If the method is a <code>def</code>, and execution of its body expression halts silently,
        then the method call also halts silently, exactly like a helpful site.   
      </listitem>
      <listitem>
        A method call cannot be <link linkend="ref.concepts.states.kill"><indexterm><primary>killed</primary></indexterm>killed</link> by the pruning combinator.
        Once the method has been called, its execution continues independently of the rest of the Orc program. 
      </listitem>
	  </itemizedlist>
	  
	  </para>
	  
	  <para>
	    The <indexterm><primary>methods</primary></indexterm>methods of an instance may be executed concurrently through concurrent invocations;
	    there is no synchronization or serialization mechanism to prevent this. Different calls to the same
	    method may even execute concurrently with each other.
	    If any method uses a shared resource, care must be taken to ensure that different method invocations
	    do not interfere with each other in unexpected ways.
    </para>
	  
	  </section>
	  
	  
	
	  <section xml:id="ref.declarations.defclass.type">
	    <title>Type</title>
	    <para>
	      A <code>def class</code> declaration is typechecked in the same way as a <link linkend="ref.declarations.def"><code>def</code> declaration</link>, with one exception.
	      The return type of a <indexterm><primary>closure</primary></indexterm>closure created by <code>def class</code>, rather than being the type of the body expression, is instead a <link linkend="ref.data.record.type">record type</link>
	      <code>{.</code> <replaceable>m<subscript>0</subscript></replaceable> <code>::</code> <replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>m<subscript>n</subscript></replaceable> <code>::</code> <replaceable>T<subscript>n</subscript></replaceable> <code>.}</code>,
	      where each <replaceable>m<subscript>i</subscript></replaceable> is the name of a method,
	      and <replaceable>T<subscript>i</subscript></replaceable> is its type.
	    </para>
	  </section>
	  
	   <section xml:id="ref.declarations.defclass.examples">
	   <title>Examples</title>
	   
	  	<section>
	  	<title>Matrix Definition</title>
	  	<para>
	  		Orc's standard library supports only one dimensional arrays, and array
			indices always start at 0. We define a template for a 2-dimensional matrix whose
			row and column indices range over arbitrary intervals.
	  	</para>
	  	<example xml:id="ref.declarations.defclass.semantics.examples.matrix"><title>Matrix Definition</title>
<programlisting language="orc-demo"><![CDATA[
{- Create a (rowhi-rowlo) x (colhi-collo) matrix 
   with a method to access its elements.
-}

def class Matrix((rowlo, rowhi), (collo, colhi)) =
 val mat = Array((rowhi - rowlo + 1) * (colhi - collo + 1))

 def access(i, j) = mat((i - rowlo) * (colhi - collo + 1) + j)

stop

{- Usage -}
val A = Matrix((-2, 0), (-1, 3)).access
A(-1, 2) := 5 >> A(-1, 2) := 3 >> A(-1, 2)?

{-
OUTPUT:
3
-}
]]></programlisting>
		  </example>
		  <para>
		  	Note: We have defined <code>A</code> as the "access" method of the defined
			matrix. This allows us to retrieve and update the matrix elements using
			traditional notation.
		  </para>
		  </section>
		  <section>
		  <title>Create a Site</title>
		  <para>
		  	We create a site, <code><indexterm><primary>Cell</primary></indexterm>Cell</code>, that defines a write-once variable. It
			supports two methods: <code>read</code> <link linkend="ref.concepts.states.block">blocks</link> until the variable has been
			written, and then it publishes its value; <code>write(v)</code> <link linkend="ref.concepts.states.block">blocks</link> forever if a value has
			already been written, otherwise it writes <code>v</code> as the value and
			publishes a <code><indexterm><primary>signal</primary></indexterm>signal</code>.
		  </para>
		  <para>
		  	We use two library sites, <code><indexterm><primary>Semaphore</primary></indexterm>Semaphore</code> (to ensure <link linkend="ref.concepts.states.block">blocking</link> of write if a
			value has been written) and <code><indexterm><primary>Ref</primary></indexterm>Ref</code> to store the value.
		  </para>
		  <example xml:id="ref.declarations.defclass.semantics.examples.createsite"><title>Create a Site</title>
<programlisting language="orc"><![CDATA[
{- Create a mutable cell site -}

def class Cell() =
 val s = Semaphore(1)
 val r = Ref()

 def write(v) = s.acquire() >> r := v
 def read() = r?

stop

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>
		  </section>
		  <section>
		  <title>Extend Functionality of an Existing Site</title>
		  <para>
		  	The <code><indexterm><primary>Buffer</primary></indexterm>Buffer</code> site implements an unbounded channel. We add a new method,
			<code>length</code>, that returns the number of items in the channel. We have to
			assign a name different from "Buffer" (e.g. "Channel") to this class.
		  </para>
		  <example xml:id="ref.declarations.defclass.semantics.examples.extendsite"><title>Extend Functionality of an Existing Site</title>
<programlisting language="orc-demo"><![CDATA[
{- Extend the pre existing channel site -}

def class Channel() =
 val ch = Buffer()
 val chlen = Counter(0)

 def put(x) = ch.put(x) >> chlen.inc()
 def get() = ch.get() >x> chlen.dec() >> x
 def length() = chlen.value()

stop

{-
OUTPUT:
no output
-}
]]></programlisting>
		  </example>
		  </section>
		  
		  
		  <section>
      <title>Defining a Set</title>
     <example xml:id="ref.declarations.defclass.declaration.defset"><title>Defining a Set</title>
<programlisting language="orc-demo"><![CDATA[
{- Define a set of maximum length n.
   Export methods "add", "remove" and "size".
-}

def class Newset(n) =
 val b = BoundedBuffer(n) {- to store the elements of the set -}
 val ne = Ref(0)          {- number of elements currently in the set -}

 {- Add an element to the set if it is non-full.
    If the set is full, wait until the set becomes non-full.
    Return a signal on completion.
 -}
 def add(x) = b.put(x) >> ne := ne? + 1

 {- Remove some element from the set if it is non-empty.
    If the set is empty, wait until the set becomes non-empty.
    Return the removed value.
 -}
 def remove() = b.get() >x> ne := ne? - 1 >> x

 {- Return the size, i.e., the number of elements currently in the set -}
 def size() = ne?


 {- Goal -} stop
 
{-
OUTPUT:
no output
-}
]]></programlisting>
      </example>
     </section>
		  
		  <section>
		  <title>Managing Concurrent Access</title>
		  <para>
		  	The methods of a class instance may be executed concurrently through
			concurrent invocations. Concurrent execution may cause interference,
			as in the example of the <code>Newset</code> example. Typically, <indexterm><primary>semaphores</primary></indexterm>semaphores are used to
			restrict access to methods and/or data. We rewrite <code>Newset</code> in which all
			accesses to shared data <code>ne</code> are protected using a semaphore.
		  </para>
		  <example xml:id="ref.declarations.defclass.semantics.examples.concaccess"><title>Managing Concurrent Access</title>
<programlisting language="orc-demo"><![CDATA[
{- Manage access to a set via a site -}

def class Newset(n) =
 val b = BoundedBuffer(n)
 val (s , ne) = (semaphore(1) , Ref(0))

 {- Add an element to the set if it is non-full.
   If the set is full, wait until the set becomes non-full.
   Return a signal on completion.
 -}
 def add(x) = b.put(x) >> s.acquire() >> ne := ne? + 1 >> s.release()

 {- Remove some element from the set if it is non-empty.
   If the set is empty, wait until the set becomes non-empty.
   Return the removed value.
 -}
 def remove() = b.get() >x> s.acquire() >> ne := ne? - 1 >>
   s.release() >> x

 {- Return the size, i.e., the number of elements currently in the set
 -}
 def size() = s.acquire() ne? >x> s.release() >> x

stop

{-
OUTPUT:
no output
-}
]]></programlisting>
		  </example>
		  </section>
		  <section>
		  <title>Computing with the Goal Expression</title>
		  <para>
		  	All the goal expressions shown so far have been merely <code>stop</code>. In the
			following example, the goal expression of the class initiates an
			unending computation in which <code>tick</code> is printed every second; all the
			publications of the goal expression are ignored.
		  </para>
		  <example xml:id="ref.declarations.defclass.semantics.examples.goal"><title>Computing with the Goal Expression</title>
<programlisting language="orc"><![CDATA[
{- Perform a print action with the goal expression 
   of a class.
-}

def class metro() =

 def metronome() = signal | Rwait(1000) >> metronome()

 {- Goal -} metronome() >> println("tick")

val _ = metro()
{- Goal of the whole program -}  stop

{-
OUTPUT:
"tick"
-}
]]></programlisting>
		  </example>
		  </section>
		  <section>
		  <title>Stopwatch</title>
		  <example xml:id="ref.declarations.defclass.semantics.examples.stopwatch"><title>Stopwatch</title>
<programlisting language="orc-demo"><![CDATA[
{- An instance of Stopwatch has the initial stopwatch value 0.
   
   The following operations are available:
     start():  (re)start the stopwatch and publish a signal
     halt():  stop the stopwatch and publish its current value
-} 

{- Each instance of Stopwatch creates a new clock.

   It also maintains two Ref variables:
     laststart: clock value when the last start() was executed.
     timeshown: stopwatch value when the last halt() was executed.

   Initially, both variable values are 0.
-}

def class Stopwatch() =
 val clk = Clock() {- create a new instance of Clock with time value 0 -}
 val (timeshown, laststart) = (Ref(0), Ref(0))

 def start() = laststart := clk()
 def halt() =
    timeshown := timeshown? + (clk() − laststart?) >> timeshown?
stop

{-
OUTPUT:
no-output
-}
]]></programlisting>
		  </example>
		  </section>
	 
	   
	   </section>
	
	  <section xml:id="ref.declarations.defclass.links">
		  <title>Related Links</title>
		  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><link linkend="ref.expressions.call">Site and Function Calls</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="section.language.class">Classes</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  </section>
</section>