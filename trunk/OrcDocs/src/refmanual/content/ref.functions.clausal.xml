<?xml version="1.0" encoding="UTF-8"?>
<!-- functions_clausal.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Clausal Functions -->
   <section xml:id="ref.functions.clausal">
      <title>Clausal Functions</title>
	  <section xml:id="ref.functions.clausal.behavior">
		  <title>Behavior</title>
		  <para>
		  The combination of functions and pattern matching offers a powerful capability: clausal definition of
functions. We can define expressions which execute different code depending on the structure of their
arguments.
		  </para>
		  <para>
		  A function may have multiple clauses, each of which has a sequence of patterns to match each argument,
and a body expression. Naturally, all clauses of a function must have the same number of arguments. Any
contiguous sequence of definitions with the same name and different arguments is interpreted as a clausal
definition, where each individual declaration is a clause of the larger function.
		  </para>
		  <para>
		  When the function is called, the clauses are tried in the order in which they appear until a match is found.
If no clause matches, the call remains silent.
		  </para>
	  </section>
	  <section xml:id="ref.functions.clausal.examples">
		  <title>Examples</title>

		  <example xml:id="ref.functions.clausal.examples.one"><title>Simple example of a clausal function</title>
<programlisting language="orc-demo"><![CDATA[
def sum([]) = 0
def sum(h:t) = h + sum(t)
]]></programlisting>
		  </example>

		  <example xml:id="ref.functions.clausal.examples.two"><title>Clausal function with constant patterns</title>
<programlisting language="orc-demo"><![CDATA[
{- Fibonacci numbers -}
def fib(0) = 1
def fib(1) = 1
def fib(n) = if (n < 0) then 0 else fib(n-1) + fib(n-2)
]]></programlisting>
		  </example>

		  <example xml:id="ref.functions.clausal.examples.three"><title>Clauses of mutually recursive functions</title>
<programlisting language="orc-demo"><![CDATA[
def even(0) = true
def odd(0) = false
def even(n) = odd(if n > 0 then n-1 else n+1)
def odd(n) = even(if n > 0 then n-1 else n+1)
]]></programlisting>
		  </example>

		  
	  </section>
	  <section xml:id="ref.functions.clausal.links">
		  <title>Related Links</title>
		  <informaltable frame='all'>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1'/>
			<colspec colname='c2'/> 
			<thead>
			<row>
			  <entry align="center">Related Reference Topics</entry>
			  <entry align="center">Related Tutorial Sections</entry>
			</row>
			</thead>
			<tbody>
			<row>
			  <entry>Combinators</entry>
			  <entry><olink targetdoc="root" targetptr="special.dot">The . notation</olink></entry>
			</row>
			</tbody>
			</tgroup>
		  </informaltable>
	  </section>
   </section>
