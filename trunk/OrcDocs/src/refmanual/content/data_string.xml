<?xml version="1.0" encoding="UTF-8"?>
<!-- data_string.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section id="ref.data.string">
<title>Character String Values</title>

<para><emphasis role="strong">Type</emphasis>: <code>String</code></para>

<para>Orc's representation of two-valued logical values are the usual
<literal>false</literal> and <literal>true</literal>.</para>

<section id="ref.data.string.literals">
<title>Literals</title>

<para><emphasis role="strong">EBNF</emphasis>: Boolean ::= <code>false</code> | <code>true</code></para>

<para>TODO:anything to say here?</para>

</section>


<section id="ref.data.string.operations">
<title>Operations</title>

<para>Notable boolean operations include:
<itemizedlist>
<listitem>Complement or Not: <code>~</code></listitem>
<listitem>And: <code>&amp;&amp;</code></listitem>
<listitem>Or: <code>||</code></listitem>
</itemizedlist>
as well as the comparison operations:
<itemizedlist>
<listitem>Less than: <code>&lt;:</code></listitem>
<listitem>Greater than: <code>:></code></listitem>
<listitem>Less than or equal to: <code>&lt;=</code></listitem>
<listitem>Greater than or equal to: <code>>=</code></listitem>
</itemizedlist>
</para>

</section>

<section id="ref.data.string.javacalls">
<title>Java calls</title>

<para>
class java.lang.String

Orc <type>Boolean</type> values are passed in calls to and returns
from Java code as <type>java.lang.Boolean</type>, which is boxed and
unboxed per the Java Language Specification as <type>boolean</type>.</para>

</section>

<section id="ref.data.string.examples">
<title>Examples</title>
<examplescript/>

<example caption="Parallel Publication" id="ref.data.string.examples.one">
<programlisting language="orc-demo"><![CDATA[
-- Publish 1 and 2 in parallel  
1 | 1+1

-- Note the publication order may be either 1 then 2
-- or 2 then 1
]]></programlisting>
</example>

<example caption="Parallel Sites" id="ref.data.string.examples.two">
<programlisting><![CDATA[
{- 
 Access two search sites, Google and Yahoo, in parallel.

 Publish any results they return.

 Since each call may publish a value, the expression
 may publish up to two values.
-}  
Google("cupcake") | Yahoo("cupcake")
]]></programlisting>
</example>
		  
</section>

<section id="ref.data.string.links">
<title>Related Links</title>

<informaltable frame='all'>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <colspec colname='c1'/>
    <colspec colname='c2'/> 
    <thead>
      <row>
        <entry align="center">Related Reference Topics</entry>
        <entry align="center">Related Tutorial Sections</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>Combinators</entry>
        <entry><olink targetdoc="root" targetptr="special.dot">The . notation</olink></entry>
      </row>
      <row>
        <entry>Parallel Server Network</entry>
        <entry><olink targetdoc="root" targetptr="terms.constant">Constants</olink></entry>
      </row>
      <row>
        <entry>Site</entry>
        <entry><olink targetdoc="root" targetptr="cor.closures">Closures</olink></entry>
      </row>
      <row>
        <entry>JavaCall</entry>
        <!-- Use the following entry to fill up any remaining empty slots in that column -->
        <entry morerows='1' valign='middle'><para></para></entry>
      </row>
      <row>
        <entry>Baz</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

</section>

</section>
