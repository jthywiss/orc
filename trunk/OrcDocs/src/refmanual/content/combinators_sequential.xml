<!-- Sequential Combinator -->
   <section id="ref.combinators.sequential">
      <title>Sequential Combinator</title>
	  <section id="ref.combinators.sequential.syntax">
		  <title>Syntax</title>
		  <para><emphasis role="strong">EBNF</emphasis>: <emphasis><code><![CDATA[E >P> E]]></code></emphasis></para>
		  <para><emphasis role="strong">Precedence</emphasis>: 
			  <olink targetdoc="root" targetptr="combinators.sequential">sequential</olink> >
			  <olink targetdoc="root" targetptr="combinators.parallel">parallel</olink> > 
			  <olink targetdoc="root" targetptr="combinators.pruning">pruning</olink> >
			  <olink targetdoc="root" targetptr="combinators.otherwise">otherwise</olink></para>
		  <para><emphasis role="strong">Associativity</emphasis>: right </para>
		  <para><emphasis role="strong">Commutative</emphasis>: no </para>
	  </section>
	  <section id="ref.combinators.sequential.behavior">
		  <title>Behavior</title>
		  <itemizedlist>
			  <listitem><code><![CDATA[F >x> G]]></code>
				  <para>
					  The execution of <code><![CDATA[F >x> G]]></code> starts by executing F. Whenever F 
					  publishes a value, a new copy of G is executed in parallel with F (and with any previous 
					  copies of G); in that copy of G, variable x is bound to the value published by F. Values 
					  published by copies of G are published by the whole expression, but the values published 
					  by F are not published by the whole expression; they are consumed by the variable binding. 
				  </para>
			  </listitem>
			  <listitem><code><![CDATA[F >P> G]]></code>
				  <para>
					  The sequential combinator may be written as <code><![CDATA[F >P> G]]></code>, where P is a pattern instead of 
					  just a variable name. Any value published by F is matched against the pattern P. 
					  If this match is successful, a new copy of G is started with all of the bindings 
					  from the match. Otherwise, the published value is simply ignored, and no new copy 
					  of G is executed. 
				  </para>
			  </listitem>
			  <listitem><code><![CDATA[F >> G]]></code> 
				  <para>
				  This is equivalent to using a wildcard pattern:  <code><![CDATA[>_>]]></code> 
				  </para>
			  </listitem>		  
		  </itemizedlist>
	  </section>
	  <section id="ref.combinators.sequential.examples">
		  <title>Examples</title>
		  <examplescript/>
		  <example caption="Variable Binding" id="ref.combinators.sequential.examples.one">
<programlisting language="orc-demo"><![CDATA[
-- Publish 1 and 2 in parallel  
(0 | 1) >n> n+1
]]></programlisting>
		  </example>

		  <example caption="Variable Binding 2" id="ref.combinators.sequential.examples.two">
<programlisting><![CDATA[
-- Prepend the site name to each published search result
-- The cat site concatenates any number of arguments into one string  
  Google("cupcake") >s> cat("Google: ", s)
| Yahoo("cupcake") >s> cat("Yahoo: ", s)
]]></programlisting>
		  </example>
		  
		  <example caption="Pattern Publication" id="ref.combinators.sequential.examples.three">
<programlisting><![CDATA[
-- Publish 3, 6, and 9 in arbitrary order.
(3,6,9)  >(x,y,z)>  ( x | y | z )
]]></programlisting>
		  </example>
		  
		  <example caption="Filtering" id="ref.combinators.sequential.examples.four">
<programlisting><![CDATA[
-- Filter out values of the form (_,false)
( (4,true) | (5,false) | (6,true) )  >(x,true)> x
-- Publishes 4 and 6 
]]></programlisting>
		  </example>
		  
		  <example caption="Suppressed Publication" id="ref.combinators.sequential.examples.five">
<programlisting><![CDATA[
{- 
  Print two strings to the console,
  but don't publish the return values of the calls.
-}
( println("goodbye") | println("world") ) >> stop
]]></programlisting>
		  </example>
		  
	  </section>
	  <section id="ref.combinators.sequential.links">
		  <title>Related Links</title>
		  <informaltable frame='all'>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1'/>
			<colspec colname='c2'/> 
			<thead>
			<row>
			  <entry align="center">Related Reference Topics</entry>
			  <entry align="center">Related Tutorial Sections</entry>
			</row>
			</thead>
			<tbody>
			<row>
			  <entry><olink targetdoc="refmanual" targetptr="ref.combinators">Combinators</olink></entry>
			  <entry><olink targetdoc="root" targetptr="combinators.sequential">Sequential Combinator</olink></entry>
			</row>
			<row>
			  <entry><olink targetdoc="refmanual" targetptr="ref.patterns">Patterns</olink></entry>
			  <entry><olink targetdoc="root" targetptr="patterns.extensions">Pattern Matching Extensions</olink></entry>
			</row>
			<row>
			  <entry><olink targetdoc="refmanual" targetptr="ref.class">Class</olink></entry>
			  <entry><olink targetdoc="root" targetptr="orc.sites">Sites</olink></entry>
			</row>
			</tbody>
			</tgroup>
		  </informaltable>
	  </section>
   </section>