<?xml version="1.0" encoding="UTF-8"?>
<!-- patterns_equality.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Equality Pattern -->
	<section xml:id="ref.patterns.equality">
		<title>Equality Pattern</title>
		<section xml:id="ref.patterns.equality.body">
			<para>
				An equality pattern is a variable name preceded by =.  
				When a variable occurs in a pattern, it is bound to the value being matched against that pattern.  
				However, when an equality pattern allows use of the value of the bound variable as the test pattern 
				in a way analogous to a literal. 
			</para>
			<para><emphasis role="strong">EBNF</emphasis>: <emphasis>P ::= 	=X</emphasis></para>
		</section>
		
		 <section xml:id="ref.patterns.equality.examples">
		  <title>Examples</title>

		  <example xml:id="ref.patterns.equality.examples.one"><title>Equality Definition</title>
<programlisting><![CDATA[
{- Consider the following definition, which compares its 
argument to the value bound to variable x, returning true 
if they are equal and false otherwise.  -}

def isx(=x) = true
def isx(_) = false
]]></programlisting>
		  </example>
		
		<example xml:id="ref.patterns.equality.examples.two"><title>Equality Definition II</title>
<programlisting><![CDATA[
{- The equality pattern becomes much more useful when 
it is embedded within other patterns. For example, consider 
this definition withz. If one of the arguments passed to it 
is equal to z, then the function returns its other argument. 
Otherwise it remains silent. -}

def withz(=z,y) = y
def withz(x,=z) = x
]]></programlisting>
		  </example>
		</section>
		
		<section xml:id="ref.patterns.equality.links">
		  <title>Related Links</title>
		  <informaltable frame='all'>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1'/>
			<colspec colname='c2'/>
			<thead>
			<row>
			  <entry align="center">Related Reference Topics</entry>
			  <entry align="center">Related Tutorial Sections</entry>
			</row>
			</thead>
			<tbody>
			<row>
			  <entry>Combinators</entry>
			  <entry><olink targetdoc="root" targetptr="special.dot">The . notation</olink></entry>
			</row>
			<row>
			  <entry>Parallel Server Network</entry>
			  <entry><olink targetdoc="root" targetptr="terms.constant">Constants</olink></entry>
			</row>
			<row>
			  <entry>Site</entry>
			  <entry><olink targetdoc="root" targetptr="cor.closures">Closures</olink></entry>
			</row>
			<row>
			  <entry>JavaCall</entry>
			  <!-- Use the following entry to fill up any remaining empty slots in that column -->
			  <entry morerows='1' valign='middle'><para></para></entry>
			</row>
			<row>
			  <entry>Baz</entry>
			</row>
			</tbody>
			</tgroup>
		  </informaltable>
	  </section>
	</section>
