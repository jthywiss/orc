<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.datatype.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.datatype">
<title>Algebraic Data Types</title>

<para>An Orc <firstterm>datatype</firstterm> is an algebraic data type, or "tagged union".
A datatype value contains a sequence of values enclosed by a <firstterm>tag</firstterm>.
This value can be <link linkend="ref.patterns.call">matched by a pattern</link>.
</para>

<para>
  Datatypes are defined by a <link linkend="ref.declarations.type.datatype"><code>type</code> declaration</link>.
  Each <firstterm>constructor</firstterm> in the declaration introduces a new tag, followed by a sequence of <firstterm>slots</firstterm>.
  The <code>|</code> separator allows multiple constructors to be defined at the same time.
</para>

<para>
  Datatypes provide many static typing facilities, but they may be used in an untyped
  program as well. Instead of containing a type, a slot may be empty, written <code>_</code>.
</para>

<section xml:id="ref.data.datatype.syntax">
  <title>Syntax</title>
  <para>
    <productionset>
    	<productionrecap linkend="ebnf.declaration.type.datatype"/>
    	<productionrecap linkend="ebnf.constructor"/>
    	<productionrecap linkend="ebnf.constructor.member"/>
    </productionset>
  </para>
</section>

<section xml:id="ref.data.datatype.constructors">
<title>Constructors</title>

<para>
  Each constructor creates a new site of the same name. The site takes one argument for each slot
  in the constructor, and publishes a datatype value consisting of the sequence of argument
  values, tagged with that constructor's unique tag.
</para>

<section xml:id="ref.data.datatype.type">
<title>Type</title>

<para>
A datatype declaration defines a new <firstterm>sum type</firstterm>.
</para>

<para>
Each of the sites defined by the datatype has the <link linkend="ref.data.closure.type">function type</link> 
<code>lambda</code> <code>[</code> <replaceable>X<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>X<subscript>n</subscript></replaceable> <code>]</code><code>(</code> <replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable> <code>)</code> <code>::</code> <replaceable>S</replaceable>,
where <replaceable>X<subscript>i</subscript></replaceable> are the type parameters of the datatype, <replaceable>T<subscript>i</subscript></replaceable> are the types in the slots of the constructor,
and <replaceable>S</replaceable> is the sum type.
</para>
<para>
Each constructor site also has a corresponding <link linkend="ref.patterns.call"><code>unapply</code> member</link>,
with type <code>lambda</code> <code>[</code> <replaceable>X<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>X<subscript>n</subscript></replaceable> <code>]</code><code>(</code><replaceable>S</replaceable><code>)</code> <code>::</code> <code>(</code> <replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable> <code>)</code>.
</para>

</section>


<section xml:id="ref.data.datatype.examples">
<title>Examples</title>


<para></para>

<example xml:id="ref.data.datatypes.examples.enumeration">
<title>Enumeration</title>
<programlisting language="orc-demo"><![CDATA[
{- An enumeration, such as Java's enum, can be represented by a datatype
   whose constructors have no arguments. Note that an empty argument list,
   (), is still needed.
-}
type objective = Primary() | Secondary() | Tertiary()

[Secondary(), Tertiary()]

{-
OUTPUT:
[Secondary(), Tertiary()]
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.shapes">
<title>Geometric shape datatype</title>
<programlisting language="orc-demo"><![CDATA[
{- A Shape type with three data constructors -}
type Shape = Rectangle(_, _) | Circle (_) | Triangle(_, _, _)

{- Create a rectangle -}
Rectangle(2, 3)

{-
OUTPUT:
Rectangle(2, 3)
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.binarytree">
<title>Binary tree node</title>
<programlisting language="orc"><![CDATA[
{- This is a binary tree datatype
   Leaf nodes carry integer values
-}

type Node = LeafNode(Integer) | InnerNode(Node, Node)

{- Constructing a simple tree
    /\
   1 /\
    2  3
-}
InnerNode(LeafNode(1),InnerNode(LeafNode(2),LeafNode(3)))

{-
OUTPUT:
InnerNode(LeafNode(1), InnerNode(LeafNode(2), LeafNode(3)))
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.binarytreepoly">
<title>Polymorphic binary tree node</title>
<programlisting language="orc"><![CDATA[
{- This is a binary tree datatype
   Leaf nodes carry values of type T
-}

type Node[T] = LeafNode(T) | InnerNode(Node, Node)

{- Constructing a simple tree
      /\
   "A" /\
    "B"  "C"
-}
InnerNode[String](LeafNode("A"),InnerNode(LeafNode("B"),LeafNode("C")))

{-
NONRUNNABLE
-}
]]></programlisting>
</example>

<example xml:id="ref.data.datatypes.examples.option">
<title>Orc built-in Option type</title>
<programlisting language="orc"><![CDATA[
{- A datatype for optional values of type T -}

type Option[T] = Some(T) | None

{-
NONRUNNABLE
-}
]]></programlisting>
</example>

</section>

<section xml:id="ref.data.datatype.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><link linkend="ref.types">Orc types</link></para></listitem>
          			<listitem><para><link linkend="ref.declarations.type"><code>type</code> &#x2014; Declare Type</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="section.orc.datatypes">Datatypes</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="orc.language.patterns">Patterns</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="patterns.extensions">Extensions to Pattern Matching</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>

</section>
</section>
</section>
