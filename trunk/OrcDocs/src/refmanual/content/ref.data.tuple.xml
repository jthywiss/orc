<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.tuple.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.tuple">
<title>Tuples</title>

<para><emphasis role="strong">Type</emphasis>: <code>(T1, T2...)</code></para>

<para>
Orc's <code>Tuple</code> data type is a sequence of at least two values.
(Orc does not provide for the construction of "0-tuples" or "1-tuples".)
</para>

<para>Tuples are intended to be used for sequences with a fixed length and varying element types,
whereas lists are intended to be used for sequences with varying length and a fixed element type.</para> 

<para>
One can explicitly project a tuple element by its index, but it is
idiomatic, safer, and far more common to use pattern matching to extract
tuple elements.
</para>

<section xml:id="ref.data.tuple.constructors">
<title>Constructors</title>

<para><emphasis role="strong">EBNF</emphasis>: <replaceable>Tuple</replaceable> ::= <code>(E, ..., E)</code></para>

<para>
	A tuple is written as two or more expressions, separated by commas
	and enclosed within parentheses.
The tuple expression <code>(e_0, ..., e_n)</code> publishes the tuple <code>(v_0, ..., v_n)</code>
only if each <code>ei</code> <link linkend="ref.concepts.deflate">deflates</link> to value <code>vi</code>. 
Otherwise, it <link linkend="ref.concepts.halt">halts</link> <link linkend="ref.concepts.silent">silently</link>.
</para>
</section>

<section xml:id="ref.data.tuple.operations">
<title>Operations</title>

<para>Notable tuple operations include:
<itemizedlist>
<listitem><para>Projection: <replaceable>tuple</replaceable><code>(</code> <replaceable>index</replaceable> <code>)</code></para></listitem>
<listitem><para>Project first element of pair: <code>fst</code></para></listitem>
<listitem><para>Project second element of pair: <code>snd</code></para></listitem>
</itemizedlist>
</para>

</section>

<section xml:id="ref.data.tuple.javacalls">
<title>Java calls</title>

<para>Orc <code>Tuple</code>s don't correspond to any Java value, so if a <code>Tuple</code>
is passed to Java code, it will be as a <code language="java">java.lang.Object</code> of a type not specified here.</para>

</section>

<section xml:id="ref.data.tuple.examples">
<title>Examples</title>


<example xml:id="ref.data.tuple.examples.tupselect">
<title>Tuple Selection</title>
<programlisting language="orc-demo"><![CDATA[
{- Unzip a list of tuples into a tuple of lists -}

val squares = [(1,1), (2,4), (3,9), (4,16)]
( map(fst,squares) , map(snd,squares) ) 

{-
OUTPUT:
([1, 2, 3, 4], [1, 4, 9, 16])
-}
]]></programlisting>
</example>

<example xml:id="ref.data.tuple.examples.forkjoin"><title>Fork-Join</title>
<programlisting language="orc-demo"><![CDATA[
{- Print "fork", but wait at least 500ms before printing "join" -}

( println("fork"), Rtimer(500) ) >> println("join")

{-
OUTPUT:
"fork"
"join"
-}
]]></programlisting>
</example>

</section>

<section xml:id="ref.data.tuple.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
					<!-- TODO <listitem><para><link linkend="types.Tuple"><code>Tuple</code> type</link></para></listitem> -->
					<listitem><para><link linkend="ref.stdlib.state.fst"><code>fst</code> function</link></para></listitem>
					<listitem><para><link linkend="ref.stdlib.state.snd"><code>snd</code> function</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="cor.data.tuple">Tuple</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="section.idioms.forkjoin">Fork-Join</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
</section>

</section>
