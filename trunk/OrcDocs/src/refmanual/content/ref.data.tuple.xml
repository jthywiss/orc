<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.tuple.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.tuple">
<title>Tuple Values</title>

<para><emphasis role="strong">Type</emphasis>: <code>(T1, T2...)</code></para>

<para>
Orc's <code>Tuple</code> data type is a sequence of values, whose number of values is at least two.
(Orc does not provide for the construction of "0-tuples" or "1-tuples".)
Tuples vary from lists in two significant ways:
<itemizedlist>
<listitem><para>Tuples are intended to be used where they have a fixed length.
Lists may have varying lengths.</para></listitem>
<listitem><para>Tuples may have elements of varying types in each position.
Lists must be of a uniform type (though this may be <code>Top</code>).</para></listitem>
</itemizedlist>
</para>

<para>
Although one can explicitly project a tuple element by its index, it is
idiomatic, safer, and far more common to use pattern matching to extract
tuple elements.
</para>

<section xml:id="ref.data.tuple.constructors">
<title>Constructors</title>

<para><emphasis role="strong">EBNF</emphasis>: <replaceable>Tuple</replaceable> ::= <code>(E, ..., E)</code></para>

<para>
	A tuple is written as two or more expressions, separated by commas
	and enclosed within parentheses.  Evaluation of the tuple expression <code>(e_1, ..., e_n)</code>
	<link linkend="ref.concepts.reap">reaps</link> 
	each <code>ei</code> to a value <code>vi</code> and publishes the tuple value <code>(v_1, ..., v_n)</code>.
</para>
</section>

<section xml:id="ref.data.tuple.operations">
<title>Operations</title>

<para>Notable tuple operations include:
<itemizedlist>
<listitem><para>Projection: <replaceable>tuple</replaceable><code>(</code> <replaceable>index</replaceable> <code>)</code></para></listitem>
<listitem><para>Project first element of pair: <code>fst</code></para></listitem>
<listitem><para>Project second element of pair: <code>snd</code></para></listitem>
</itemizedlist>
</para>

</section>

<section xml:id="ref.data.tuple.javacalls">
<title>Java calls</title>

<para>Orc <code>Tuple</code>s don't correspond to any Java value, so if a <code>Tuple</code>
is passed to Java code, it will be as a <code language="java">java.lang.Object</code> of a type not specified here.</para>

</section>

<section xml:id="ref.data.tuple.examples">
<title>Examples</title>


<example xml:id="ref.data.tuple.examples.one">
<title>Tuple Selection</title>
<programlisting language="orc-demo"><![CDATA[
{-
Creates a new tuple where both values
are the same as the first in "a", then
publishes the second value of the new
tuple, which is 1
-}
val a = (1,2)
fst(a) >x> (x,x) >b> snd(b)
]]></programlisting>
</example>

<example xml:id="ref.data.tuple.examples.forkjoin"><title>Fork-Join</title>
<programlisting language="orc-demo"><![CDATA[
def f() = println("f starting") >> Rtimer(450) >> println("f is done") >> "f"
def g() = println("g starting") >> Rtimer(900) >> println("g is done") >> "g"

Rtimer(100) >> (f(), g())
]]></programlisting>
</example>

</section>

<section xml:id="ref.data.tuple.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="center">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
					<!-- TODO <listitem><para><link linkend="types.Tuple"><code>Tuple</code> type</link></para></listitem> -->
					<listitem><para><link linkend="ref.stdlib.state.fst"><code>fst</code> function</link></para></listitem>
					<listitem><para><link linkend="ref.stdlib.state.snd"><code>snd</code> function</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="cor.data.tuple">Tuple</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="section.idioms.forkjoin">Fork-Join</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
</section>

</section>
