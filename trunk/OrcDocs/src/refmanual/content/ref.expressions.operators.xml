<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.expressions.operators.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Operators -->
<section xml:id="ref.expressions.operators">
	<title>Operators</title>

		<section xml:id="ref.expressions.operators.syntax">
		  <title>Syntax</title>
		  <para>
		    <productionset>
		    	<productionrecap linkend="ebnf.expression.prefixoperation"/>
		    	<productionrecap linkend="ebnf.expression.infixoperation"/>
		    </productionset>
		  </para>
	  </section>

<para>
Orc has a standard set of operators, which are written in their conventional infix, prefix, or postfix style.
Operators in Orc are syntatic sugar for site calls.
For example, <code>1 + 2</code> is equivalent to <code>(+)(1, 2)</code> and <code>1 + 2 * 3</code> is equivalent to <code>(+)(1, (*)(2, 3))</code>.
Recall that site calls only publish once, and arguments are <link linkend="ref.concepts.deflate">deflated</link>.
</para>

<para>
The operators' syntax (fixity and precedence) is fixed by the Orc grammar; however, the site
called is defined by the library and can be changed by a <code>def</code>
or <code>site</code> declaration.
Orc permits a special identifier form for operators: the operator name
surrounded by parenthesis, as in <code>(+)</code>.
To disambiguate the unary prefix operator <code>-</code> from the
binary infix operator <code>-</code>, Orc translates the
unary prefix operator as <code>(0-)</code>.
</para>

<para>
Operators are parsed using the following precedence levels.
Operators at a higher precedence, at the top of the table, execute before lower operators when the expression is executed.
For example, <code>1 + 2 * 3</code> is equivalent to <code>1 + (2 * 3)</code>.
</para>

<para>
TODO: Make prettier
</para>

<table frame="none" rowsep="1" colsep="0">
	<title>Orc operators, in precedence order</title>
	<tgroup cols="2">
		<colspec align="center"/>
		<colspec align="center"/>
		<colspec align="left"/>
		<thead>
			<row>
				<entry>Operator</entry>
				<entry>Fixity</entry>
				<entry>Precedence</entry>
			</row>
		</thead>
		<tbody>
			<row>
				<entry><code>?</code></entry>
				<entry>postfix</entry>
				<entry>Executes first</entry>
			</row>
			<row>
				<entry><code>-</code> and <code>~</code></entry>
				<entry>prefix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>**</code></entry>
				<entry>infix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>*</code> and <code>/</code> and <code>%</code></entry>
				<entry>infix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>+</code> and <code>-</code></entry>
				<entry>infix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>:</code></entry>
				<entry>infix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>=</code> and <code>/=</code> and <code>&lt;:</code> and <code>:&gt;</code> and <code>&lt;=</code> and <code>&gt;=</code></entry>
				<entry>infix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>||</code> and <code>&amp;&amp;</code></entry>
				<entry>infix</entry>
				<entry/>
			</row>
			<row>
				<entry><code>:=</code></entry>
				<entry>infix</entry>
				<entry>Executes last</entry>
			</row>
		</tbody>
	</tgroup>
</table>


<section>
<title>Standard Orc Operators</title>

<para>
TODO: Make prettier
</para>

<section>
<title>Arithmetic Operators</title>

<variablelist><info><title>Arithmetic Operators</title></info>
  <varlistentry>
    <term><code>+</code></term>
    <listitem>
      <para>Addition</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>-</code></term>
    <listitem>
      <para>Subtraction</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>*</code></term>
    <listitem>
      <para>Multiplication</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>/</code></term>
    <listitem>
      <para>Division</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>%</code></term>
    <listitem>
      <para>Modulus</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>**</code></term>
    <listitem>
      <para>Exponentiation</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>-</code> (unary prefix form)</term>
    <listitem>
      <para>Arithmetic negation</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
Numbers with no decimal part, such as <code>3</code>, are treated as integers. Arithmetic operators with two integer arguments will perform
an integer operation and return an integer result; for example, <code>5 / 2</code> performs integer division and returns <code>2</code>.
However, if either argument to an operator has a decimal part (even if it is trivial, as in <code>3.0</code>), the other argument will
be promoted, and a decimal operation will be performed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both perform decimal
division and return <code>2.5</code>.
</para>

</section>

<section>
<title>Comparison Operators</title>

<variablelist><info><title>Comparison Operators</title></info>
  <varlistentry>
    <term><code>=</code></term>
    <listitem>
      <para>Equal to</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>/=</code></term>
    <listitem>
      <para>Not equal to</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>&lt;:</code></term>
    <listitem>
      <para>Less than</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>:&gt;</code></term>
    <listitem>
      <para>Greater than</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>&lt;=</code></term>
    <listitem>
      <para>Less than or equal to</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>=&gt;</code></term>
    <listitem>
      <para>Greater than or equal to</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The <code>=</code> operator can compare values of any type. Values of different type are always unequal; for example,
<code>10 = true</code> publishes <code>false</code>.
</para>

</section>

<section>
<title>Logical Operators</title>

<variablelist><info><title>Logical Operators</title></info>
  <varlistentry>
    <term><code>&#38;&#38;</code></term>
    <listitem>
      <para>Logical and</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>||</code></term>
    <listitem>
      <para>Logical or</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>~</code></term>
    <listitem>
      <para>Logical negation</para>
    </listitem>
  </varlistentry>
</variablelist>

</section>

<section>
<title>String Operators</title>

<variablelist><info><title>String Operators</title></info>
  <varlistentry>
    <term><code>+</code></term>
    <listitem>
      <para>Concatenation</para>
    </listitem>
  </varlistentry>
</variablelist>

</section>

<section>
<title>List Operators</title>

<variablelist><info><title>List Operators</title></info>
  <varlistentry>
    <term><code>:</code></term>
    <listitem>
      <para>List construction</para>
    </listitem>
  </varlistentry>
</variablelist>

</section>

<section>
<title>Record Operators</title>

<variablelist><info><title>Record Operators</title></info>
  <varlistentry>
    <term><code>+</code></term>
    <listitem>
      <para>Extension</para>
    </listitem>
  </varlistentry>
</variablelist>

</section>

<section>
<title>Reference Operators</title>

<variablelist><info><title>Reference Operators</title></info>
  <varlistentry>
    <term><code>?</code></term>
    <listitem>
      <para>Dereference</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><code>:=</code></term>
    <listitem>
      <para>Assignment</para>
    </listitem>
  </varlistentry>
</variablelist>

</section>

</section>


<section xml:id="ref.expressions.operators.examples">
<title>Examples</title>

<example xml:id="ref.expressions.operators.examples.precedence">
<title>Operator precedence</title>
<programlisting language="orc-demo"><![CDATA[
  1 + 2 * 3
  
{-
OUTPUT:
7
-} 
]]></programlisting>
</example>

<example xml:id="ref.expressions.operators.examples.pubonce">
<title>Operators publish once</title>
<programlisting language="orc-demo"><![CDATA[
  1 + (2 | 3)

{-
OUTPUT:
3

OUTPUT:
4
-}
]]></programlisting>
</example>

<!-- 
<example xml:id="ref.expressions.operators.examples.equiv">
<title>Operator-site call equivalence</title>
<programlisting language="orc-demo"><![CDATA[
  1 + 2 * 3
| {-Same as-} 
  (+)(1, (*)(2, 3))
]]></programlisting>
</example>
-->

<example xml:id="ref.expressions.operators.examples.redefine">
<title>Redefine an operator</title>
<programlisting><![CDATA[
{- Redefine the "?" operator -}

def (?)(x) = "To "+x+", or not to "+x+", that is the question."
"be"?

{-
OUTPUT:
"To be, or not to be, that is the question."
-}
]]></programlisting>
</example>
		  
</section>

<section xml:id="ref.expressions.operators.links">
	<title>Related Links</title>

	<informaltable frame="none">
		<tgroup cols="1" align="left">
			<thead>
				<row>
					<entry align="left">Related Reference Topics</entry>
				</row>
			</thead>
			<tbody valign="top">
				<row><entry><itemizedlist>
					<listitem><para><link linkend="ref.combinators">Combinators</link></para></listitem>
					<listitem><para><link linkend="ref.syntax.lexical">Lexical Specifications</link></para></listitem>
				</itemizedlist></entry></row>
			</tbody>
		</tgroup>
	</informaltable>

	<informaltable frame="none">
		<tgroup cols="1" align="left">
			<thead>
				<row>
					<entry align="left">Related Tutorial Sections</entry>
				</row>
			</thead>
			<tbody valign="top">
				<row><entry><itemizedlist>
					<listitem><para><olink targetdoc="userguide" targetptr="language.base.operators">Operators</olink></para></listitem>
				</itemizedlist></entry></row>
			</tbody>
		</tgroup>
	</informaltable>

</section>

</section>
