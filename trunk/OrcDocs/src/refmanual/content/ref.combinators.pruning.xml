<?xml version="1.0" encoding="UTF-8"?>
<!-- combinators_pruning.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Pruning Combinator -->
   <section xml:id="ref.combinators.pruning">
      <title>Pruning Combinator</title>
	  <section xml:id="ref.combinators.pruning.syntax">
		  <title>Syntax</title>
		  <para><emphasis role="strong">EBNF</emphasis>: <emphasis>E ::= <code><![CDATA[E <P< E]]></code></emphasis></para>
		  <para><emphasis role="strong">Precedence</emphasis>: 
			  <olink targetdoc="root" targetptr="combinators.sequential">sequential</olink> >
			  <olink targetdoc="root" targetptr="combinators.parallel">parallel</olink> > 
			  <olink targetdoc="root" targetptr="combinators.pruning">pruning</olink> >
			  <olink targetdoc="root" targetptr="combinators.otherwise">otherwise</olink></para>
		  <para><emphasis role="strong">Associativity</emphasis>: left </para>
		  <para><emphasis role="strong">Commutative</emphasis>: no </para>
	  </section>
	  <section xml:id="ref.combinators.pruning.behavior">
		  <title>Behavior</title>
		  <itemizedlist>
			  <listitem><code><![CDATA[F <x< G]]></code>
				  <para>
				  	The execution of <code><![CDATA[F <x< G]]></code> starts by executing F and G in parallel. Whenever
					F publishes a value, that value is published by the entire execution. When G publishes its first value, that
					value is bound to x in F, and then the execution of G is immediately terminated. A terminated expression
					cannot call any sites or publish any values. During the execution of F, any part of the execution that depends on x will be suspended until x is bound (to
					the first value published by G). If G never publishes a value, that part of the execution is suspended forever.
				  </para>
			  </listitem>
			  <listitem><code><![CDATA[F <P< G]]></code>
				  <para>
				  	The pruning combinator may include a full pattern P instead of just a variable name. Any value published
					by G is matched against the pattern P. If this match is successful, then G terminates and all of the bindings
					of pattern P are made in F. Otherwise, the published value is simply ignored and G continues to execute.
				  </para>
			  </listitem>
			  <listitem><code><![CDATA[F << G]]></code>
				  <para>
				  	This is equivalent to using a wildcard pattern, <code><![CDATA[F <_< G]]></code>. Any value published
					by G will match the pattern. After the successful match, G terminates, but no bindings are made in F. G continues to execute 
					until it publishes a value.
				  </para>
				  <para>
				  	<code><![CDATA[F << G]]></code> is a shorthand for <code><![CDATA[F <_< G]]></code>. 
				  	Thus, execution of <code><![CDATA[F << G]]></code> starts by
				  	executing F and G in parallel. Whenever F publishes a value, that
				  	value is published by the entire execution. When G publishes its first
				  	value, that value, by convention, matches the wildcard pattern. No
				  	variable is bound to this value, and then the execution of G is
				 	immediately terminated.
				  </para>
			  </listitem>
		  </itemizedlist>
	  </section>
	  <section xml:id="ref.combinators.pruning.examples">
		  <title>Examples</title>

		  <example xml:id="ref.combinators.pruning.examples.one"><title>Exclusive Publication</title>
<programlisting language="orc-demo"><![CDATA[
-- Simulate a coin toss by publishing either "heads" or "tails" arbitrarily
x <x< ("heads" | "tails")
]]></programlisting>
		  </example>

		  <example xml:id="ref.combinators.pruning.examples.two"><title>Print First Result</title>
<programlisting><![CDATA[
-- Query Google and Yahoo for a search result
-- Print out the result that arrives first; ignore the other result
println(result) <result< ( Google("cupcake") | Yahoo("cupcake") )
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.pruning.examples.three"><title>Console Output</title>
<programlisting><![CDATA[
{-
This example actually prints both "true" and "false" to the
console, regardless of which call responds first.

Each call to the println() site will print its argument
to the console then publish a signal.  The first signal
to be published will be bound to x in the evaluation of
stop.  Both println() calls will continue to execute
until they publish a value.
-}
stop <x< println("true") | println("false")
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.pruning.examples.four"><title>Pattern Publication</title>
<programlisting><![CDATA[
-- Publish either 9 or 25, but not 16.
x*x <(x,true)< ( (3,true) | (4,false) | (5,true) )
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.pruning.examples.five"><title>Timed Termination</title>
<programlisting><![CDATA[
{-
Print all publications of f for 100 msec (after the evaluation of f starts). 
Then terminate f.
-}

stop << (f >x> println(x) >> stop | Rtimer(100) )
]]></programlisting>		  
		  </example>
		  		  
	  </section>
	  <section xml:id="ref.combinators.pruning.links">
		  <title>Related Links</title>
		  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="center">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="ref.combinators" targetptr="ref.combinators">Combinators</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.patterns" targetptr="ref.patterns">Patterns</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="root" targetptr="combinators.pruning">Pruning Combinator</olink></para></listitem>
          			<listitem><para><olink targetdoc="root" targetptr="patterns.extensions">Pattern Matching Extensions</olink></para></listitem>
          			<listitem><para><olink targetdoc="root" targetptr="orc.sites">Sites</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>

	  </section>
   </section>
