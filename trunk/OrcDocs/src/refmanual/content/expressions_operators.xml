<!-- Operators -->
	<section id="ref.expressions.operators">
		<title>Operators</title>
		<section id="ref.expressions.operators.body">
			<para>
				Cor has a standard set of arithmetic, logical, and comparison operators.
				As in most other programming languages, they are written in the usual 
				infix style. They have Java-like operator precedence, which can be
				overridden by adding parentheses.  
			</para>
			<para>
Here is the full set of operators that Cor supports:

<table id="ref.ops.table" frame="none" rowsep="0" colsep="0"> 
<?dbhtml table-width="80%" ?>
<?dbfo table-width="95%" ?>
<?dbfo keep-together="always" ?>
<title>Operators of Cor</title>
<tgroup cols="8" >
<colspec colnum="1" colname="arith-names" colwidth="1*" align="left"/>
<colspec colnum="2" colname="arith-ops" colwidth="4*" align="left"/>
<colspec colnum="3" colname="comp-names" colwidth="1*" align="left"/>
<colspec colnum="4" colname="comp-ops" colwidth="6*" align="left"/>
<colspec colnum="5" colname="logic-names" colwidth="1*" align="left"/>
<colspec colnum="6" colname="logic-ops" colwidth="3*" align="left"/>
<colspec colnum="7" colname="string-names" colwidth="1*" align="left"/>
<colspec colnum="8" colname="string-ops" colwidth="4*" align="left"/>

<thead>
<row>
<entry namest="arith-names" nameend="arith-ops" align="left">Arithmetic</entry>
<entry namest="comp-names" nameend="comp-ops" align="left">Comparison</entry>
<entry namest="logic-names" nameend="logic-ops" align="left">Logical</entry>
<entry namest="string-names" nameend="string-ops" align="left">String</entry>
</row>
</thead>
<tbody>

<row>
<entry><code><![CDATA[+]]></code></entry>
<entry>addition</entry>

<entry><code><![CDATA[=]]></code></entry>
<entry>equality</entry>

<entry><code><![CDATA[&&]]></code></entry>
<entry>logical and</entry>

<entry><code><![CDATA[+]]></code></entry>
<entry>concatenation</entry>

</row>

<row>
<entry><code><![CDATA[-]]></code></entry>
<entry>subtraction</entry>

<entry><code><![CDATA[/=]]></code></entry>
<entry>inequality</entry>

<entry><code><![CDATA[||]]></code></entry>
<entry>logical or</entry>

<entry namest="string-names" nameend="string-ops"/>

</row>


<row>
<entry><code><![CDATA[*]]></code></entry>
<entry>multiplication</entry>

<entry><code><![CDATA[<]]></code></entry>
<entry>less than</entry>

<entry><code><![CDATA[~]]></code></entry>
<entry>logical not</entry>

<entry namest="string-names" nameend="string-ops"/>

</row>

<row>
<entry><code><![CDATA[/]]></code></entry>
<entry>division</entry>

<entry><code><![CDATA[>]]></code></entry>
<entry>greater than</entry>

<entry namest="logic-names" nameend="logic-ops"/>
<entry namest="string-names" nameend="string-ops"/>
</row>

<row>
<entry><code><![CDATA[%]]></code></entry>
<entry>modulus</entry>

<entry><code><![CDATA[<=]]></code></entry>
<entry>less than or equal</entry>

<entry namest="logic-names" nameend="logic-ops"/>
<entry namest="string-names" nameend="string-ops"/>
</row>

<row>
<entry><code><![CDATA[**]]></code></entry>
<entry>exponent</entry>

<entry><code><![CDATA[>=]]></code></entry>
<entry>greater than or equal</entry>

<entry namest="logic-names" nameend="logic-ops"/>
<entry namest="string-names" nameend="string-ops"/>
</row>

</tbody>
</tgroup>
</table>

</para>

<para>
There is also a unary negation operator, written <code>-</code>, for example <code>-(2 ** 5)</code>.
</para>

<para>
The <code>=</code> operator can compare values of any type. Values of different type are always unequal; for example,
<code>10 = true</code> evaluates to <code>false</code>.
</para>

<para>
Numbers with no decimal part, such as <code>3</code>, are treated as integers. Arithmetic operators with two integer arguments will perform
an integer operation and return an integer result; for example, <code>5 / 2</code> performs integer division and evaluates to <code>2</code>.
However, if either argument to an operator has a decimal part (even if it is trivial, as in <code>3.0</code>), the other argument will
be promoted, and a decimal operation will be performed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both perform decimal
division and evaluate to <code>2.5</code>.
</para>

		</section>
		<section id="ref.expressions.operators.links">
		  <title>Related Links</title>
		  <informaltable frame='all'>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<colspec colname='c1'/>
			<colspec colname='c2'/>
			<thead>
			<row>
			  <entry align="center">Related Reference Topics</entry>
			  <entry align="center">Related Tutorial Sections</entry>
			</row>
			</thead>
			<tbody>
			<row>
			  <entry>Combinators</entry>
			  <entry><olink targetdoc="root" targetptr="special.dot">Operators</olink></entry>
			</row>
			<row>
			  <entry>Parallel Server Network</entry>
			  <entry><olink targetdoc="root" targetptr="terms.constant">Constants</olink></entry>
			</row>
			<row>
			  <entry>Site</entry>
			  <entry><olink targetdoc="root" targetptr="cor.closures">Closures</olink></entry>
			</row>
			<row>
			  <entry>JavaCall</entry>
			  <!-- Use the following entry to fill up any remaining empty slots in that column -->
			  <entry morerows='1' valign='middle'><para></para></entry>
			</row>
			<row>
			  <entry>Baz</entry>
			</row>
			</tbody>
			</tgroup>
		  </informaltable>
	  </section>
	</section>