<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.concepts.states.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Expression States -->
<section xml:id="ref.concepts.states">
	<title>Expression States</title>

		<para>
			During execution of an expression, it is either <firstterm>active</firstterm>, <firstterm>passive</firstterm> or
			<firstterm>killed</firstterm>. An active expression will eventually make a <link linkend="ref.expressions.call">site call</link> or
			publish a value without receiving a response from a site. A passive
			expression waits for response from sites or functions it has called;
			it can not take any steps without receiving a response from a site. A
			killed expression has been terminated because of a <link linkend="ref.combinators.pruning">pruning combinator</link>;
			so, it can take no further steps. Expression <replaceable>G</replaceable> is killed 
			in <replaceable>F</replaceable><code><![CDATA[ <]]></code><replaceable>x</replaceable><code><![CDATA[< ]]></code><replaceable>G</replaceable> if
			<replaceable>G</replaceable> has published; a component of a killed expression is killed.
		</para>
			
		<para>
			There are three passive states: pending, blocked 
			and halted. A pending
			expression will definitely receive a response from some called site
			(or function), a blocked expression may receive a response, and a
			halted expression will never receive a response.
		</para>

		<para>
			The transitions among the states are as follows:
		</para>
		
		<orderedlist>
			<listitem><para>An active or passive expression may be killed. A killed expression stays killed.</para></listitem>
			<listitem><para>An active expression may transit to any passive state.</para></listitem>
			<listitem><para>A pending expression definitely transits to active eventually.</para></listitem>
			<listitem><para>A blocked expression may transit to another passive state, pending or halted.</para></listitem>
			<listitem><para>A halted expression stays halted unless is killed.</para></listitem>
		</orderedlist>

		<figure>
			<title>Expression States Diagram</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/stateTransition.svg" format="SVG" contentwidth="800px" contentdepth="480px" width="80%" align="center"/>
				</imageobject>
			</mediaobject>
		</figure>
		
	<section xml:id="ref.concepts.states.block">
	<title>Blocked</title>
		<para>
			Execution of an expression is <firstterm>blocked</firstterm> if it can not take an autonomous
			step, it is not halted, and none of the outstanding site calls can
			respond immediately. That is, there is some outstanding site call that may
			respond in the future. For example, an expression that calls <code>c.get()</code>,
			where channel <code>c</code> is empty, is blocked; the call may receive
			a response or may remain blocked forever, depending on whether a value
			is put in <code>c</code> in the future.
		</para>
		
		<section xml:id="ref.concepts.states.block.examples">
			<title>Examples</title>

		<example xml:id="ref.concepts.states.block.examples.one">
<title>Blocked on Call</title>
<programlisting language="orc-demo"><![CDATA[
{- A "get" call to an empty channel blocks until a
   value is placed on the channel.
   
   This program runs forever as a blocked execution.
-}

val c = Buffer()
   
c.get()
   
{-
OUTPUT:
no output
-}
]]></programlisting>
</example>
		</section>
	</section>
	
	<section xml:id="ref.concepts.states.halt">
	<title>Halted</title>
		<para>
			Execution of an expression is <firstterm>halted</firstterm> if it can not take an autonomous
			step, nor will it ever receive a response to any outstanding site
			call. Therefore, a halted expression will have no further execution.
		</para>
		
		<section xml:id="ref.concepts.states.halt.examples">
			<title>Examples</title>

		<example xml:id="ref.concepts.states.halt.examples.one">
<title>Halted on Close</title>
<programlisting language="orc-demo"><![CDATA[
{- Create a channel c.  After 500ms, "close" the channel
   and halt any blocked "get" calls to the empty channel.
-}

val c = Buffer()

c.get() | Rwait(500) >> c.close()

{-
OUTPUT:
signal
-}
]]></programlisting>
</example>
		<para>See the <link linkend="ref.stdlib.state.Buffer"><code>Buffer</code> site</link>.</para>
		</section>
	</section>
		
	<section xml:id="ref.concepts.states.kill">
	<title>Killed</title>
		<para>
			Execution of an expression is <firstterm>killed</firstterm> when it is forced to take no more
		    autonomous steps.  Only a <link linkend="ref.combinators.pruning">pruning combinator</link>
			may kill an expression.  For example,
			expression <replaceable>G</replaceable> is killed in 
			<replaceable>F</replaceable><code><![CDATA[ <]]></code><replaceable>x</replaceable><code><![CDATA[< ]]></code><replaceable>G</replaceable> 
			if <replaceable>G</replaceable> has published.
			A component of a killed expression is killed.
		</para>
		
		<section xml:id="ref.concepts.states.kill.examples">
			<title>Examples</title>

		<example xml:id="ref.concepts.states.kill.examples.one">
<title>Killed Queries</title>
<programlisting language="orc-demo"><![CDATA[
{- Query multiple search engines.
   Publish the query result that arrives first and 
   kill executions of the other queries.
-}

println(result) <result< ( Google("survivor") | Yahoo("survivor") | Bing("survivor") )

{-
NONRUNNABLE
-}
]]></programlisting>
</example>
		</section>
	</section>

	<section xml:id="ref.concepts.states.links">
		<title>Related Links</title>

		<informaltable frame="none">
			<tgroup cols="1" align="left">
				<thead>
					<row>
						<entry align="left">Related Reference Topics</entry>
					</row>
				</thead>
				<tbody valign="top">
					<row>
						<entry>
							<itemizedlist>
								<listitem><para><link linkend="ref.stdlib.state.Buffer"><code>Buffer</code> site</link></para></listitem>
								<listitem><para><link linkend="ref.concepts.silent">Silent</link></para></listitem>
								<listitem><para><link linkend="ref.sites">Sites</link></para></listitem>
								<listitem><para><link linkend="ref.expressions.call">Site and Function Calls</link></para></listitem>
							</itemizedlist>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>

<!-- 
		<informaltable frame="none">
			<tgroup cols="1" align="left">
				<thead>
					<row>
						<entry align="left">Related Tutorial Sections</entry>
					</row>
				</thead>
				<tbody valign="top">
					<row>
						<entry>
							<itemizedlist>
							</itemizedlist>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
-->

	</section>
</section>
