<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.concepts.states.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Expression States -->
<section xml:id="ref.concepts.states">
	<title>Expression States</title>

	<!-- Index pointers for unwritten terms -->
	<indexterm><primary>halt</primary></indexterm>
	<indexterm><primary>kill</primary></indexterm>

	<para>
		A site call, from the site's perspective, has three possible outcomes:
		the site will definitely publish a value, the site knows that it will
		never publish a value, and the site does not know if it will ever
		publish a value. For example, a call to
		<code>Ift(true)</code>
		publishes a signal,
		<code>Ift(false)</code>
		never publishes, and
		<code>c.get()</code>
		on buffer
		<code>c</code>
		that is currently
		empty may eventually publish or remain non-responsive, depending on
		whether a value is put in
		<code>c</code>
		in the future.
	</para>

	<para>
		A site call, from the caller's perspective, is ready, blocked or
		halted. A call is ready if all its argument variables are bound to
		values, so that a call can be made. A call is blocked if either (1)
		the caller can not make the call because not all argument values are
		bound (since site calls are strict); this is an internally blocked
		call, or (2) the caller is waiting for the response after having
		called the site; this is an externally blocked call. A site call is
		halted if the caller has already received a response or the site has
		indicated that it will never send a response. A site call is killed if
		it is part of <replaceable>G</replaceable> in
		<replaceable>F</replaceable><code> &lt;x&lt; </code><replaceable>G</replaceable>
		and <replaceable>G</replaceable> publishes.
	</para>

	<para>
		An internally blocked call becomes ready when all its arguments are
		bound to values. An internally blocked call halts if one of its
		arguments will never be bound because the expression that computes its
		value has been halted or killed. A ready call becomes blocked once
		the call is made. A blocked call transitions to halted if it receives a
		response or if the called site can determine that it will never
		respond; a blocked call may remain blocked forever if the called site
		can not determine if if it will ever respond. Note that a halted call
		stays halted unless it is killed.
	</para>

	<para>
		We extend these concepts to execution of an expression. At any moment,
		an expression has an associated set of site calls under consideration
		for execution; if the expression has spawned copies of its components
		as in
		<replaceable>F</replaceable><code> &gt;x&gt; </code><replaceable>G</replaceable>,
		all the copies contribute to this set; if the
		expression includes function calls, those calls initiate execution of
		the function bodies which are also expressions that contribute to this
		set. If some site call in this set is ready, the expression is ready;
		if all calls are blocked, the expression is blocked, and if all calls
		are halted the expression is halted.
	</para>

	<figure>
		<title>Expression States Diagram</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/stateTransition.svg" format="SVG"
					contentwidth="800px" contentdepth="480px" width="80%" align="center" />
			</imageobject>
		</mediaobject>
	</figure>

	<section>
		<title>Ready</title>
		<para>
			A site call is <indexterm significance="preferred"><primary>ready</primary></indexterm><firstterm>ready</firstterm> if all its argument
			variables are bound to values, so that a call can be made. An
			expression is ready if some site call in its set of associated
			site calls is ready.
		</para>
	</section>

	<section xml:id="ref.concepts.states.block">
		<title>Blocked</title>
		<para>
			A site call is <indexterm significance="preferred"><primary>block</primary></indexterm><firstterm baseform="block">blocked</firstterm> if (1) the call can not be made because some
			argument of the call is unbound, the call is then internally blocked,
			or (2) the caller is waiting for a response, the call is then
			externally blocked. An expression is blocked if its set of associated
			site calls are all blocked. All component expressions of a blocked
			expression are blocked. A blocked expression stays blocked unless (1)
			an internally blocked site call is made ready by the bindings of its
			arguments, or (2) it is halted, or (3) killed. A halted
			expression never makes site calls nor publishes any value.
		</para>
	</section>

	<section xml:id="ref.concepts.states.halt">
		<title>Halted</title>
		<para>
			A site call is <indexterm significance="preferred"><primary>halt</primary></indexterm><firstterm baseform="halt">halted</firstterm> if (1) it was internally blocked and one of its
			arguments will never be bound because the expression that computes its
			value has been halted or killed, or (2) it was externally blocked and
			either a response has been received or an indication that there never
			will be a response. An expression is halted if the set of associated
			site calls have all halted. All component expressions of a halted
			expression are halted. A halted expression stays halted unless it is
			killed. A halted expression never makes site calls nor publishes any
			value.
		</para>
	</section>

	<section xml:id="ref.concepts.states.kill">
		<title>Killed</title>
		<para>
			Expression <replaceable>G</replaceable> is <indexterm significance="preferred"><primary>killed</primary></indexterm><firstterm>killed</firstterm> in
			<replaceable>F</replaceable><code> &lt;x&lt; </code><replaceable>G</replaceable>
			if <replaceable>G</replaceable> has published. All component
			expressions of a killed expression are killed. A killed expression
			stays killed. A killed expression never makes site calls nor publishes
			any value.
		</para>
	</section>

	<section xml:id="ref.concepts.states.helpful">
		<title>Helpful Sites</title>
		<para>
			Sites that indicate absence of response are called <indexterm significance="preferred"><primary>helpful</primary></indexterm><firstterm>helpful</firstterm> (see
			<link linkend="ref.concepts.helpful">Helpful Sites</link>); not all sites are helpful.
		</para>
	</section>

	<section xml:id="ref.concepts.states.definite">
		<title>Definite/Indefinite Call</title>
		<para>
			For an externally blocked call if the called site knows the
			outcome&#x2014;either the response value or that there will be no
			response&#x2014;then the call is<indexterm significance="preferred"><primary>definite</primary></indexterm><firstterm>definite</firstterm>;
			if it does not know the outcome the call is <indexterm significance="preferred"><primary>indefinite</primary></indexterm><firstterm>indefinite</firstterm>.
		</para>
	</section>

	<section xml:id="ref.concepts.states.examples">
		<title>Examples</title>
	
		<example xml:id="ref.concepts.states.examples.parallel">
			<title>Parallel site calls; ready and blocked states</title>
			<para>
				Let <code>c</code> be a buffer. Consider expression <replaceable>G</replaceable> given by
			</para>

			<para>
				<replaceable>G</replaceable>:: <code>c.get() | Rwait(1000)</code>
			</para>
		
			<para>
				The expression is ready because it can make both calls. After both
				calls have been made, the expression is blocked waiting for their
				responses. Suppose <code>Rwait(1000)</code> responds first. Then
				the expression stays blocked waiting for the response to
				<code>c.get()</code>. If a response is received, the expression
				halts; if <code>c</code> is empty and another caller closes
				<code>c</code>, then <code>c.get()</code>	indicates that there will
				be no response, causing <replaceable>G</replaceable> to halt; otherwise,
				<replaceable>G</replaceable> stays blocked forever.
			</para>
		</example>

		<example xml:id="ref.concepts.states.examples.prune">
			<title>Pruning combinator; killed state</title>
			<para>
				Consider the expression
			</para>
		
			<para>
				<replaceable>F</replaceable><code> &lt;x&lt; </code><replaceable>G</replaceable>
			</para>
		
			<para>
				where <replaceable>G</replaceable> from the previous example is
			</para>
		
			<para>
				<replaceable>G</replaceable>:: <code>c.get() | Rwait(1000)</code>
			</para>
		
			<para>
				As we have shown, <replaceable>G</replaceable> will definitely publish. Then <replaceable>G</replaceable> is killed, and so
				are its sub-expressions.
			</para>
		</example>

		<example xml:id="ref.concepts.states.examples.otherwise">
			<title>Sequential and otherwise combinators</title>
			<para>
				In the previous example let <replaceable>F</replaceable> be
			</para>
		
			<para>
				<replaceable>F</replaceable>:: <code>x &gt;&gt; c.get() &gt;&gt; true ; false</code>
			</para>
		
			<para>
				In
				<replaceable>F</replaceable><code> &lt;x&lt; </code><replaceable>G</replaceable>,
				expression <replaceable>F</replaceable> is blocked until <code>x</code> is bound to a value. Since
				<replaceable>G</replaceable> eventually publishes, <code>x</code> will be bound eventually. Then the call
				<code>c.get()</code> is made in <replaceable>F</replaceable>. As we have discussed, this call (1) may receive
				a response, in which case true will be published, and the entire
				expression halts, (2) the call receives an indication that there will
				be no response (in case <code>c</code> is empty and it is closed) in which case
				<code>x &gt;&gt; c.get() &gt;&gt; true</code>
				halts silently, causing false to be published, or (3) the
				call remains blocked forever, causing <replaceable>F</replaceable> to remain blocked.
			</para>
		</example>
	</section>

	<section xml:id="ref.concepts.states.links">
		<title>Related Links</title>

		<informaltable frame="none">
			<tgroup cols="1" align="left">
				<thead>
					<row>
						<entry align="left">Related Reference Topics</entry>
					</row>
				</thead>
				<tbody valign="top">
					<row>
						<entry>
							<itemizedlist>
								<listitem><para><link linkend="ref.stdlib.state.Buffer"><code>Buffer</code> site</link></para></listitem>
								<listitem><para><link linkend="ref.concepts.silent">Silent</link></para></listitem>
								<listitem><para><link linkend="ref.sites">Sites</link></para></listitem>
								<listitem><para><link linkend="ref.expressions.call">Site and Function Calls</link></para></listitem>
							</itemizedlist>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>

		<informaltable frame="none">
			<tgroup cols="1" align="left">
				<thead>
					<row>
						<entry align="left">Related Tutorial Sections</entry>
					</row>
				</thead>
				<tbody valign="top">
					<row>
						<entry>
							<itemizedlist>
								<listitem><para><link linkend="TODO">TODO</link></para></listitem>
							</itemizedlist>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>

	</section>
</section>
