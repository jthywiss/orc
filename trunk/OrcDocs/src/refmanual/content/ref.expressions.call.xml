<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.expressions.call.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Site and Function Calls -->
	<section xml:id="ref.expressions.call">
		<title>Site and Function Calls</title>
			<para>
			A <firstterm>call</firstterm> is an invocation of a <firstterm>target</firstterm> expression on a sequence of <firstterm>argument</firstterm> expressions. 
			First, the target expression is <link linkend="ref.concepts.deflate"><ind>deflated</ind></link> to a value <replaceable>g</replaceable>.
			If <replaceable>g</replaceable> is a site, then the call is a site call. 
			If <replaceable>g</replaceable> is a closure, then the call is a function call.
			Each of these cases is described below.		
			</para>
		
		<section xml:id="ref.expressions.call.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.expression.call"/>
	    	<productionrecap linkend="ebnf.arguments"/>
	    	<productionrecap linkend="ebnf.typearguments"/>
	    </productionset>
	  </para>
	  </section>
	  
	  <section xml:id="ref.expressions.call.site">
	  <title>Site Calls</title>
	  <para>
	    Execution of a <ind>site call</ind> <replaceable>g</replaceable><code>(</code> <replaceable>E<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>E<subscript>n</subscript></replaceable> <code>)</code>
	    deflates each expression <replaceable>E<subscript>i</subscript></replaceable> to a value <replaceable>v<subscript>i</subscript></replaceable>.
	    The site <replaceable>g</replaceable> is then invoked with arguments <replaceable>v<subscript>i</subscript></replaceable>.
	  </para>
	  <para>
	    A site call publishes at most one value. Once it publishes a value, it immediately halts.
	    If the site is <link linkend="ref.concepts.halt.helpful">helpful</link>, the call may halt without publishing a value.
	  </para>
	  </section>
	  
	  <section xml:id="ref.expressions.call.function">
	  <title>Function Calls</title>
	  <para>
	    Unlike site calls, function calls are <firstterm>lenient</firstterm>. 
	    <link linkend="ref.declarations.def.execution">Execution of a function call</link> <replaceable>g</replaceable><code>(</code> <replaceable>E<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>E<subscript>n</subscript></replaceable> <code>)</code>
	    deflates each expression <replaceable>E<subscript>i</subscript></replaceable>, but does not wait for values to be published; instead, the body of the function executes immediately.
	    
	  </para>
	  <para>
	    Since a function call executes an arbitrary expression, it may <ind>publish</ind> any number of values.
	  </para>
	  </section>
		
		<section xml:id="ref.expressions.call.type">
	    <title>Type</title>
	    <para>
	      In addition to argument expressions, a call may also have type arguments <replaceable>A<subscript>j</subscript></replaceable>, since the target
	      may have a <link linkend="ref.types.polymorphism"><ind>polymorphic</ind></link> type.     
	    </para>
	    <para>
	      Suppose the <ind>target expression</ind> <replaceable>E</replaceable> has type <replaceable>S</replaceable>,
	      and each argument expression <replaceable>E<subscript>i</subscript></replaceable> has type <replaceable>S<subscript>i</subscript></replaceable>.
	    </para>
	    <para>
	    	If <replaceable>S</replaceable> is a function type <code><ind>lambda</ind></code> <code>[</code><replaceable>X<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>X<subscript>m</subscript></replaceable><code>]</code><code>(</code><replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable><code>)</code> <code>::</code> <replaceable>R</replaceable>,
	    	then there must be exactly as many arguments as <ind>argument types</ind>, 
	    	and each argument type <replaceable>S<subscript>i</subscript></replaceable> must be a <link linkend="ref.types.subtyping">subtype</link> of the corresponding type <replaceable>T<subscript>i</subscript></replaceable> (with all <replaceable>X<subscript>j</subscript></replaceable> replaced by <replaceable>A<subscript>j</subscript></replaceable>).
	    	Then the type of the whole call is <replaceable>R</replaceable>, the return type.	    	  
	    </para>
	    <para>
	      If <replaceable>S</replaceable> is the type of a site, <replaceable>S</replaceable> itself behaves like a site during typehcecking.
	      The <ind>typechecker</ind> passes the argument types <replaceable>S<subscript>i</subscript></replaceable> and type arguments <replaceable>A<subscript>j</subscript></replaceable> to <replaceable>S</replaceable>,
	      which then responds with the return type <replaceable>R</replaceable>, or indicates that the argument types are not appropriate.
	      If <replaceable>S</replaceable> does respond, then the type of the call expression is <replaceable>R</replaceable>.
	    </para>
	  </section>
		
		<section xml:id="ref.expressions.call.examples">
		  <title>Examples</title>

		  <example xml:id="ref.expressions.call.examples.sites_are_strict"><title>Sites are Strict</title>
<programlisting language="orc-demo"><![CDATA[
{- A site call is strict. -} 

Println(Rwait(500) >> "Waited 0.5 seconds" | Rwait(1000) >> "Waited 1 second") >> stop

{-
OUTPUT:
Waited 0.5 seconds
-}
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.expressions.call.examples.functions_are_lenient"><title>Functions are Lenient</title>
<programlisting language="orc-demo"><![CDATA[
{- 
  A function call is lenient.
  Parts of the function that do not need the arguments can execute immediately. 
  However, any part that uses the arguments must wait.
-}

def Printfn(s) =
    Println("Immediate") 
  | s >> Println("Waiting")
  
Printfn(Rwait(1000) >> signal) >> stop

{-
OUTPUT:
Immediate
Waiting
-}
]]></programlisting>
		  </example>
		  
		</section>
		  		
		<section xml:id="ref.expressions.call.links">
		  <title>Related Links</title>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Reference Topics</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
	          			<listitem><para><link linkend="ref.declarations">Site and Function Declarations</link></para></listitem>
	        		</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Tutorial Sections</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
          				<listitem><para><olink targetdoc="userguide" targetptr="chapter.services">Accessing External Services</olink></para></listitem>
        			</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>

	  </section>
	</section>
