<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.data.list.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ref.data.list">
<title>List Values</title>

<para><emphasis role="strong">Type</emphasis>: <code>List[T]</code></para>

<!--  Change [] to [ ] for HTML readability? -->
<para>
A list consists of a finite sequence of values. The
list may have no item; in that case it is an empty list. 
An empty list is written as [].
</para>

<para>
The type of a list is <code>List[U]</code>, where <code>U</code> is the join 
of the types of each of its elements. In particular, if all of the elements 
have type <code>T</code>, then the list will have type <code>List[T]</code>.
</para>

<section xml:id="ref.data.list.constructors">
<title>Constructors</title>

<para><emphasis role="strong">EBNF</emphasis>: <emphasis>List ::= <code><![CDATA[(E, ..., E)]]></code></emphasis></para>

<para>
Evaluation of the list expression <code>[e_1, ..., e_n]</code> <link linkend="ref.concepts.reap">reaps</link> 
each <code>ei</code> to a value <code>vi</code> and publishes the list value <code>[v_1, ..., v_n]</code>.
</para>
</section>

<section xml:id="ref.data.list.operations">
<title>Operations</title>

<para>Notable list operations include:
<itemizedlist>
<listitem><para><code>head</code>: applied to a non-empty list, it returns the first item of the list.</para></listitem>
<listitem><para><code>tail</code>: applied to a non-empty list, it returns the original list without its head.</para></listitem>
<listitem><para><code>cons</code>: cons: applied to an item h and a list t returns a list whose head is
										h and tail is t. cons is written as a colon (:) separating
										h and t.</para></listitem>
</itemizedlist>
</para>

</section>

<section xml:id="ref.data.list.types">
<title>Types</title>
<para>The values in a list may be of different types. The type of the list
items is the join of the types of its individual values.</para>
</section>

<section xml:id="ref.data.list.javacalls">
<title>Java calls</title>

<para>Orc <type>List</type>s don't correspond to any Java value, so if a <type>List</type>
is passed to Java code, it will be as a <type>java.lang.Object</type> of a type not specified here.</para>

</section>

<section xml:id="ref.data.list.examples">
<title>Examples</title>


<example xml:id="ref.data.list.examples.one">
<title>Sample Lists</title>
<programlisting language="orc"><![CDATA[
[] -- empty list
[1,2,3] -- a list of integers
[(1,2),(2,3),(3,4)] -- a list of tuples of integers
[fib(1),fib(2),fib(3)] -- the list of first 3 fibonacci numbers
[[1],[2,2],[3,3,3]] -- a list of lists of integers

-- The element type of a list is the join of the types of each of its elements.
-- The following list has type List[Top], because the individual elements
-- have different types, and Top is their only common supertype.
   [[2],3,(5,7),"misra"]

-- The order and number of elements in a list matter. So,
[2,3] {- is not the same as -}  [3,2]
[2] {- is not the same as -}    [2,2]
]]></programlisting>
</example>

<example xml:id="ref.data.list.examples.two">
<title>List Operations</title>
<programlisting language="orc"><![CDATA[
head([3]) = 3
tail([3]) = []
head([3,2,5]) = 3
tail([3,2,5]) = [2,5]
3:[] = [3]
3:[2,5] = [3,2,5]
[2,3]: [[1],[2,3,4]] = [[2,3],[1],[2,3,4]]
]]></programlisting>
</example>

</section>

<section xml:id="ref.data.list.links">
<title>Related Links</title>

	<informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="center">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
        			<listitem><para><link linkend="ref.stdlib.list.head"><code>head</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.init"><code>init</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.empty"><code>empty</code> function</link></para></listitem>
        			<listitem><para><link linkend="ref.stdlib.list.each"><code>each</code> function</link></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="cor.data">Data Structures</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
</section>

</section>
