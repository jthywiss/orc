<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.combinators.sequential.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2010 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Sequential Combinator -->
   <section xml:id="ref.combinators.sequential">
      <title>Sequential Combinator</title>
	  <section xml:id="ref.combinators.sequential.syntax">
		  <title>Syntax</title>
		  <para><emphasis role="strong">EBNF</emphasis>: <emphasis>E ::= <code><![CDATA[E >P> E]]></code></emphasis></para>
		  <para><emphasis role="strong">Precedence</emphasis>: 
			  <olink targetdoc="userguide" targetptr="combinators.sequential">sequential</olink> >
			  <olink targetdoc="userguide" targetptr="combinators.parallel">parallel</olink> > 
			  <olink targetdoc="userguide" targetptr="combinators.pruning">pruning</olink> >
			  <olink targetdoc="userguide" targetptr="combinators.otherwise">otherwise</olink></para>
		  <para><emphasis role="strong">Associativity</emphasis>: right </para>
		  <para><emphasis role="strong">Commutative</emphasis>: no </para>
	  </section>
	  <section xml:id="ref.combinators.sequential.behavior">
		  <title>Behavior</title>
		  <itemizedlist>
			  <listitem><code><![CDATA[F >x> G]]></code>
				  <para>
					  The execution of <code><![CDATA[F >x> G]]></code> starts by executing <code><![CDATA[F]]></code>. Whenever <code><![CDATA[F]]></code> 
					  publishes a value, a new copy of <code><![CDATA[G]]></code> is executed in parallel with <code><![CDATA[F]]></code> (and with any previous 
					  copies of <code><![CDATA[G]]></code>); in that copy of <code><![CDATA[G]]></code>, variable <code><![CDATA[x]]></code> is bound to the value
					  published by <code><![CDATA[F]]></code>. Values 
					  published by copies of <code><![CDATA[G]]></code> are published by the whole expression, but the values published 
					  by <code><![CDATA[F]]></code> are not published by the whole expression; they are consumed by the variable binding. 
				  </para>
			  </listitem>
			  <listitem><code><![CDATA[F >P> G]]></code>
				  <para>
					  The sequential combinator may be written as <code><![CDATA[F >P> G]]></code>, where <code><![CDATA[P]]></code> is a pattern instead of 
					  just a variable name. Any value published by <code><![CDATA[F]]></code> is matched against the pattern <code><![CDATA[P]]></code>. 
					  If this match is successful, a new copy of <code><![CDATA[G]]></code> is started with all of the bindings 
					  from the match. Otherwise, the published value is simply ignored, and no new copy 
					  of <code><![CDATA[G]]></code> is executed. 
				  </para>
			  </listitem>
			  <listitem><code><![CDATA[F >> G]]></code> 
				  <para>
				  This is equivalent to using a wildcard pattern:  <code><![CDATA[F >_> G]]></code>.  Every publication
				  of <code><![CDATA[F]]></code> will match the combinator pattern, causing an evaluation of <code><![CDATA[G]]></code> for every individual
				  publication of <code><![CDATA[F]]></code>.  No bindings will be made in <code><![CDATA[G]]></code> from these publications.
				  </para>
			  </listitem>		  
		  </itemizedlist>
	  </section>
	  <section xml:id="ref.combinators.sequential.examples">
		  <title>Examples</title>

		  <example xml:id="ref.combinators.sequential.examples.one"><title>Variable Binding</title>
<programlisting language="orc-demo"><![CDATA[
-- Publish 1 and 2 in parallel  
(0 | 1) >n> n+1
]]></programlisting>
		  </example>

		  <example xml:id="ref.combinators.sequential.examples.two"><title>Variable Binding 2</title>
<programlisting language="orc"><![CDATA[
-- Prepend the site name to each published search result
-- The cat site concatenates any number of arguments into one string  
  Google("cupcake") >s> cat("Google: ", s)
| Yahoo("cupcake") >s> cat("Yahoo: ", s)
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.sequential.examples.three"><title>Pattern Publication</title>
<programlisting language="orc-demo"><![CDATA[
-- Publish 3, 6, and 9 in arbitrary order.
(3,6,9)  >(x,y,z)>  ( x | y | z )
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.sequential.examples.four"><title>Filtering</title>
<programlisting language="orc-demo"><![CDATA[
-- Filter out values of the form (_,false)
-- Publishes 4 and 6 
( (4,true) | (5,false) | (6,true) )  >(x,true)> x
]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.combinators.sequential.examples.five"><title>Suppressed Publication</title>
<programlisting language="orc-demo"><![CDATA[
{- 
  Print two strings to the console,
  but don't publish the return values of the calls.
  
  Each println() site will print its argument
  string to the console and then publish a signal.
  Each site publication will match the sequential
  combinator wildcard pattern and cause stop to be
  evaluated.  Since stop ceases evaluation and
  publishes nothing, neither of the two signals
  published internally by the println() site calls
  will be published as a result of the full expression.
-}
( println("goodbye") | println("world") ) >> stop
]]></programlisting>
		  </example>
		  
	  </section>
	  
	  <section xml:id="ref.combinators.sequential.type">
	    <title>Type</title>
			<para>
				The type of <code><![CDATA[F >x> G]]></code> is the type of <code><![CDATA[G]]></code> using the assumption <code><![CDATA[x :: T]]></code>, 
				where <code><![CDATA[T]]></code> is the type of <code><![CDATA[F]]></code>.
			</para>
		</section>
	  
	  <section xml:id="ref.combinators.sequential.links">
		  <title>Related Links</title>
		  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="center">Related Reference Topics</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="ref.combinators" targetptr="ref.combinators">Combinators</olink></para></listitem>
          			<listitem><para><olink targetdoc="ref.patterns" targetptr="ref.patterns">Patterns</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>
	  
	  <informaltable frame="none">
  		<tgroup cols="1" align="left">
    	<thead>
      		<row>
        		<entry align="left">Related Tutorial Sections</entry>
        	</row>
    	</thead>
    	<tbody valign="top">
     		<row>
        		<entry><itemizedlist>
          			<listitem><para><olink targetdoc="userguide" targetptr="combinators.sequential">Sequential Combinator</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="patterns.extensions">Pattern Matching Extensions</olink></para></listitem>
          			<listitem><para><olink targetdoc="userguide" targetptr="orc.sites">Sites</olink></para></listitem>
        		</itemizedlist></entry>
        	</row>
    	</tbody>
  		</tgroup>
	  </informaltable>

	  </section>
   </section>
