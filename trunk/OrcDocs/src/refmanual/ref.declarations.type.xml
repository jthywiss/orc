<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.declarations.type.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Type -->
	<section xml:id="ref.declarations.type" xmlns="http://docbook.org/ns/docbook">
		<title><code>type</code>:  Declare Type</title>

			<!-- Index pointers for unwritten terms -->
			<indexterm><primary>import type</primary></indexterm>

			<para>
			A type declaration binds a type variable to a type. There are three kinds of 
			type declarations: <firstterm baseform="type alias">aliases</firstterm>, 
			<emphasis>imports</emphasis>, and <emphasis>datatypes</emphasis>.
			</para>
			
	<section xml:id="ref.declarations.type.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.declaration.type"/>
	    	<productionrecap linkend="ebnf.declaration.type.alias"/>
	    	<productionrecap linkend="ebnf.declaration.type.import"/>
	    </productionset>
	  </para>
  </section>
  
  <section xml:id="ref.declarations.type.alias">
	  <title>Type Alias</title>
	  <para>
	    A <indexterm significance="preferred"><primary>type alias</primary></indexterm><firstterm>type alias</firstterm> gives an existing type a new name, for the programmer's ease of use.
			There is no distinction between the alias and the aliased type; they can be used
			interchangeably. A type alias may not be recursive.
	  </para>
	  
	  <para>
	    A type alias may have type parameters, in which case it defines a type operator
	    which can be applied to other types.
	  </para>
  </section>
			
	<section xml:id="ref.declarations.type.import">
	  <title>Type Import</title>
	  
	  <para>
			A <indexterm significance="preferred"><primary>type import</primary></indexterm><firstterm>type import</firstterm> gives a name to a type described by some external service.
			This allows new types to be added to Orc, in much the same way that
			the <code>site</code> declaration allows new sites to be added to Orc.
			Type imports are often used in conjunction with the <link linkend="ref.declarations.site"><code>site</code> declaration</link>,
			to give a name to the type of values produced by the site.
	  </para>
	  
	</section>
	
	<section xml:id="ref.declarations.type.datatype">
	  <title>Datatype</title>	  
	  
	  <!-- Index pointers for unwritten terms -->
		<indexterm><primary>import type</primary></indexterm>
	  
	  <para>
	    A <emphasis><indexterm><primary>algebraic data type</primary></indexterm>datatype declaration</emphasis> defines a new type, called a <indexterm significance="preferred"><primary>sum type</primary></indexterm><firstterm>sum type</firstterm>, which is the
	    type of all values produced by any of the declared constructors. 
	  </para>
	  <para>
	    A datatype declaration may be polymorphic, introducing new type variables which may be used within
	    the slots of the constructors. It may also be recursive; the type name itself can be used within the
	    slots of the constructors. A datatype declaration is the only way to define type recursively in Orc.
	  </para>
	  <para>
	    The datatype declaration also assigns types to each of the <link linkend="ref.data.datatype.type">constructor sites</link> that it defines.
	  </para>   
	</section>
			
  <section xml:id="ref.declarations.type.examples">
		<title>Examples</title>

		<example xml:id="ref.declarations.type.examples.aliases"><title>Aliasing Types</title>
<programlisting language="orc"><![CDATA[
{- Define a three-dimensional vector type, and a polymorphic relation type  -}

type Vector = {. x :: Number, y :: Number, z :: Number .}
type Relation[R] = (R,R) => Boolean

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>

		<example xml:id="ref.declarations.type.examples.imports"><title>Importing Types</title>
<programlisting language="orc"><![CDATA[
{- Import the Cell type of write-once cells, and import Java's URI type -}

type Cell = orc.lib.state.types.CellType
type URI = java.net.URI

{-
NONRUNNABLE
-}
]]></programlisting>
		  </example>
		
		<example xml:id="ref.declarations.type.examples.tree"><title>Binary Tree Type</title>
<programlisting language="orc"><![CDATA[
{- 
   Define a polymorphic binary tree datatype,
   then construct a tree of integers and a
   tree of booleans.
-}

type Tree[T] = Node(Tree[T], T, Tree[T]) | Empty()

val intTree =
  val left = Node(Empty(), 0, Empty())
  val right = Node(Empty(), 2, Empty())
  Node(left, 1, right)

val boolTree =
  val left = Node(Empty(), false, Empty())
  Node(left, true, Empty())

intTree | boolTree 

{-
OUTPUT:
Node(Node(Empty(), false, Empty()), true, Empty())
Node(Node(Empty(), 0, Empty()), 1, Node(Empty(), 2, Empty()))
-}
]]></programlisting>
		  </example>
		</section>
		
		<section xml:id="ref.declarations.type.links">
		  <title>Related Links</title>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Reference Topics</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
	          			<listitem><para><link linkend="ref.data.datatype">Algebraic Data Types</link></para></listitem>
	          			<listitem><para><link linkend="ref.types.polymorphism.types">Parametric Types</link></para></listitem>
	          			<listitem><para><link linkend="ref.types.metatheory">Type System Metatheory</link></para></listitem>
	        		</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>
		  
		  <informaltable frame="none">
	  		<tgroup cols="1" align="left">
	    	<thead>
	      		<row>
	        		<entry align="left">Related Tutorial Sections</entry>
	        	</row>
	    	</thead>
	    	<tbody valign="top">
	     		<row>
	        		<entry><itemizedlist>
          				<listitem><para><olink targetdoc="userguide" targetptr="section.orc.datatypes">Datatypes</olink></para></listitem>
        			</itemizedlist></entry>
	        	</row>
	    	</tbody>
	  		</tgroup>
		  </informaltable>

	  </section>
	</section>
