<?xml version="1.0" encoding="UTF-8"?>

<!-- ug.language.introduction.xml - DocBook source for the Orc user guide

     $Id: ug.language.introduction.xml 2652 2011-03-30 20:58:24Z bmccord09@gmail.com $

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<section xml:id="ug.language.introduction"
		 xmlns="http://docbook.org/ns/docbook" 
		 xmlns:xlink="http://www.w3.org/1999/xlink"
		 xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Introduction</title>

	<para>
	This chapter describes the Orc programming language in three steps. In Section 1.2, we
	discuss a small subset of Orc called Cor. Cor is a pure functional language,
	which has no features for concurrency, has no state, and does not communicate 
	with external services. Cor introduces us to the parts of Orc that are most familiar 
	from existing programming languages, such as arithmetic operations, variables,
	conditionals, and functions.
	</para>
	
	<para>
	In Section 1.3, we consider Orc itself, which in addition to Cor, comprises 
	external services and combinators for concurrent orchestration of those services. 
	We show how Orc interacts with these external services, how the combinators can be
	used to build up complex orchestrations from simple base expressions, and how the 
	functional constructs of Cor take on new, subtler behaviors in the concurrent 
	context of Orc.
	</para>
	
	<para>
	In Section 1.4, we discuss some additional features of Orc that extend 
	the basic syntax. These are useful for creating large-scale Orc programs, but 
	they are not essential to the understanding of the language.
	</para>
 
</section> 