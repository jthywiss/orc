<?xml version="1.0" encoding="UTF-8"?>
<!-- ug.language.advanced.xml - DocBook source for the Orc user guide

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->
  
<chapter xml:id="ug.language.advanced"
		 xmlns="http://docbook.org/ns/docbook" 
		 xmlns:xlink="http://www.w3.org/1999/xlink"
		 xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Advanced Features of Orc</title>

<section xml:id="special.dot"><title>The <code>.</code> notation</title>

<para>
In many object-oriented programming languages, one calls a method or accesses a field of an
object using the dot operator; for example, <code>obj.m()</code> calls the method
<code>m</code> of the object <code>obj</code>. 
</para>

<para>
There is a special kind of site call in Orc which serves a similar purpose. One may write
<code>x.msg</code>, for any identifiers <code>x</code> and <code>msg</code>. This treats
 the value bound to <code>x</code> as a site, and calls it with a special 
<firstterm>message</firstterm> value <code>msg</code>. 
If the site understands the message <code>msg</code> (for example, if <code>x</code> is 
bound to a Java object with a field called <code>msg</code>), the site interprets the message 
and responds with some appropriate value. If the site does not 
understand the message sent to it, it does not respond, and no publication occurs. 
If <code>x</code> cannot be interpreted as a site, no call is made. 
</para>

<para>
Typically this capability is used so that sites may be syntactically treated like objects, 
with multiple methods and fields. For example, a channel <code>c</code> might understand the messages
<code>get</code> and <code>put</code>, to get values from and put values on that channel,
respectively. Such calls would be written <code>c.get()</code>, or <code>c.put(6)</code>.
</para>

<para>
A call such as <code>c.put(6)</code> actually occurs in two steps. First <code>c.put</code> sends the message
<code>put</code> to the site <code>c</code>; this publishes a site whose only purpose
is to put values on the channel. Next, that site is called on the argument
<code>6</code>, sending 6 on the channel. Readers familiar with functional programming
will recognize this technique as <emphasis>currying</emphasis>. <!--  TODO: link to ref manual: currying -->
</para>
</section>


<section xml:id="section.orc.datatypes"><title>Datatypes</title>

<para>
We have seen Orc's predefined data structures: tuples and lists. Orc also provides the capability
for programmers to define their own data structures, using a feature adopted from the ML/Haskell
language family called <firstterm>datatypes</firstterm> (also called variants or tagged sums).
</para>

<para>
Datatypes are defined using the <code>type</code> declaration:

<programlisting><![CDATA[
type Tree = Node(_,_,_) | Empty()
]]></programlisting>

</para>

<para>
This declaration defines two new sites named <code>Node</code> and <code>Empty</code>.
<code>Node</code> takes three arguments, and publishes a <emphasis>tagged value</emphasis>
wrapping those arguments. <code>Empty</code> takes no arguments and does the same.
</para>

<para>
Once we have created these tagged values, we use a new pattern called a datatype pattern
to match them and unwrap the arguments:

<programlisting><![CDATA[
type Tree = Node(_,_,_) | Empty()
{- Build up a small binary tree -}
val l = Node(Empty(), 0, Empty())
val r = Node(Empty(), 2, Empty())
val t = Node(l,1,r)

{- And then match it to extract its contents -}
t >Node(l,j,r)>
l >Node(_,i,_)>
r >Node(_,k,_)>
( i | j | k )
]]></programlisting>
</para>

<para>
One pair of datatypes is so commonly used that it is already predefined in the standard library:
<code>Some(_)</code> and <code>None()</code>. These are used as return values for calls that
need to distinguish between successfully returning a value (<code>Some(v)</code>), and successfully
completing but having no meaningful value to return (<code>None()</code>). For example, a lookup
function might return <code>Some(result)</code> if it found a result, or return <code>None()</code>
if it successfully performed the lookup but found no suitable result.
</para>

</section>


<section xml:id="section.language.class"><title>Classes</title>

<para>
A class is an abstraction mechanism in Orc, much like the
<code>def</code> construct. It extends the <code>def</code> construct, by allowing
us to convert an Orc program fragment into a site. Specifically, a
class can be used to: (1) Define object classes with methods,
(2) Create new sites and extend behaviors of existing sites, (3) Allow
concurrent method invocation on objects, and (4) Create active
objects, whose executions may be based on time or other external
stimulus, not necessarily explicitly called methods. 
</para>
	
<para>
A class has the following properties:
<orderedlist>
<listitem>Encapsulation: Just like objects in an object-oriented language, classes 
	also provide the encapsulation facility for the programmer. The data defined inside 
	the class can only be accessed and modified through methods defined in class. Therefore, 
	it hides the representation of the data and implementation of functions and methods 
	which work on the data and manage the state. </listitem>
<listitem>Methods instead of functions: These are the gateways to access and manipulate the 
	data represented by class. They also enable the user of the class to access the service 
	provided by that. Unlike functions in Orc, methods defined in a class can only publish 
	one value. </listitem>
<listitem>Termination protection: The execution of a class and its methods are protected from 
	termination of the rest of the program. In other words, the execution of class cannot be 
	interrupted. In the pruning combinator as soon as the right hand side expression publishes a 
	value, all the on going executions in the right hand side will be terminated. However, if there 
	is any call to a class in the right hand side, that call will proceed until completion. For 
	example, in the following Orc expression, suppose that c is a class.
	<programlisting><![CDATA[
	 y <y< g() | c() 
]]></programlisting>
	If g() publishes a value before c() does, the execution of c() will continue. Although, the published 
	value of c() (if any) will never be used. On the other hand, if c() publishes a value first, then the 
	execution of g() will be interrupted since its execution is not protected. This property of classes is 
	very important to prevent the data corruption and invalid state of an object. We will see using an 
	example the significance of this property later on in the guide. 
</listitem>
	<listitem>Strict calls: unlike calls to ordinary function definitions in Orc, calls to class methods 
		are strict. This means that the call will not happen unless all the parameters are bound. </listitem>
</orderedlist>
</para>

<para>
A class definition can be translated to pure Orc calculus, making
use of the site <code>makesite</code>. (See <xref linkend="appendix.library"/> for details of <code>makesite</code>.)
</para>

<section><title>Object Definition</title>

<para>
To motivate the notion of class, we start with a simple example, 
defining a stack with methods <code>push</code> and <code>pop</code>. Below, parameter <code>n</code>
defines the maximum length of each instance of stack. We store the
stack elements in an array. Our implementation blocks an illegal
operation (a <code>push</code> on a full stack or a <code>pop</code> on an empty stack).  
</para>

<programlisting><![CDATA[
{- Define a simple stack in Orc -}

def class Stack(n) =
  val store = Table(n, Ref)
  val len = Ref (0) -- len is the current stack length

  def push(x) = Ift(len? <: n) >> store(len?) := x >> len := len? + 1

  def pop() = Ift(len? :> 0) >> len := len? - 1 >> store(len?)?

  {- class goal -} stop

{- Test the stack -}
val st = Stack(5)
st.push(3) >> st.push(5) >> st.pop() >> st.pop()

{-
OUTPUT:
3
-}
]]></programlisting>

</section>


<section><title>Class Syntax and Semantics</title>

<para>
A class is defined much like a a function. The keyword <code>class</code>
is used after <code>def</code>. A class may have parameters (including
other classes), as in a function definition. The body of a class
may include function and class definitions. The name of every definition
in the body of a class is exported. 
<!--
(a later version of Orc implementation will allow the programmer to specify the names to be
exported through an export list).
-->
</para>

<para>
A class definition obeys all the rules of function definition
except:

<orderedlist>
<listitem>A class definition must include at least one
definition (which could be a class definition),</listitem>

<listitem>A class's goal expression must not publish,</listitem>

<listitem>Each function defined within a class publishes at most once.</listitem>
</orderedlist>
</para>

<para>
A class call creates and publishes a site (recall that the goal
expression of a class must not publish). Thus, 

<programlisting><![CDATA[
val st = Stack(5)
]]></programlisting>

instantiates site <code>st</code>. Multiple instances of a
class may be created by calling the class multiple times. The
functions (and classes) defined in the body of the class are
externally accessed as dot methods.
</para>
</section>

<section><title>Notes</title>

<itemizedlist>
<listitem><para>
Clausal definition: A class may be defined as a set of
  clauses, exactly as a function definition. In this case all clauses
  must define the same names to be exported.
</para></listitem>

<listitem><para>
Concurrent calls to methods: Methods of a class instance may
  be invoked concurrently, as in functions. It is the obligation of
  the programmer to ensure that concurrent calls do not
  interfere. Calling the methods of stack <code>st</code> concurrently may
  result in unintended outcomes. For example, in  
<programlisting><![CDATA[
  st.push(3) >> st.pop() >> Rwait(1000) >> st.pop()
| st.push(4) >> stop
]]></programlisting>
  the last <code>st.pop()</code> (in the first line) often does not succeed,
  because just one value was stored in the stack though there
  were two concurrent <code>st.push()</code> operations. 
</para></listitem>

<listitem><para>
Prune on class call: Like site calls, running class method invocations 
  are not terminated by the pruning combinator. In the following program,
  <code>x</code> is assigned value 3 because execution of <code>testprune().run()</code> never
  publishes. However,
  <code>testprune().run()</code> is treated as a site call which continues
  execution even after x is assigned a value. Eventually, the line
  <computeroutput>done</computeroutput> is printed.
<programlisting><![CDATA[
def class testprune() =
  def run() =  Rwait(1000) >> Println("done") >> stop
  stop

  val x =  Rwait(50) >> 3 |  testprune().run()
  x
]]></programlisting>
</para></listitem>
</itemizedlist>
</section>

<section><title>Class Example</title>
	<para>
		The following shows the code for this sequence number generator in Orc: 
	</para>
	
	<programlisting><![CDATA[
{- Create a sequence number generator -}

{- mutable integer defined with seed zero -}
val seq_num = Ref(0) 

{- gen_seq will increase the seq_num and return the new value -}
def gen_seq() =
  seq_num := seq_num?+1 >> seq_num?
  
gen_seq() >s> Println(s) >> gen_seq() >s> Println(s) >> stop

{-
OUTPUT:
1
2
-}
]]></programlisting>
	
	<para>
		What is the problem with the above code? The first problem is that the seq_num is 
		exposed to all the expressions which come after it. This means that all those 
		expressions can possibly read and write the value of seq_num. This is not always 
		desirable and makes the reasoning about the program more difficult. The second issue 
		with this code is that it is not flexible enough. What if we want to have different 
		sequence number generator with a different initial seed? For example, we may want a 
		sequence number starting at 0 and another one starting at 1000.
	</para>

	<para>
		There is another issue associated with the above code from a concurrent programming 
		viewpoint. It is not thread safe. This means that if we make two parallel calls to 
		gen_seq(), we may get the same result. For example, the following piece of code: 
	</para>
	
		<programlisting><![CDATA[
gen_seq() | gen_seq()
]]></programlisting>
	
	<para> The above code can generate "1" as the publication for both expressions, and in most of the runs
		it will.  This is a famous phenomenon in parallel programming known as a race condition. 
		In fact, access to the shared variable seq_num is subject to race condition between 
		the two threads running the two calls to gen_seq(). To solve the race issue we need 
		to add a semaphore to the above code in order to regulate the access to the shared 
		variable, seq_num. Therefore, every call to gen_seq needs to acquire the semaphore in 
		order to update the variable and release the semaphore at the end. The new safe code 
		is as follows:  </para>
	
		<programlisting><![CDATA[
{- Create a sequence number generator with a semaphore -}

{- the mutable integer defined with seed zero -}
val seq_num = Ref(0)

{- a semaphore to regulate access to shared variable seq_num -}
val seq_num_sem = Semaphore(1)

{- gen_seq will increase the seq_num and return the new value -}
def gen_seq() =
  seq_num_sem.acquire() >> seq_num := seq_num?+1 >> 
  seq_num? >x> seq_num_sem.release() >> x
  
gen_seq() | gen_seq()

{-
OUTPUT:
1
2
-}
]]></programlisting>
	
	<para>
		The above code, besides the issue of encapsulation and the complexity of having more than 
		one sequence number generator, looks fine. However, there is a subtle problem with this code. 
		The problem is data corruption and invalid state which can be caused by abrupt termination 
		of the call to gen_seq(). Consider the following piece of code and corresponding execution order: 
	</para>
	
		<programlisting><![CDATA[
y <y< 1+1 | gen_seq()
		]]></programlisting>
	
		<programlisting><![CDATA[
1- 1+1
2- seq_num_sem.acquire()
3- y is bound to 2
4- terminate gen_seq()
		]]></programlisting>
	
	<para>
		As illustrated in the above execution sequence, the semaphore seq_num_sem got acquired but never 
		released because of abrupt termination. Therefore consecutive calls to gen_seq will never proceed 
		because they cannot acquire the semaphore. So, we need to somehow protect the execution of gen_seq. 
		Classes address all the above issues in a succinct way.
	</para>
	
	<para>
		The class solution to the sequence number generator is the following code:
	</para>
	
			<programlisting><![CDATA[
{- Create a sequence number generator as a class -}

def class gen_seq(init) =
	{- the mutable integer defined with seed init -}
	val seq_num = Ref(init)
	
	{- the next function will increase the seq_num and return the new value -}
	def next() =
		seq_num := seq_num?+1 >> seq_num?
	signal

	val g = gen_seq(1000)

	g.next() >y> Println(y) >> g.next() >y> Println(y) >> stop

{-
OUTPUT:
1001
1002
-}
		]]></programlisting>
	
	<para>
		It is very easy to instantiate a new sequence number that starts with a different seed. We just need 
		to create a new instance of gen_seq with a different seed. The following code shows an example of creating 
		two sequence number generator with two different seeds. 
	</para>
	
		<programlisting><![CDATA[
val g0 = gen_seq(0)
val g1 = gen_seq(1000)

g0.next() >y> Println(y) >> g1.next() >y> Println(y) >> stop
		]]></programlisting>
	
	<para>
		Notice how easy it is to have a new sequence number generator. Comparatively, in a pure functional language where 
		we just have functions, we need to declare new declarations of seq_num to accomplish the job.
	</para>
	
	<para>
		Now, in order to solve the issue of thread safety, we want to add a semaphore to the class. Note that since 
		the execution of the class is protected we will not run into the problem of invalid state or data corruption 
		caused by abrupt termination. The following code shows the thread safe version of the sequence number generator. 
	</para>
	
	<programlisting><![CDATA[
{- Create a sequence number generator as a class with semaphore -}

def class gen_seq(init) =
	{- the mutable integer defined with seed init -}
	val seq_num = Ref(init)
	
	{- a semaphore to regulate access to shared variable seq_num -}
	val seq_num_sem = Semaphore(1)
	
	{- gen_seq will increase the seq_num and return the new value -}
	def next() =
		seq_num_sem.acquire() >> seq_num := seq_num?+1 >>
		seq_num? >x> seq_num_sem.release() >> x
	signal
	
{-
OUTPUT:
-}
		]]></programlisting>
	
</section>
	
<section><title>More Class Examples</title>

<para>
Here we show a few more examples of class usage.
</para>
	
<section><title>Active Classes</title></section>
	<para>
		Class is an active entity. Active objects, unlike passive ones, have 
		their own thread of control. They can initiate a computation without receiving 
		a method call (in procedural languages) or a message (in languages with message 
		passing model). Note that this definition of active objects subsumes reactive 
		objects and actors. We said that the execution of class is protected from the 
		rest of the program. Here we want to clarify what do we mean by creation of the 
		class and when the class actually exists.
	</para>
	
	<para>
		A class exists as soon as all the parameters and free variables in the class 
		are bound to their values. Thereafter, any method on the class can be called. This 
		means that the creation process would not wait for goal expression of the class to 
		finish. Therefore, the creation of the class would return immediately. But the goal 
		expression continues to execute. The goal expression will not publish anything. However, 
		it can have side effects. For example, it could print something on the screen or it 
		can initiate some other processes and send and receive data to and/or from channels. 
	</para>
	
	<para>
		The following example explains the notion of activeness of classes. We want to design a 
		clock that ticks every n (user specified) milliseconds. We want to be able to get the 
		number of ticks passed since the process started. The following example shows a class 
		implementation of this clock.
	</para>
	
		<programlisting><![CDATA[
{- Define a class to track passage of time -}

def class nclock(n) = -- tick every n milliseconds
	{- tick_cnt counts the number of ticks -}
	val tick_cnt = Ref(0)
	
	{- getTick returns the number of ticks passed so far -}
	def getTick() = tick_cnt?
	metronome(n) >> tick_cnt:=tick_cnt?+1

	val ticker = nclock(250)
	{- prints a mutiple of 4 every one second -}
	Rwait(1000) >> metronome(1000) >> ticker.getTick()
	
{-
OUTPUT:
-}
		]]></programlisting>
	
	<para>
		In this example, the class nclock has a tick counter tick_cnt that records the number of 
		ticks passed so far. The method getTick returns the number of ticks. The interesting point 
		about this class is its goal expression. The goal expression is a metronome that publish 
		a signal every n milliseconds. Each time a signal is issued it causes the tick_cnt to increase 
		by one. As can be seen, the goal expression would never stop. It keeps increasing the tick 
		counter for ever and a thread is always active in the nclock class instance. This program 
		keeps publishing the multiples of 4 starting from 4 upward. 
	</para>

<section><title>Multi-dimensional Matrix</title>

<para>
We declare a two dimensional matrix whose index ranges may span any
finite interval of integers. The same technique can be used to declare
any multi-dimensional matrix.
</para>

<programlisting><![CDATA[
{- Define a multi-dimensional matrix -}

def class Matrix((lo1, up1), (lo2, up2)) =
  val mat = Array((up1 - lo1 + 1) * (up2 - lo2 + 1))
  def access(i, j) = mat((i - lo1) * (up2 - lo2 + 1) + j)
  stop

val A = Matrix((-2, 0), (-1, 3)).access
A(-1,2) := 5 >> A(-1, 2) := 3 >> A(-1, 2)?

{-
OUTPUT:
3
-}
]]></programlisting>

<para>
Note that we define matrix <code>A</code> to be the sole method, <code>access</code>, of the
class; this enables us to refer to matrix elements in the
traditional style.
</para>
</section>

<section><title>Create a new site</title>

<para>
We create a new site, a bounded channel, using <code>Channel</code> and
<code>Semaphore</code> sites. The channel stores the data items and the
semaphores are used to ensure proper blocking. Below, <code>n</code> is the
maximum channel size, and <code>p</code> and <code>g</code> are semaphores whose values are the
number of empty and full positions, respectively. A <code>put</code> operation is
allowed only if <code>p > 0</code> and a <code>get</code> if <code>g > 0</code>.
</para>

<programlisting><![CDATA[
def class BChannel(n) =
  val b = Channel()
  val (p, g) = (Semaphore(n), Semaphore(0))
  def put(x) = p.acquire() >> b.put(x) >> g.release()
  def get() = g.acquire() >> b.get() >x> p.release() >> x
  stop
]]></programlisting>

<para>
Note that setting <code>n = 1</code> lets us define a 1-place channel in which the
executions of 
<code>put</code> and <code>get</code> operations have to alternate.
</para>
</section>

<section><title>Extend functionality of existing site</title>

<para>
We add a <code>length</code> function to the <code>Channel</code> site, that returns
its current length. 
</para>

<programlisting><![CDATA[
def class Channel() =
  val ch = Channel()
  val chlen = Counter(0)

  def put(x) = ch.put(x) >> chlen.inc()
  def get() = ch.get() >x> chlen.dec() >> x
  def length() = chlen.value()
  stop
]]></programlisting>
</section>

<section><title>A Communication protocol; Rendezvous</title>

<para>
A set of senders and receivers communicate in the following manner. A
sender executes <code>send(v)</code> and a receiver <code>recv()</code>. The <code>send(v)</code> remains
blocked until some <code>recv()</code> operation is executed; similarly a
<code>recv()</code> is blocked until there is a corresponding <code>send(v)</code>. When both
<code>send(v)</code> and <code>recv()</code> operations are ready for execution,
the <code>recv()</code> operation receives data <code>v</code>, <code>send</code> receives a signal,
and both can then proceed.
</para>

<para>
We employ semaphore <code>s</code> on which the send operation blocks; <code>s</code> is released by
the receive operation. The sender then puts its data in a channel and
the receiver reads from the channel. 
</para>

<programlisting><![CDATA[
def class Rendezvous() =
  val (s,data) = (Semaphore(0), Channel())
  def send(x) = s.acquire() >> data.put(x)
  def recv() = s.release() >> data.get()
  stop
]]></programlisting>

<para>
The following code fragment shows three threads that are forced to
execute their codes in a nearly sequential manner due to the restrictions
imposed by rendezvous.
</para>

<programlisting><![CDATA[
val group1 = Rendezvous()
val group2 = Rendezvous()

  group1.send(3)
| Rwait(1000) >> group2.recv()
| group2.send(5) >> group1.recv()
]]></programlisting>
</section>

<section><title>A class operating in real time</title>

<para>
We create a class to mimic a stopwatch. A stopwatch allows the
following operations: 
<itemizedlist>
<listitem><code>start()</code>: (re)starts the stopwatch and publishes a signal</listitem>
<listitem><code>halt()</code>: stops and publishes current value on the stopwatch</listitem>
</itemizedlist>
</para>

<para>
We implement an instance of a stopwatch by assigning a new clock to it
(created by calling site <code>Clock()</code> that returns a new clock
with value 0). Additionally, two mutable variables are used with
the following meaning.
<itemizedlist>
<listitem><code>timeshown</code>: clock value when the stopwatch was last stopped,</listitem>
<listitem><code>laststart</code>: clock value when the stopwatch was last started.</listitem>
</itemizedlist>
Initially, both variable values are 0.
</para>

<programlisting><![CDATA[
def class Stopwatch() =
  val clk = Clock()
  val (timeshown, laststart) = (Ref(0), Ref(0))

  def start() = laststart := clk()

  def halt() = timeshown := timeshown? + (clk() - laststart?) >> timeshown?
  stop
]]></programlisting>

<para>
A useable implementation of stopwatch requires a more general
interface. It should allow <code>start</code> operation in the state where
the stopwatch is already running, and <code>halt</code> in a state where the
stopwatch is already halted. Additionally, an operation to determine
the staus of the stopwatch (running or not) should be provided. Such
an implementation is given for the library site, <code>Stopwatch</code>; see
 the <code>Stopwatch</code> site in <xref linkend="appendix.library"/>.  
</para>

</section>
</section>
</section>
</chapter>
