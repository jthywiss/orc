<?xml version="1.0" encoding="UTF-8"?>
<!-- ug.introduction.simple.xml - DocBook source for an Orc user guide section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->
<section xml:id="ug.introduction.simple" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Simple Expressions</title>

In this section we show how some simple Orc expressions are written. 
Simple expressions publish at most one value, and do not recursively
contain other expressions. We will see later how some of these cases
may also be used as complex expressions.

<section xml:id="ug.introduction.simple.values">
<title>Values</title>
<para>

The simplest expression one can write is a literal value.
Executing that expression simply publishes the value.
</para>

<para>

Orc has four kinds of literal values:

<itemizedlist>

<listitem>
Booleans: <code>true</code> and <code>false</code>
</listitem>

<listitem>
Numbers: <code> 5, -1, 2.71828, ... </code>
</listitem> 

<listitem>
Strings: <code>"orc"</code>, <code>"ceci n'est pas une |"</code>
</listitem>

<listitem>
A special value <code>signal</code>.
</listitem>

</itemizedlist>
</para>

</section>


<section xml:id="ug.introduction.simple.operators"><title>Operators</title>
<para>
Orc has a standard set of arithmetic, logical, and comparison operators.
As in most other programming languages, they are written in the usual 
infix style. They have Java-like operator precedence, which can be
overridden by adding parentheses.  
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>1+2</code> publishes <code>3</code>.</listitem>
<listitem><code>(98+2)*17</code> publishes <code>1700</code>.</listitem>
<listitem><code>4 = 20 / 5</code> publishes <code>true</code>.</listitem>
<listitem><code>3-5 >= 5-3 </code> publishes <code>false</code>.</listitem>
<listitem><code><![CDATA[true && (false || true)]]></code> publishes <code>true</code>.</listitem>
<listitem><code>"leap" + "frog"</code> publishes <code>"leapfrog"</code>.</listitem>
<listitem><code>3 / 0</code> halts, publishing nothing.</listitem>
</itemizedlist>
</para>

</section>

<section xml:id="ug.introduction.simple.sites"><title>Sites</title>
<para>
An Orc program interacts with the external world by calling <firstterm>sites</firstterm>.
Sites are one of the two fundamental concepts of Orc programming, the other
being combinators.   
</para>

<para>
A site call in Orc looks like a method, subroutine, or function call in other programming languages.
A site call might publish a useful value, or it might just publish a <code>signal</code>, or
it might halt, refusing to publish anything, or it might even wait indefinitely.
Here are some examples:
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>Println("hello world")</code> prints <code language="none">hello world</code> to the console and publishes a <code>signal</code>.</listitem>
<listitem><code>Random(10)</code> publishes a random integer from 0 to 9, uniformly distributed.</listitem>
<listitem><code>Browse("http://orc.csres.utexas.edu/")</code> opens a browser window pointing to the Orc home page and publishes a <code>signal</code>.</listitem>
<listitem><code>Error("I AM ERROR")</code> reports an error message on the console, and halts. It publishes nothing.</listitem>
<listitem><code>Rwait(420)</code> waits for 420 milliseconds, then publishes a <code>signal</code>.</listitem>
<listitem><code>Prompt("Username:")</code> requests some input from the user, then publishes the user's response as a string. If the user never responds, the site waits forever.</listitem>
</itemizedlist>
</para>

<para>
Even the most basic operations in Orc are sites. For example, all of the operators are actually sites;
<code>2+3</code> is just another way of writing the site call <code>(+)(2,3)</code>.
</para>

</section>



</section>
