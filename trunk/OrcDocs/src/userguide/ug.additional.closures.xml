<?xml version="1.0" encoding="UTF-8"?>
<!-- ug.additional.closures.xml - DocBook source for an Orc user guide section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->
<section xml:id="ug.additional.closures" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>First-Class Functions</title>

<para>
In the Orc programming language, functions are first-class values. This means that a function
is treated like any other value; it may be published, passed as an argument to a call, incorporated
into a data structure, and so on. 
</para>

<para>
Defining a function creates a special value called a <firstterm>closure</firstterm>.
The name of the function is a variable and its bound value is the closure. For example,
these function declarations create two closures, bound to the variables <code>a</code>
and <code>b</code>, from which we subsequently create a tuple called <code>funs</code>:
  
<programlisting><![CDATA[
def a(x) = x-3
def b(y) = y*4
val funs = (a,b)
]]></programlisting>
</para>

<para>
A closure can be passed as an argument to another function.
A function which accepts functions as arguments is called a <firstterm>higher-order</firstterm> function.
Here's an example:

<programlisting><![CDATA[
def diff(f) = f(1) - f(0)
def triple(x) = x * 3

diff(triple) {-   equivalent to triple(1) - triple(0)   -}
]]></programlisting>

The use of higher-order functions is common in functional programming.
Here is the Orc version of the classic 'map' function:

<programlisting><![CDATA[
def map(f, []) = []
def map(f, h:t) = f(h):map(f,t)
]]></programlisting>

</para>

<para>
Sometimes one would like to create a closure directly, without bothering to give it a name. 
There is a special keyword <code>lambda</code> for this purpose. By writing a function
definition without the keyword <code>def</code> and replacing the function name with
the keyword <code>lambda</code>, that definition becomes an expression which evaluates to a closure. 

<programlisting language="orc-demo"><![CDATA[
def diff(f) = f(1) - f(0)


diff( lambda(x) = x * 3 )
{- 
  this is identical to:
  
  def triple(x) = x * 3
  diff(triple)
-}
]]></programlisting>

</para>

</section>