<?xml version="1.0" encoding="UTF-8"?>
<!-- ug.language.cor.xml - DocBook source for the Orc user guide

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Replace Cor with Orc everywhere, and fix minor inconsistencies which result  -->
<!-- Cut all reference material in this section. Maybe cut the entire section. -->
<chapter xml:id="ug.language.cor"
		 xmlns="http://docbook.org/ns/docbook" 
		 xmlns:xlink="http://www.w3.org/1999/xlink"
		 xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Cor: A Functional Subset</title>

 
<para>
In this section we introduce Cor, a pure functional subset of the Orc language.
Users of functional programming languages such as Haskell and ML will already be 
familiar with many of the key concepts of Cor.  
</para>

<para>
A Cor program is an <firstterm xml:id="terms.expression">expression</firstterm>. Cor expressions are built
up recursively from smaller expressions. Cor <firstterm>evaluates</firstterm> an expression
to reduce it to some simple <firstterm>value</firstterm> which cannot be evaluated further, 
for example a list of numbers or a Boolean truth value. This value is called the <firstterm>
result</firstterm> of the expression.
</para>

<para>
In the following subsections we introduce the concepts of Cor. First, we talk about
simple <firstterm xml:id="terms.constant">constants</firstterm>, such as numbers and truth values, and the operations that we can perform
on those values. Then we introduce conditionals (<code>if then else</code>). Then we 
introduce variables and binding, as a way to give a name to the value of an expression. 
After that, we talk about constructing data structures, and examining those structures
using patterns. Lastly, we introduce functions.
</para> 


<section xml:id="orc.constants"><title>Constants</title>
<para>
The simplest expression one can write is a constant. It evaluates trivially
to that constant value. 
</para>

<para>

Cor has three types of constants, and thus for the moment three types of values:

<itemizedlist>

<listitem>
Boolean: <code>true</code> and <code>false</code>
</listitem>

<listitem>
Number: <code> 5, -1, 2.71828, ... </code>
</listitem> 

<listitem>
String: <code>"orc"</code>, <code>"ceci n'est pas une |"</code>
</listitem>

</itemizedlist>
</para>

</section>

<section xml:id="language.base.operators"><title>Operators</title>
<para>
Cor has a standard set of arithmetic, logical, and comparison operators.
As in most other programming languages, they are written in the usual 
infix style. They have Java-like operator precedence, which can be
overridden by adding parentheses.  
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>1+2</code> evaluates to <code>3</code>.</listitem>
<listitem><code>(98+2)*17</code> evaluates to <code>1700</code>.</listitem>
<listitem><code>4 = 20 / 5</code> evaluates to <code>true</code>.</listitem>
<listitem><code>3-5 >= 5-3 </code> evaluates to <code>false</code>.</listitem>
<listitem><code><![CDATA[true && (false || true)]]></code> evaluates to <code>true</code>.</listitem>
<listitem><code>"leap" + "frog"</code> evaluates to <code>"leapfrog"</code>.</listitem>
</itemizedlist>
</para>

<para>
Numbers with no decimal part, such as <code>3</code>, are treated as integers. Arithmetic operators with two integer arguments will perform
an integer operation and return an integer result; for example, <code>5 / 2</code> performs integer division and evaluates to <code>2</code>.
However, if either argument to an operator has a decimal part (even if it is trivial, as in <code>3.0</code>), the other argument will
be promoted, and a decimal operation will be peformed. For example, <code>5 / 2.0</code> and <code>5.0 / 2</code> both perform decimal
division and evaluate to <code>2.5</code>.
</para>

<section><title>Silent Expression</title>
<para>
There are situations where an expression evaluation is stuck, because it is attempting to perform 
some impossible operation and cannot compute a value. In that case, the expression is <firstterm>silent</firstterm>. 
An expression is also silent if it depends on the result of a silent subexpression. For example, the following
expressions are silent: <code>10/0</code>, <code>6 + false</code>, <code>3 + 1/0</code>, <code>4 + true = 5</code>.
</para>

<para>
Cor is a dynamically typed language. A Cor implementation does not statically
check the type correctness of an expression; instead, an expression with a type
error is simply silent when it is evaluated.
</para>

<warning>
Silent expressions can produce side effects.  For example, on encountering a
type error, Orc will print an error message to the console.  However the
expression containing the type error will not publish a value, and in this
respect it is silent.
</warning>

</section>

</section>


<section><title>Conditionals</title>

<para>
A conditional expression in Cor is of the form 
<code>if</code> E <code>then</code> F <code>else</code> G. 
Its meaning is similar to that in other languages: the value
of the expression is the value of F if and only if E evaluates to true, 
or the value of G if and only if E evaluates to false. Note that G is not
evaluated at all if E evaluates to true, and similarly F is not evaluated
at all if E evaluates to false. Thus, for example, evaluation of 
<code>if true then 2+3 else 1/0</code> does not evaluate <code>1/0</code>;
it only evaluates <code>2+3</code>.
</para>

<para>
Unlike other languages, expressions in Cor may be silent. If E is
silent, then the entire expression is silent. And if E evaluates to true 
but F is silent (or if E evaluates to false and G is silent) then the 
expression is silent.
</para>

<para>
Note that conditionals have lower precedence than any of the operators.
For example, <code>if false then 1 else 2 + 3</code> is equivalent to
<code>if false then 1 else (2 + 3)</code>, not <code>(if false then 1 else 2) + 3</code>.
</para>


<para>
<itemizedlist><title>Examples</title>
<listitem><code>if true then 4 else 5</code> evaluates to <code>4</code>.</listitem>
<listitem><code><![CDATA[if  2 < 3 && 5 < 4  then "blue" else "green"]]></code> evaluates to "green".</listitem>
<listitem><code>if  true || "fish"  then "yes" else "no"</code> is silent.</listitem>
<listitem><code>if  false || false  then 4+5 else 4+true</code> is silent.</listitem>
<listitem><code><![CDATA[if 0 < 5 then 0/5 else 5/0]]></code> evaluates to 0.</listitem>
</itemizedlist>
</para>


</section>


<section xml:id="cor.variables"><title>Variables</title>

<para>
A <firstterm>variable</firstterm> can be bound to a value. A <firstterm>declaration</firstterm> binds one or
more variables to values. The simplest form of declaration is <code>val</code>, which 
evaluates an expression and binds its result to a variable. Declarations follow the rules of 
<link xlink:href="http://en.wikipedia.org/wiki/Lexical_scope">lexical scoping</link>.
</para>

<para>
<programlisting><![CDATA[
val x = 1 + 2
val y = x + x
]]></programlisting>

These declarations bind variable <code>x</code> to 3 and variable <code>y</code> to 6.
</para>


<para>
If the expression on the right side of a <code>val</code> is silent, then the variable is not bound, but 
evaluation of other declarations and expressions continues. If an evaluated expression depends on that
variable, that expression is silent.

<programlisting language="orc-demo"><![CDATA[
val x = 1/0
val y = 4+5
if false then x else y]]></programlisting>

Evaluation of the declaration <code>val y = 4+5</code> and the expression <code>if false then x else y</code>
may continue even though <code>x</code> is not bound. The expression evaluates to 9.

</para>

</section>


<section xml:id="cor.data"><title>Data Structures</title>

<para>
Cor supports three basic data structures, <firstterm>tuples</firstterm>, <firstterm>lists</firstterm>, and <firstterm>records</firstterm>.
</para>

<section><title>Tuples</title>
<para>
A <firstterm>tuple expression</firstterm> is a comma-separated sequence of at least two 
expressions, enclosed by parentheses. Each expression is evaluated; the value of the whole 
tuple expression is a tuple containing each of these values in order. 
If any of the expressions is silent, then the whole tuple expression is silent.
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>(1+2, 7)</code> evaluates to <code>(3,7)</code>.</listitem>
<listitem><code><![CDATA[ ("true" + "false", true || false, true && false) ]]></code> evaluates to <code>("truefalse", true, false)</code>.</listitem>
<listitem><code>(2/2, 2/1, 2/0)</code> is silent.</listitem>
</itemizedlist>
</para>

</section>
 
<section><title>Lists</title>

<para>
A <firstterm>list expression</firstterm> is a comma-separated sequence of expressions enclosed by
square brackets. It may be of any length, including zero. Each expression is evaluated; the value 
of the whole list expression is a list containing each of these values in order.   
If any of the expressions is silent, then the whole list expression is silent.
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>[1,2+3] </code> evaluates to <code>[1,5]</code>.</listitem>
<listitem><code><![CDATA[ [true && true] ]]> </code> evaluates to <code>[true]</code>.</listitem>
<listitem><code>[]</code> evaluates vacuously to <code>[]</code>, the empty list.</listitem>
<listitem><code>[5, 5 + true, 5]</code> is silent.</listitem>
</itemizedlist>
</para>

<para>
There is also a concatenation (<firstterm>cons</firstterm>) operation on lists,
written F<code>:</code>G, where F and G are expressions. Its result is a new list whose first element is the 
value of F and whose remaining elements are the list value of G. The <code>:</code> operator is right associative,
so F<code>:</code>G<code>:</code>H is F<code>:(</code>G<code>:</code>H<code>)</code>.
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>(1+3):[2+5,6]</code> evaluates to <code>[4,7,6]</code>.</listitem>
<listitem><code>2:2:5:[] </code> evaluates to <code>[2,2,5]</code>.</listitem>
<listitem>Suppose <code>t</code> is bound to [3,5]. Then <code>1:t</code> evaluates to <code>[1,3,5]</code>.</listitem>
<listitem><code>2:3</code> is silent, because <code>3</code> is not a list.</listitem>
</itemizedlist>
</para>

</section>



<section><title>Records</title>

<para>
A <firstterm>record expression</firstterm> is a comma-separated sequence of elements of the form 
<emphasis>f</emphasis><code> = </code> E, enclosed by
record braces <code>{.</code> and <code>.}</code>, where each f is a field name and each E is an expression. 
Records may have any number of fields, including zero. Each expression is evaluated; the value 
of the whole record expression is a record containing an element for each field with its associated value. 
Order is irrelevant. If any of the expressions is silent, then the whole record expression is silent.
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>{. zero = 3 - 3, one = 0 + 1 .}</code> evaluates to <code>{. zero = 0, one = 1 .}</code>.</listitem>
<listitem><code>{. .}</code> evaluates to <code>{. .}</code>, the empty record.</listitem>
</itemizedlist>
</para>

Elements of records are accessed using a dot (<code>.</code>) syntax, as in most object oriented languages.
The expression <code>r.f</code> evaluates to the value associated with field <code>f</code> in record <code>r</code>.
If <code>f</code> is not present in <code>r</code>, the expression is silent.

<para>
Suppose <code>r = {. x = 0, y = 1 .}</code>
<itemizedlist><title>Examples</title>
<listitem><code>r.x</code> evaluates to <code>0</code>.</listitem>
<listitem><code>r.y</code> evaluates to <code>1</code>.</listitem>
<listitem><code>r.z</code> is silent.</listitem>
</itemizedlist>
</para>


<para>
Records can also be extended using the + operator. An expression <code>r + s</code>, where r and s are records, 
creates a new record which has all of the elements of <code>r</code> whose field names do not appear in <code>s</code>, and all
of the elements of <code>s</code>. In other words, <code>s</code> overrides <code>r</code>.
This use of <code>+</code> is left-associative and does not commute.
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>{. x = 0 .} + {. y = 1 .}</code> evaluates to <code>{. x = 0, y = 1 .}</code></listitem>
<listitem><code>{. x = 0, y = 1 .} + {. y = 2, z = 3 .}</code> evaluates to <code>{. x = 0, y = 2, z = 3 .}</code></listitem>
</itemizedlist>
</para>

</section>
 
</section>


<!--  TODO: add record patterns -->
<section xml:id="orc.language.patterns"><title>Patterns</title>

<para>
We have seen how to construct data structures. But how do we examine them, and use them? We use <firstterm>patterns</firstterm>.
</para>

<para>
A pattern is a powerful way to bind variables. When writing <code>val</code> declarations, instead of just
binding one variable, we can replace the variable name with a more complex pattern that follows the structure of the
value, and matches its components. A pattern's structure is called its <firstterm>shape</firstterm>; a
pattern may take the shape of any structured value except a record. A pattern can hierarchically match a value, going deep into its 
structure. It can also bind an entire structure to a variable.

</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>val (x,y) = (2+3,2*3)</code> binds <code>x</code> to 5 and <code>y</code> to 6.</listitem>
<listitem>
<code>val [a,b,c] = ["one", "two", "three"]</code> binds <code>a</code> to "one", 
<code>b</code> to "two", and <code>c</code> to "three".
</listitem>
<listitem>
<code>val ((a,b),c) = ((1, true), (2, false))</code> binds <code>a</code> to 1, <code>b</code> to <code>true</code>,
and <code>c</code> to <code>(2,false)</code>.
</listitem>
</itemizedlist>
</para>

<para>
Note that a pattern may fail to match a value, if it does not have the same shape as that value. In a <code>val</code>
declaration, this has the same effect as evaluating a silent expression. No variable in the pattern is bound, and
if any one of those variables is later evaluated, it is silent.
</para>

<para>
It is often useful to ignore parts of the value that are not relevant. We can use the
wildcard pattern, written <code>_</code>, to do this; it matches any shape and binds no
variables.
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>val (x,_,_) = (1,(2,2),[3,3,3])</code> binds <code>x</code> to 1.</listitem>
<listitem><code>val [[_,x],[_,y]] = [[1,3],[2,4]]</code> binds <code>x</code> to 3 and <code>y</code> to 4.</listitem>
</itemizedlist>
</para>

</section>

<!--  TODO: link to advanced features, such as curried definition and guards -->
<section xml:id="cor.functions"><title>Functions</title>

<para>
Like most other programming languages, Cor provides the capability to define <firstterm>functions</firstterm>,
which are expressions that have a defined name, and have some number of parameters. Functions are declared 
using the keyword <code>def</code>, in the following way.

<programlisting><![CDATA[
def add(x,y) = x+y
]]></programlisting>

The expression on the right of the <code>=</code> is called the <firstterm>body</firstterm> of the function.
</para>

<para>
After defining the function, we can <firstterm>call</firstterm> it. A call looks just like the left side of
the declaration except that the variable names (the <firstterm>formal parameters</firstterm>) have been 
replaced by expressions (the <firstterm>actual parameters</firstterm>). 
</para>

<para>
To evaluate a call, we treat it as a sequence of <code>val</code> declarations associating the formal
parameters with the actual parameters, followed by the body of the function. 

<programlisting><![CDATA[
{- Evaluation of add(1+2,3+4) -}

val x = 1+2
val y = 3+4
x+y

{-
OUTPUT:
10
-}
]]></programlisting>
</para>

<para>
<itemizedlist><title>Examples</title>
<listitem><code>add(10,10*10)</code> evaluates to <code>110</code>.</listitem>
<listitem><code>add(add(5,3),5)</code> evaluates to <code>13</code>.</listitem>
</itemizedlist>
</para>

<para>
Notice that the evaluation strategy of functions allows a call to proceed even if some of the actual
parameters are silent, so long as the values of those actual parameters are not used in the evaluation
of the body.

<programlisting language="orc-demo"><![CDATA[
def cond(b,x,y) = if b then x else y
cond(true, 3, 5/0)
]]></programlisting>

This evaluates to <code>3</code> even though <code>5/0</code> is silent, because <code>y</code> is not
needed.

</para>


<para>
A function definition or call may have zero arguments, in which case we write <code>()</code> for the arguments.

<programlisting><![CDATA[
def Zero() = 0
]]></programlisting>
</para>


<section><title>Recursion</title>

<para>
Functions can be recursive; that is, the name of a function may be used in its own body.

<programlisting><![CDATA[
def sumto(n) = if n < 1 then 0 else n + sumto(n-1)
]]></programlisting>

Then, <code>sumto(5)</code> evaluates to 15.
</para>  

<para>
Mutual recursion is also supported.

<programlisting><![CDATA[
def even(n) = 
  if (n > 0) then odd(n-1)
  else if (n < 0) then odd(n+1)
  else true
def odd(n) = 
  if (n > 0) then even(n-1)
  else if (n < 0) then even(n+1)
  else false
]]></programlisting>

There is no special keyword for mutual recursion; any contiguous sequence of function declarations is assumed to be 
mutually recursive.
</para>

</section>

<section xml:id="cor.closures"><title>Closures</title>

<para>
Functions are actually values, just like any other value. Defining a function creates a special value called a 
<firstterm>closure</firstterm>; the name of the function is a variable and its bound value is the closure. Thus, 
a closure can be put into a data structure, or bound to some other variable, just like any other value.

<programlisting><![CDATA[
def a(x) = x-3
def b(y) = y*4
val funs = (a,b)
]]></programlisting>
</para>

<para>
Like any other value, a closure can be passed as an argument to another function. This means that Cor
supports <emphasis>higher-order</emphasis> functions.

<programlisting><![CDATA[
def onetwosum(f) = f(1) + f(2)
def triple(x) = x * 3
]]></programlisting>

Then, <code>onetwosum(triple)</code> is <code>triple(1) + triple(2)</code>, which is <code>1 * 3 + 2 * 3</code> which evaluates to <code>9</code>.

</para>

<para>
Since all declarations (including function declarations) in Cor are lexically scoped, these closures are
<emphasis>lexical closures</emphasis>. This means that when a closure is created, if the body of the
function contains any variables other than the formal parameters, the bindings for those variables are
stored in the closure. Then, when the closure is called, the evaluation of the function body uses those 
stored variable bindings.  
</para>


</section>

<section xml:id="orc.language.lambda"><title>Lambda</title>

<para>
Sometimes one would like to create a closure directly, without bothering to give it a name. 
There is a special keyword <code>lambda</code> for this purpose. By writing a function
definition without the keyword <code>def</code> and replacing the function name with
the keyword <code>lambda</code>, that definition becomes an expression which evaluates to a closure. 

<programlisting language="orc-demo"><![CDATA[
def onetwosum(f) = f(1) + f(2)

onetwosum( lambda(x) = x * 3 )
{- 
  identical to:
  def triple(x) = x * 3
  onetwosum(triple)
-}]]></programlisting>

Then, <code>onetwosum( lambda(x) = x * 3 )</code> evaluates to 9. 

</para>

<para>
Since a function defined using <code>lambda</code> has no name, it is not possible to define 
a recursive function in this way. Only <code>def</code> can create a recursive function.
</para>

</section>


<section xml:id="orc.language.clauses"><title>Clauses</title>

<para>
The combination of functions and pattern matching offers a powerful capability: 
<firstterm>clausal</firstterm> definition of functions. We can define expressions which execute 
different code depending on the structure of their arguments. 
</para>


<para>
Here's an example.

<programlisting><![CDATA[
def sum([]) = 0
def sum(h:t) = h + sum(t)
]]></programlisting>

<code>sum(l)</code> publishes the sum of the numbers in the list <code>l</code>. It has two clauses: 
one which matches the empty list, and one which matches any nonempty list. If its argument is an empty 
list, it returns 0, the appropriate sum for an empty list. If the argument is a nonempty list, it adds 
the first element of that list to the sum of all of the other elements. In this way, it recursively finds 
the sum of the list.
</para>

<para>
A function may have multiple clauses, each of which has a sequence of patterns to match each argument, 
and a body expression. Naturally, all clauses of a function must have the same number of arguments. Any 
contiguous sequence of definitions with the same name and different arguments is interpreted as a clausal 
definition, where each individual declaration is a clause of the larger function. 
</para>

<para>
When the function is called, the clauses are tried in the order in which they appear until a match is found. 
If no clause matches, the call remains silent.
</para>

<para>
We allow a new form of pattern which is very useful in clausal definition of functions: a constant pattern.
A constant pattern is a match only for the same constant value. We can use this to define the "base case"
of a recursive function in a straightforward way.

<programlisting><![CDATA[
{- Fibonacci numbers -}
def fib(0) = 1
def fib(1) = 1
def fib(n) = if (n < 0) then 0 else fib(n-1) + fib(n-2)
]]></programlisting>

This definition of the Fibonacci function is straightforward, but slow, due to the repeated work in recursive
calls to <code>fib</code>. We can define a linear-time version, again with the help of pattern matching:

<programlisting><![CDATA[
{- Alternate definition of the Fibonacci function -}

{- A helper function: find the pair (Fibonacci(n-1), Fibonacci(n)) -}
def H(0) = (1,1)
def H(n) = 
  val (x,y) = H(n-1)
  (y,x+y)

def fib(n) = 
  if (n < 0) then 0 
  else (
    val (x,_) = H(n) 
    x
  )
]]></programlisting>
</para>

<para>
As a more complex example of matching, consider the following function which takes
a list argument and returns a new list containing only the first <code>n</code> 
elements of the argument list. 

<programlisting><![CDATA[
def take(0,_) = []
def take(n,h:t) = if (n > 0) then h:(take(n-1,t)) else []
]]></programlisting>
</para>


<para>
Mutual recursion and clausal definitions are allowed to occur together. Here are two functions,
<code>stutter</code> and <code>mutter</code>, which are each mutually recursive, and each have
multiple clauses. <code>stutter(l)</code> returns <code>l</code> with every odd element repeated.
<code>mutter(l)</code> returns <code>l</code> with every even element repeated.

<programlisting><![CDATA[
def stutter([]) = []
def stutter(h:t) = h:h:mutter(t)
def mutter([]) = []
def mutter(h:t) = h:stutter(t)
]]></programlisting>

<code>stutter([1,2,3])</code> evaluates to <code>[1,1,2,3,3]</code>.
</para>

<para>
Clauses of mutually recursive functions may also be interleaved, to make
them easier to read.

<programlisting><![CDATA[
def even(0) = true
def odd(0) = false
def even(n) = odd(if n > 0 then n-1 else n+1)
def odd(n) = even(if n > 0 then n-1 else n+1)
]]></programlisting>

</para>

</section>

</section>

<section><title>Comments</title>
<para>
Cor has two kinds of comments.   

</para>

<para>
A line which begins with two dashes (<code>--</code>), preceded only by whitespace, is a single line comment.
The region from the two dashes to the next encountered newline, inclusive, is ignored.  
<programlisting><![CDATA[
-- This is a single line comment.
	 -- This is also a single line comment.
]]></programlisting>
</para>

<para>
Multi-line comments are enclosed by matching braces of the form <code><![CDATA[{- -}]]></code>. 
Multi-line comments may be nested. They may appear anywhere, even in the middle of an expression.

<programlisting><![CDATA[
{- 
   This is a
   multiline comment.
-}
   
{- Multiline comments {- can be nested -} -}

{- They may appear anywhere, -} 
1 + {- even in the middle of an expression. -} 2 + 3
]]></programlisting>

</para>

</section>

</chapter>
