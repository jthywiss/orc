<?xml version="1.0" encoding="UTF-8"?>
<!-- ug.introduction.complex.xml - DocBook source for an Orc user guide section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->
<section xml:id="ug.introduction.complex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Complex Expressions</title>

<para>
Complex expressions recursively contain other expressions. 
They may be formed in a number of ways: using one of Orc's four combinators,
adding a declaration, adding a conditional expression, or using an expression 
as an operand or site call argument.
</para>

<section xml:id="ug.introduction.complex.combinators">
<title>Combinators</title>

The concurrency combinators are one of the two fundamental concepts of Orc programming,
the other being sites. They provide the core orchestration capabilities of Orc: parallel
execution, sequential execution, blocking on future values, terminating a computation,
and trying an alternative if some computation halts.

	<section xml:id="ug.introduction.complex.combinators.parallel">
	<title>Parallel</title>
	
	<para>
	Orc's simplest combinator is <code>|</code>, the parallel combinator. Execution of
	the complex expression F <code>|</code> G, where F and G are Orc expressions, executes 
	F and G concurrently. Whenever a value is published during the execution of F or G,
	the execution of F <code>|</code> G publishes that value. 
	</para>
	
	<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish 1 and 2 in parallel -}  

1 | 1+1

{-
OUTPUT:PERMUTABLE
1
2
-}
]]></programlisting>
  </para> 
	
	<para>
	The brackets <code>{- -}</code> enclose <firstterm>comments</firstterm>,
	which are present only for documentation and are ignored by the compiler.
	</para>
	
	</section>
	
	<section xml:id="ug.introduction.complex.combinators.sequential">
	<title>Sequential</title>
	
	<para>
	Now that we have expressions which publish multiple values, what can we do with those
	publications? The sequential combinator, written F<code><![CDATA[ >x> ]]></code>G, 
	combines the expression F, which may publish some values, with another expression G, 
	which will use the values as they are published; the <firstterm>variable</firstterm>
	<code>x</code> transmits the values from F to G.
	</para>
	
	<para>
	The execution of F <code>&gt;x&gt;</code> G starts by executing F. Whenever F publishes a value, 
	a new execution of G begins in parallel with F (and with other executions of G). In that
	instance of G, variable <code>x</code> is bound to the value published by F. Values published by the executions
	of G are published by the whole expression, but the values published by F are not published
	by the whole expression; they are consumed by the variable binding.
	</para>
	
	<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish 1 and 2 in parallel -}
  
(0 | 1) >n> n+1

{-
OUTPUT:PERMUTABLE
1
2
-}
]]></programlisting>
</para>  

<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish 3 and 4 in parallel -}
  
2 >n> (n+1 | n+2)

{-
OUTPUT:PERMUTABLE
3
4
-}
]]></programlisting>
</para>

<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish 5 -}
  
2 >x> 3 >y> x+y

{-
OUTPUT:
5
-}
]]></programlisting>
</para>
	
	<para>
	The sequential combinator may also be written without a variable, as in F <code>&gt;&gt;</code> G.
	This has the same behavior, except that no variable name is given to the values published by F.
	When F publishes only one value, this is similar to a sequential execution in an imperative
	language. For example, suppose we want to print three messages in sequence:
	</para>
	
	<para>
<programlisting language="orc-demo"><![CDATA[
{- Print three messages in sequence -}

Println("Yes") >>
Println("We") >>
Println("Can") >>
stop

{-
OUTPUT:PERMUTABLE
Yes
We
Can
-} 
]]></programlisting>
</para>

  <para>
  The simple expression <code>stop</code> does nothing and halts immediately.
  In conjunction with <code>&gt;&gt;</code>, it can be used to ignore unneeded publications,
  such as the <code>signal</code> that would be published by <code>Println("Can")</code>.
  </para>
	
	</section>
	
	<section xml:id="ug.introduction.complex.combinators.pruning">
	<title>Pruning</title>
	
	<para>
	The pruning combinator, written F<code> &lt;x&lt; </code>G, allows us to block 
	a computation waiting for a result, or terminate a computation. The execution of 
	F<code> &lt;x&lt; </code>G starts by executing F and G in parallel. Whenever
	F publishes a value, that value is published by the entire execution. When G publishes
	its first value, that value is bound to x in F, and then the execution of G is immediately 
	<firstterm>killed</firstterm>. A killed expression cannot make any more site calls or 
	publish any values.
	</para>
	
	<para>
	During the execution of F, any part of the execution that depends on <code>x</code> 
	will be blocked until <code>x</code> is bound. 
	If G never publishes a value, parts of F may be blocked forever. 
	</para>
	
	<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish either 5 or 6, but not both -}

x+2 <x< (3 | 4)

{-
OUTPUT:
5
-}
{-
OUTPUT:
6
-}
]]></programlisting>
	</para>  
	
	<para>
	Though a terminated execution may not make any new calls, the calls
	that it has already made will continue normally; their responses are simply
	ignored. This may have surprising consequences when a call has side effects,
	as in the following example.

<programlisting language="orc-demo"><![CDATA[
{- This example might actually print both "uh" and "oh" to the
   console, regardless of which call responds first. -}

stop <x< Println("uh") | Println("oh")

{-
OUTPUT:PERMUTABLE
uh
oh
-}
{-
OUTPUT:
uh
-}
{-
OUTPUT:
oh
-}
]]></programlisting>

	Both of the <code>Println</code> calls could be initiated before either one of
	them publishes a value and terminates the expression. Once the expression
	is terminated, no new calls occur, but the other <code>Println</code> call
	still proceeds and still has the effect of printing its message to the
	console.
	</para>
	
	</section>
	
	<section xml:id="ug.introduction.complex.combinators.otherwise">
	<title>Otherwise</title>
	
	<para>
	Orc's fourth concurrency combinator, the <firstterm>otherwise</firstterm> combinator,
	is written F<code> ; </code>G. The execution of F<code> ; </code> G proceeds as follows.
	First, F is executed. If F halts, and has not published any values, 
	then G executes. If F did publish one or more values, then G is ignored.
	</para>
	
	</section>

</section>


<section xml:id="ug.introduction.complex.val">
<title>Val</title>

<para>
An expression may be preceded by one or more <firstterm>declarations</firstterm>.
Declarations are used to bind values to be used in that expression (or <firstterm>scope</firstterm>).
</para>

<para>
The declaration <code>val x = </code>G, followed by expression F, executes G,
and binds its first publication to <code>x</code>, to be used in F.
</para>

<para>
This is actually just a different way of writing the expression F<code> &lt;x&lt; </code>G.
Thus, <code>val</code> shares all of the behavior of the pruning combinator: F executes
in parallel with G, uses of <code>x</code> block until G has published, and when G
publishes, it is killed. In fact, the <code>val</code> form is used much more often than the
<code>&lt;x&lt;</code> form, since it is usually easier to read.
</para>

</section>


<section xml:id="ug.introduction.complex.conditionals">
<title>Conditional Expressions</title>

<para>
Orc has a conditional expression, written <code>if</code> E <code>then</code> F <code>else</code> G.
The <code>else</code> branch is required. Execution of <code>if</code> E <code>then</code> F <code>else</code> G
first executes E. If E publishes <code>true</code>, E is terminated and F executes. If E publishes
<code>false</code>, E is terminated and G executes.
</para>

</section>


<section xml:id="ug.introduction.complex.nesting">
<title>Nested Expressions</title>

<para>
The execution of an Orc expression may publish many values. What if we want to use such an expression 
in a context where only one value is expected? For example, what does <code>2 + (3 | 4)</code> 
publish? 
</para>

<para>
Whenever an Orc expression appears in such a context, it executes until it publishes its first value, 
and then it is terminated. The published value is then used in the context. This allows any expression to
be used as an operand of an operator expression or an argument to a site call. 
</para>

<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish either 5 or 6 -}

2 + (3 | 4)

{-
OUTPUT:
5
-}
{-
OUTPUT:
6
-}
]]></programlisting>
</para>

<para>
<programlisting language="orc-demo"><![CDATA[
{- Publish exactly one of 0, 1, 2 or 3 -}

(0 | 2) + (0 | 1)

{-
OUTPUT:
0
-}
{-
OUTPUT:
1
-}
{-
OUTPUT:
2
-}
{-
OUTPUT:
3
-}
]]></programlisting>
</para>

<para>
To be precise, whenever an Orc expression appears in such a context, it is treated as if it were 
on the right side of a pruning combinator, using a fresh variable name to fill in the hole. 
This is called <olink targetdoc="ref.concepts.deflate" targetptr="ref.concepts.deflate">deflation</olink>.
</para>



</section>


</section>
