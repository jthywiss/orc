<?xml version="1.0"?>
<!--
  - Original Author:  Nathan A. Good <mail@nathanagood.com>
  - Excerpted from "Build DocBook XML in Eclipse"
  - at http://www.ibm.com/developerworks/xml/library/os-eclipse-docbook/index.html
  -
  -->

<!--
  - Known Issues:
	- (1) Watch the destination directories.  If you change the order of target calls, you
	- might have to change them, since they are relative.
	- (2) Ant will only build on files updated since the last build, so I added a hack for the rm
-->

<project name="docbook-src" default="all">

	<description>
		This Ant build.xml file is used to transform DocBook XML to various other formats.
		We use it to build all the Orc documentation (User Guide and Reference Manual).
	</description>

	<!--
      - Configure basic properties that will be used in the file.
      -->
	<property name="docbook.xsl.dir" value="docbook-xsl" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="xslthl.config" value="file://${user.dir}/${src.dir}/highlighting/xslthl-config.xml" />
	<property name="xalan.lib.dir" value="lib" />
	<property name="database.olink.dir" value="${src.dir}" />

	<!--
      - Sets up the classpath for the Xalan and Xerces implementations
      - that are to be used in this script, since the versions that ship
      - with Ant may be out of date.
      -->
	<path id="xalan.classpath">
		<fileset dir="${xalan.lib.dir}" id="xalan.fileset">
			<include name="xalan.jar" />
			<include name="xercesImpl.jar" />
			<include name="xslthl-2.0.0.jar" />
		</fileset>
	</path>

	<!--
	  - target:  all
	  -->
	<target name="all" depends="olinks,build-pdf,build-html-chunk,build-html-single,rm-build-html-chunk,rm-build-html-single" 
		description="Build all documentation" />
	
	<!--
      - target:  usage
      -->
	<target name="usage" description="Prints the Ant build.xml usage">
		<echo message="Use -projecthelp to get a list of the available targets." />
	</target>

	<!--
      - target:  clean
      -->
	<target name="clean" description="Cleans up generated files.">
		<delete dir="${build.dir}" />
	</target>
	
	<!--
	  - target:  test
	  -->
	<target name="test" depends="clean,olinks,rm-build-html-chunk" description="Test build for modifications.">
		<echo message="Test build complete" />
	</target>
	
	<!--
	  - target:  olinks
	  -->
	<target name="olinks" depends="xinclude" description="Builds the olink databases for mutual linking between documents">
		<echo message="Creating olink databases..."/>
		<!-- Create database of links for user guide -->
		<xslt style="${src.dir}/xsl/orc.xsl"
				basedir="${src.dir}" destdir="${build.dir}/html"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="root.xml" />
			<classpath refid="xalan.classpath" />
			<param name="collect.xref.targets" expression="only" />
			<param name="targets.filename" expression="ugtargets.db"/>
			<param name="user.dir" expression="${user.dir}" />
		</xslt>
		<!-- Create database of links for reference manual -->
		<xslt style="${src.dir}/xsl/orc.xsl" 
				basedir="${src.dir}/refmanual" destdir="${build.dir}/html/refmanual"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="root_ref.xml" />
			<classpath refid="xalan.classpath" />
			<param name="collect.xref.targets" expression="only" />
			<param name="targets.filename" expression="rmtargets.db"/>
			<param name="user.dir" expression="${user.dir}" />
		</xslt>
		<!-- Create database of links for ref.combinators.otherwise (section) -->
		<!--
		<xslt style="${src.dir}/xsl/orc.xsl" 
				basedir="${src.dir}/refmanual/content" destdir="${build.dir}/html/refmanual"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="combinators_otherwise.xml" />
			<classpath refid="xalan.classpath" />
			<param name="collect.xref.targets" expression="only" />
			<param name="targets.filename" expression="ref.combinators.otherwise.db"/>
			<param name="user.dir" expression="${user.dir}" />
		</xslt>
		-->

	</target>
		
	<!--
      - target:  depends
      -->
	<target name="depends">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/html" />
		<mkdir dir="${build.dir}/pdf" />
		<mkdir dir="${build.dir}/fo" />
		<mkdir dir="${build.dir}/pdf/refmanual" />
	</target>
	
	<!--
      - target:  xinclude
      -->
	<target name="xinclude" depends="depends">
		<taskdef name="xinclude" classname="gr.abiss.xcluder.XercesXcluder">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<xinclude in="${src.dir}/root.xml" out="${src.dir}/all.xml" />
	</target>

	<!--
      - target:  xinclude-ref
      -->
	<target name="xinclude-ref" depends="depends">
		<taskdef name="xinclude" classname="gr.abiss.xcluder.XercesXcluder">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<xinclude in="${src.dir}/refmanual/root_ref.xml" out="${src.dir}/all.xml" />
	</target>
	
	<!--
      - target:  mod-xinclude
      -->
	<target name="mod-xinclude" depends="depends">
		<taskdef name="xinclude" classname="gr.abiss.xcluder.XercesXcluder">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<xinclude in="${src.dir}/root_mod.xml" out="${src.dir}/all.xml" />
	</target>

	<!--
      - target:  build-html-chunk
      -->
	<target name="build-html-chunk" depends="xinclude" description="Generates chunked User Guide HTML doc">
		<xslt style="${src.dir}/xsl/html-chunk.xsl" extension=".html" 
				basedir="${src.dir}" destdir="${build.dir}/html"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="all.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="chunk.quietly" expression="1"/>
			
			<param name="target.database.document" expression="../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="root"/> 
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<!-- Delete this because it confuses build-html-single otherwise -->
		<delete file="${build.dir}/html/all.html" />
		<!-- Copy the stylesheet and navigational images -->
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
		<copy todir="${build.dir}/html/refmanual/images">
			<fileset dir="src/xsl/images"/>
		</copy>
	</target>
		
	<!--
      - target:  rm-build-html-chunk
      -->
	<target name="rm-build-html-chunk" depends="xinclude" description="Generates chunked Reference Manual HTML doc">
		<!-- Hack to make sure the ref manual builds every time -->
		<!--<copy file="${src.dir}/refmanual/root_ref.xml" tofile="${src.dir}/refmanual/refmanual_chunk.xml"/>-->
		<!-- Hack to make sure the ref manual builds every time -->
		<copy file="${src.dir}/refmanual/root_ref.xml" tofile="${src.dir}/refmanual/refmanual.xml"/>
		<xslt style="${src.dir}/xsl/html-chunk.xsl" extension=".html" 
				basedir="${src.dir}/refmanual" destdir="${build.dir}/html/refmanual"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="refmanual.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="0"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="2"/>
			<param name="chunk.first.sections" expression="1"/>
			<param name="chapter.autolabel" expression="1"/>
			<param name="generate.toc" expression="
				book      toc
				chapter	  toc
			"/>
			<param name="toc.section.depth" expression="1" />
			<param name="header.rule" expression="0"/>
			<param name="use.id.as.filename" expression="1" />
			
			<param name="chunk.quietly" expression="1"/>
			<param name="chunk.section.depth" expression="1"/>
			<param name="suppress.footer.navigation" expression="1"/>
			<param name="navig.graphics" expression="1"/>
			
			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="refmanual"/> 
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<!-- Delete this because it confuses rm-build-html-single otherwise -->
		<delete file="${build.dir}/html/refmanual/refmanual.html" />
		<!-- Copy the stylesheet and navigational images -->
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
		<copy todir="${build.dir}/html/refmanual/images">
			<fileset dir="src/xsl/images"/>
		</copy>
	</target>
	
	<!--
      - target:  build-html-single
      -->
	<target name="build-html-single" depends="xinclude" description="Generates single User Guide HTML doc">
		<xslt style="${src.dir}/xsl/html-single.xsl" extension=".html" 
				basedir="${src.dir}" destdir="${build.dir}/html"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="all.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			
			<param name="target.database.document" expression="../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="root"/> 
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<copy todir="${build.dir}/html">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
	
	<!--
      - target:  mod-build-html-single
      -->
	<target name="mod-build-html-single" depends="mod-xinclude" description="Generates single User Guide HTML doc">
		<xslt style="${src.dir}/xsl/html-single.xsl" extension=".html" 
				basedir="${src.dir}" destdir="${build.dir}/html"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="all.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			
			<param name="target.database.document" expression="../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="root"/> 
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<copy todir="${build.dir}/html">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>

	<!--
	  - target:  rm-build-html-single
	  -->
	<target name="rm-build-html-single" depends="xinclude" description="Generates single Reference Manual HTML doc">
		<!-- Hack to make sure the ref manual builds every time -->
		<copy file="${src.dir}/refmanual/root_ref.xml" tofile="${src.dir}/refmanual/refmanual.xml"/>
		<xslt style="${src.dir}/xsl/html-single.xsl" extension=".html" 
				basedir="${src.dir}/refmanual" destdir="${build.dir}/html/refmanual"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
			<include name="refmanual.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="0"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="chapter.autolabel" expression="0"/>
			
			<param name="target.database.document" expression="file://${user.dir}/${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="refmanual"/>
			<param name="generate.toc" expression="book toc"/>
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
	
	<!--
	    - target:  build-pdf
	    - description:  Iterates through a directory and transforms
	    -     .xml files into .fo files which can then be turned into DocBook XML
	    -     files.
	    -->
	<target name="build-pdf" depends="xinclude" 
		    description="Generates PDF files from DocBook XML">
	    <xslt style="${src.dir}/xsl/fo.xsl" extension=".fo" 
			basedir="${src.dir}" destdir="${build.dir}/fo"
			processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
	        <classpath refid="xalan.classpath" />
	    	<param name="section.autolabel" expression="1"/>
	    	<param name="section.label.includes.component.label" expression="1"/>
	    	<param name="section.autolabel.max.depth" expression="8"/>
		<!-- default to indented layout to match HTML dl -->
	    	<param name="variablelist.as.blocks" expression="1"/>
		<!-- when table layout is used, default to 12em width for terms -->
		<param name="variablelist.max.termlength" expression="12"/>
	        <include name="all.xml" />
	        	
		<param name="highlight.source" expression="1"/>
		<param name="highlight.default.language" expression="orc"/>
	    	<param name="highlight.xslthl.config" expression="${xslthl.config}" />
	    </xslt>

	    <property name="fop.home" value="lib/fop" />

	    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
	        <classpath>
	            <fileset dir="${fop.home}/lib">
	                <include name="*.jar" />
	            </fileset>
	            <fileset dir="${fop.home}/build">
	                <include name="fop.jar" />
	                <include name="fop-hyph.jar" />
	            </fileset>
	        </classpath>
	    </taskdef>

	    <fop format="application/pdf" fofile="${build.dir}/fo/all.fo" 
	        outfile="${build.dir}/pdf/all.pdf" />
	</target>
	
	<!--
	    - target:  rm-build-pdf
	    - description:  Iterates through a directory and transforms
	    -     .xml files into .fo files which can then be turned into DocBook XML
	    -     files.  Used for the reference manual.
	    -->
	<target name="rm-build-pdf" depends="xinclude" 
		    description="Generates PDF files from DocBook XML for the reference manual">
	    <xslt style="${src.dir}/xsl/fo.xsl" extension=".fo" 
			basedir="${src.dir}/refmanual" destdir="${build.dir}/fo/refmanual"
			processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
	        <classpath refid="xalan.classpath" />
	    	<param name="section.autolabel" expression="1"/>
	    	<param name="section.label.includes.component.label" expression="1"/>
	    	<param name="section.autolabel.max.depth" expression="8"/>
		<!-- default to indented layout to match HTML dl -->
	    	<param name="variablelist.as.blocks" expression="1"/>
		<!-- when table layout is used, default to 12em width for terms -->
		<param name="variablelist.max.termlength" expression="12"/>
	        <include name="root_ref.xml" />
	        
		<param name="target.database.document" expression="file://${user.dir}/${database.olink.dir}/olinkdb.xml"/>	
		<param name="current.docid" expression="refmanual"/>
			
		<param name="highlight.source" expression="1"/>
		<param name="highlight.default.language" expression="orc"/>
	    	<param name="highlight.xslthl.config" expression="${xslthl.config}" />
	    </xslt>

	    <property name="fop.home" value="lib/fop" />

	    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
	        <classpath>
	            <fileset dir="${fop.home}/lib">
	                <include name="*.jar" />
	            </fileset>
	            <fileset dir="${fop.home}/build">
	                <include name="fop.jar" />
	                <include name="fop-hyph.jar" />
	            </fileset>
	        </classpath>
	    </taskdef>

	    <fop format="application/pdf" fofile="${build.dir}/fo/refmanual/root_ref.fo" 
	        outfile="${build.dir}/pdf/refmanual/root_ref.pdf" />
	</target>
	
</project>
	
	<!-- USE THE CODE BELOW FOR XSLTPROC DETECTION AND APPLICATION -->
	<!-- NOTE:  Will kill syntax highlighting, and runnable code <> enables xpointer() scheme
	            Also, because of Ant comment rules, the double dashes in the xsltproc commands
				below were changed to single dashes.  -->
		
  <!-- The following code is based on Dawid Weiss' code at
	http://www.cs.put.poznan.pl/dweiss/xml/projects/ant-docbook-styler/index.xml?lang=en -->
  <!-- ########################################################################## -->
  <!-- ### {{{ XSLT processor recognition. If xsltproc[.exe] is found in path,    -->
  <!-- ### it will be used for stylesheet processing (much faster than Xalan, can do olinks)     -->
  <!-- ########################################################################## -->
  
	<!--
      - target:  xsltprocessor
      -->
	<!--
	<target name="xsltprocessor">
    <property environment="env"/>
	-->
		
	<!-- If they are using Windows -->
	<!--
    <condition  property="executable.file.extension"
                value=".exe">
            <os family="windows"/>
    </condition>
	-->
		
	<!-- If they are using Unix -->
	<!--
    <condition  property="executable.file.extension"
                value="">
            <os family="unix"/>
    </condition>
	-->
		
	<!-- If they are using Mac (this may not be necessary, need to test) -->
	<!--
    <condition  property="executable.file.extension"
                value="">
            <os family="mac"/>
    </condition>
    
    <condition  property="tmp:xsltproc.available"
                value="xsltproc${executable.file.extension}">
        <or>
            <and>
                <os family="windows"/>
                <available file="xsltproc${executable.file.extension}" filepath="${env.Path}" />
            </and>
            <and>
                <os family="unix"/>
                <available file="xsltproc${executable.file.extension}" filepath="${env.PATH}" />
            </and>
				<and>
                <os family="mac"/>
                <available file="xsltproc${executable.file.extension}" filepath="${env.PATH}" />
            </and>
        </or>
    </condition>

  <antcall target="displayXsltProcessorInfo" />
  <antcall target="displayXsltProcessorNotFound" />
		
  </target>
	-->
	
  <!--
    - target:  displayXsltProcessorInfo
    -->
	<!--
	<target name="displayXsltProcessorInfo"
          if="tmp:xsltproc.available"
          unless="disable.xsltproc">
    <echo>
#####################################################
XSLTProc has been found in your path and will be used
for processing XSLT transformations. If you experience
any problems, you can switch to Java's default XSLT 
processor by defining 'disable.xsltproc' property.
#####################################################

    </echo>
  </target>
	-->
	
	<!--
    - target:  displayXsltProcessorNotFound
    -->
	<!--
	<target name="displayXsltProcessorNotFound"
          unless="tmp:xsltproc.available">
	<fail message="
#####################################################
XSLTProc has not been found installed on your system.
The Orc documentation cannot be properly built.
Please install xsltproc and make sure it is in your
system environment path.
#####################################################
		"></fail>
  </target>
	-->

	<!--
	<target name="olinks" description="Builds the olink databases for mutual linking">
		<echo message="Creating olink databases..." />
		<property environment="env"/>
	-->
		 <!-- Create database of links in user guide -->
		<!--
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="-stringparam collect.xref.targets 'only'"/>
			 <arg line="-stringparam targets.filename '${build.dir}/html/ugtargets.db'"/>
			 <arg line="-stringparam user.dir '${user.dir}'"/>
			 <arg value="${src.dir}/xsl/orc.xsl"/>
			 <arg value="${src.dir}/root.xml"/>
		 </exec>
		-->
		<!-- Create database of links in reference manual -->
		<!--
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="-stringparam collect.xref.targets 'only'"/>
			 <arg line="-stringparam targets.filename '${build.dir}/html/refmanual/rmtargets.db'"/>
			 <arg line="-stringparam user.dir '${user.dir}'"/>
			 <arg value="${src.dir}/xsl/orc.xsl"/>
			 <arg value="${src.dir}/refmanual/refmanual.xml"/>
		 </exec>
		</target>
		-->


	<!--
	<target name="rm-build-html-chunk" depends="xinclude" 
		description="Generates chunked HTML files for reference manual"
		if="tmp:xsltproc.available">
		<property environment="env"/>
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="-output '${build.dir}/html/refmanual/refmanual.html'"/>
			 <arg line="-stringparam target.database.document '../../${database.olink.dir}/olinkdb.xml'"/>
			 <arg line="-stringparam current.docid 'refmanual'"/>
			 <arg line="-param chapter.autolabel 0" />
			 <arg line="-param orc.demo 1"/>
			 <arg line="-stringparam generate.toc 'book toc'"/>
			 <arg line="-param section.label.includes.component.label 1"/>
			 <arg line="-param section.autolabel.max.depth 8"/>
			 <arg line="-param chunk.quietly 1"/>
			 <arg line="-param chunk.section.depth 0"/>
			 <arg line="-param highlight.source 1"/>
			 <arg line="-stringparam highlight.default.language 'orc'"/>
			 <arg line="-stringparam highlight.xslthl.config '${xslthl.config}'"/>
			 <arg line="-xinclude"/>
			 <arg value="${src.dir}/xsl/html-chunk.xsl"/>
			 <arg value="${src.dir}/refmanual/refmanual.xml"/>
		 </exec>
		<delete file="${build.dir}/html/all.html" />
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
	-->

<!--
	<target name="build-html-single" depends="xinclude" 
		description="Generates HTML files for user guide"
		if="tmp:xsltproc.available">
		<property environment="env"/>
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="-output '${build.dir}/html/all.html'"/>
			 <arg line="-stringparam target.database.document '../${database.olink.dir}/olinkdb.xml'"/>
			 <arg line="-stringparam current.docid 'root'"/>
			 <arg line="-param orc.demo 1"/>
			 <arg line="-param section.autolabel 1"/>
			 <arg line="-param section.label.includes.component.label 1"/>
			 <arg line="-param section.autolabel.max.depth 8"/>
			 <arg line="-param highlight.source 1"/>
			 <arg line="-stringparam highlight.default.language 'orc'"/>
			 <arg line="-stringparam highlight.xslthl.config '${xslthl.config}'"/>
			 <arg line="-xinclude"/>
			 <arg value="${src.dir}/xsl/html-single.xsl"/>
			 <arg value="${src.dir}/all.xml"/>
		 </exec>
		<copy todir="${build.dir}/html">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
		-->

<!--
	<target name="rm-build-html-single" depends="xinclude" 
		description="Generates HTML files for reference manual"
		if="tmp:xsltproc.available">
		<property environment="env"/>
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="-output '${build.dir}/html/refmanual/refmanual.html'"/>
			 <arg line="-stringparam target.database.document '../../${database.olink.dir}/olinkdb.xml'"/>
			 <arg line="-stringparam current.docid 'refmanual'"/>
			 <arg line="-param chapter.autolabel 0" />
			 <arg line="-param orc.demo 1"/>
			 <arg line="-stringparam generate.toc 'book toc'"/>
			 <arg line="-param section.label.includes.component.label 1"/>
			 <arg line="-param section.autolabel.max.depth 8"/>
			 <arg line="-param highlight.source 1"/>
			 <arg line="-stringparam highlight.default.language 'orc'"/>
			 <arg line="-stringparam highlight.xslthl.config '${xslthl.config}'"/>
			 <arg line="-xinclude"/>
			 <arg value="${src.dir}/xsl/html-single.xsl"/>
			 <arg value="${src.dir}/refmanual/refmanual.xml"/>
		 </exec>
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
	-->