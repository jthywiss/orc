<?xml version="1.0" encoding="UTF-8"?>

<!-- build.xml - Ant buildfile (tasks for project build)
	 Project OrcDocs

	 $Id$

	 Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

	 Use and redistribution of this file is governed by the license terms in
	 the LICENSE file found in the project's top-level directory and also found at
	 URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<project name="orcdocs" default="all" basedir=".">
	<description>
		Ant build file for the Orc documentation (User Guide and Reference Manual).
	</description>

	<property file="build.properties"/>
	<!--
	  - Configure basic properties that will be used in the file.
	  -->
	<property name="docbook.xsl.dir" value="docbook-xsl"/>
	<property name="build.dir" value="build"/>
	<property name="src.dir" value="src"/>
	<property name="xslthl.config" value="file://${basedir}/${src.dir}/highlighting/xslthl-config.xml"/>
	<property name="xalan.lib.dir" value="lib"/>
	<property name="database.olink.dir" value="${src.dir}"/>
	<property name="orc.prelude.dir" value="${orc.location.OrcScala}/src/orc/lib/includes/prelude"/>
	<property name="orc.orcdoc-out.dir" value="${basedir}/${src.dir}/refmanual/content/"/>

	<!--
	  - Sets up the classpath for the Xalan and Xerces implementations
	  - that are to be used in this script, since the versions that ship
	  - with Ant may be out of date.
	  -->
	<path id="xalan.classpath">
		<fileset dir="${xalan.lib.dir}" id="xalan.fileset">
			<include name="xalan.jar"/>
			<include name="xercesImpl.jar"/>
			<include name="xslthl-2.0.0.jar"/>
		</fileset>
	</path>

	<!-- =================================
		  target: mkdirs
		 ================================= -->
	<target name="mkdirs" depends="" description="Create build directory tree">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/targetdb"/>
		<mkdir dir="${build.dir}/html"/>
		<mkdir dir="${build.dir}/html/userguide"/>
		<mkdir dir="${build.dir}/html/refmanual"/>
		<mkdir dir="${build.dir}/fo"/>
		<mkdir dir="${build.dir}/fo/userguide"/>
		<mkdir dir="${build.dir}/fo/refmanual"/>
		<mkdir dir="${build.dir}/pdf"/>
		<mkdir dir="${build.dir}/pdf/userguide"/>
		<mkdir dir="${build.dir}/pdf/refmanual"/>
	</target>

	<!-- =================================
		  target: prelude-orcdoc-depends
		 ================================= -->
	<target name="prelude-orcdoc-depends" depends="" description="Checks if prelude-orcdoc files are up-to-date">
		<uptodate property="prelude-orcdoc-uptodate">
			<srcfiles dir="${orc.prelude.dir}" includes="*.inc"/>
			<mapper>
				<chainedmapper>
					<flattenmapper/>
					<globmapper from="*.inc" to="${orc.orcdoc-out.dir}/ref.stdlib.*.xml" handledirsep="yes"/>
				</chainedmapper>
			</mapper>
		</uptodate>
	</target>

	<!-- =================================
		  target: prelude-orcdoc
		 ================================= -->
	<target name="prelude-orcdoc" depends="prelude-orcdoc-depends,mkdirs" unless="prelude-orcdoc-uptodate" description="Generates Reference Manual stdlib appendix from Orc prelude">
	    <echo message="Generating Standard Library chapter from prelude OrcDoc..." level="info"/>
		<java classname="docgen.Main" failonerror="true">
			<arg value="${orc.prelude.dir}"/>
			<arg value="${orc.orcdoc-out.dir}"/>
			<classpath>
				<pathelement location="${orc.location.OrcScala}/lib/scala-library.jar"/>
				<pathelement location="${orc.location.OrcDocgen}/build"/>
			</classpath>
		</java>
	</target>

	<!-- =================================
		  target: depends
		 ================================= -->
	<target name="depends" depends="prelude-orcdoc" description="Remove out-of-date targets">
		<!-- User Guide: -->
		<!-- Remove all targets build form combined userguide source files if any file changes -->
		<dependset>
			<srcfileset dir="${src.dir}/userguide" includes="**/*"/>
			<targetfileset dir="${build.dir}/targetdb" includes="userguide.*"/>
			<targetfileset dir="${build.dir}/html/userguide" includes="**/*"/>
			<targetfileset dir="${build.dir}/fo/userguide" includes="**/*"/>
			<targetfileset dir="${build.dir}/pdf/userguide" includes="**/*"/>
		</dependset>
		<!-- Ref Manual: -->
		<dependset>
			<srcfileset dir="${src.dir}/refmanual" includes="**/*"/>
			<!-- Since the ref manual targetdbs are built separately for each source
			     XML file, XSLT can get those dependencies right without help. -->
			<targetfileset dir="${build.dir}/html/refmanual" includes="**/*"/>
			<targetfileset dir="${build.dir}/fo/refmanual" includes="**/*"/>
			<targetfileset dir="${build.dir}/pdf/refmanual" includes="**/*"/>
		</dependset>
	</target>

	<!-- =================================
		  target: targetdb
		 ================================= -->
	<target name="targetdb" depends="mkdirs,depends" description="Build olink target databases for mutual linking among documents">
		<echo message="Creating olink databases..." level="info"/>
		<macrodef name="docbooktargetdb">
			<attribute name="srcdir"/>
			<attribute name="destdir"/>
			<element name="docbooktargetdb-elements" optional="true" implicit="true"/>
			<sequential>
				<xslt style="docbook-xsl/html/docbook.xsl"
						basedir="@{srcdir}" destdir="@{destdir}"
						processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison"
				        filenameparameter="targets.filename">
					<docbooktargetdb-elements/>
					<classpath refid="xalan.classpath"/>
					<param name="collect.xref.targets" expression="only"/>
				</xslt>
				<!-- Annoyingly, when collect.xref.targets=only, this still creates empty HTML files.
				  -  These annoying files are used by Ant's xslt task to check the freshness of the links DB,
				  -  so we must keep them to avoid a rebuild of all link DBs every build.  -->
			</sequential>
		</macrodef>

		<!-- Create database of links for user guide -->
		<docbooktargetdb srcdir="${src.dir}/userguide" destdir="${build.dir}/targetdb">
			<!-- Create a database of the combined files by processing includes -->
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<include name="userguide.xml"/>
		</docbooktargetdb>

		<!-- Create database of links for reference manual homepage (TOC) -->
		<docbooktargetdb srcdir="${src.dir}/refmanual" destdir="${build.dir}/targetdb">
			<include name="*.xml"/>
		</docbooktargetdb>

		<!-- Create olink databases for modular chapters/sections -->
		<docbooktargetdb srcdir="${src.dir}/refmanual/content" destdir="${build.dir}/targetdb">
			<include name="*.xml"/>
		</docbooktargetdb>
	</target>

	<!-- =================================
		  target: ug-html-chunk
		 ================================= -->
	<target name="ug-html-chunk" depends="mkdirs,depends,targetdb" description="Generate chunked User Guide HTML doc">
		<xslt style="${src.dir}/xsl/html-chunk.xsl" extension=".html"
				basedir="${src.dir}/userguide" destdir="${build.dir}/html/userguide"
				in="${src.dir}/userguide/userguide.xml" out="${build.dir}/html/userguide/index.html"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<include name="userguide.xml"/>
			<classpath refid="xalan.classpath"/>
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="chunk.quietly" expression="1"/>

			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="userguide"/>

			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}"/>
		</xslt>
		<!-- Copy the stylesheet and navigational images -->
		<copy todir="${build.dir}/html/userguide">
			<fileset dir="${src.dir}/css">
				<include name="style.css"/>
			</fileset>
		</copy>
		<copy todir="${build.dir}/html/userguide/images">
			<fileset dir="src/xsl/images"/>
		</copy>
	</target>

	<!-- =================================
		  target: ug-html-single
		 ================================= -->
	<target name="ug-html-single" depends="mkdirs,depends,targetdb" description="Generates single User Guide HTML doc">
		<xslt style="${src.dir}/xsl/html-single.xsl" extension=".html"
				basedir="${src.dir}/userguide" destdir="${build.dir}/html/userguide"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<include name="userguide.xml"/>
			<classpath refid="xalan.classpath"/>
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>

			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="userguide"/>

			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}"/>
		</xslt>
		<copy todir="${build.dir}/html/userguide">
			<fileset dir="${src.dir}/css">
				<include name="style.css"/>
			</fileset>
		</copy>
	</target>

	<!-- =================================
		  target: ug-pdf
		 ================================= -->
	<target name="ug-pdf" depends="mkdirs,depends,targetdb" description="Generate User Guide PDF file">
		<!-- Iterates through a directory and transforms .xml files into
			 .fo files which can then be turned into a PDF document -->
		<xslt style="${src.dir}/xsl/fo.xsl" extension=".fo"
				basedir="${src.dir}/userguide" destdir="${build.dir}/fo/userguide"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<classpath refid="xalan.classpath"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<!-- default to indented layout to match HTML dl -->
			<param name="variablelist.as.blocks" expression="1"/>
			<!-- when table layout is used, default to 12em width for terms -->
			<param name="variablelist.max.termlength" expression="12"/>
			<include name="userguide.xml"/>

			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="userguide"/>

			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}"/>
		</xslt>

		<property name="fop.home" value="lib/fop"/>

		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop.home}/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${fop.home}/build">
					<include name="fop.jar"/>
					<include name="fop-hyph.jar"/>
				</fileset>
			</classpath>
		</taskdef>

		<fop format="application/pdf" fofile="${build.dir}/fo/userguide/userguide.fo"
			outfile="${build.dir}/pdf/userguide/userguide.pdf"/>
	</target>

	<!-- =================================
		  target: userguide
		 ================================= -->
	<target name="userguide" depends="mkdirs,ug-html-chunk,ug-html-single,ug-pdf" description="Generate the User Guide in various formats">
	</target>

	<!-- =================================
		  target: rm-html-chunk
		 ================================= -->
	<target name="rm-html-chunk" depends="mkdirs,depends,targetdb" description="Generates chunked Reference Manual HTML doc">
		<xslt style="${src.dir}/xsl/html-chunk.xsl" extension=".html"
				basedir="${src.dir}/refmanual" destdir="${build.dir}/html/refmanual"
				in="${src.dir}/refmanual/refmanual.xml" out="${build.dir}/html/refmanual/index.html"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<classpath refid="xalan.classpath"/>
			<param name="orc.demo" expression="0"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="2"/>
			<param name="chunk.first.sections" expression="1"/>
			<param name="chapter.autolabel" expression="1"/>
			<param name="generate.toc" expression="
				book	  toc
				chapter	  toc
			"/>
			<param name="toc.section.depth" expression="1"/>
			<param name="header.rule" expression="0"/>
			<param name="use.id.as.filename" expression="1"/>

			<param name="chunk.quietly" expression="1"/>
			<param name="chunk.section.depth" expression="1"/>
			<param name="suppress.footer.navigation" expression="1"/>
			<param name="navig.graphics" expression="1"/>

			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="refmanual"/>

			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}"/>
		</xslt>
		<!-- Copy the stylesheet and navigational images -->
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="${src.dir}/css">
				<include name="style.css"/>
			</fileset>
		</copy>
		<copy todir="${build.dir}/html/refmanual/images">
			<fileset dir="src/xsl/images"/>
		</copy>
	</target>

	<!-- =================================
		  target: rm-html-single
		 ================================= -->
	<target name="rm-html-single" depends="mkdirs,depends,targetdb" description="Generates single Reference Manual HTML doc">
		<xslt style="${src.dir}/xsl/html-single.xsl" extension=".html"
				basedir="${src.dir}/refmanual" destdir="${build.dir}/html/refmanual"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<include name="refmanual.xml"/>
			<classpath refid="xalan.classpath"/>
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>

			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="refmanual"/>
			<param name="generate.toc" expression="book toc"/>

			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}"/>
		</xslt>
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="${src.dir}/css">
				<include name="style.css"/>
			</fileset>
		</copy>
	</target>

	<!-- =================================
		  target: rm-pdf
		 ================================= -->
	<target name="rm-pdf" depends="mkdirs,depends,targetdb" description="Generate the Reference Manual PDF file">
		<!-- Iterates through a directory and transforms .xml files into
			 .fo files which can then be turned into a PDF document -->
		<xslt style="${src.dir}/xsl/fo.xsl" extension=".fo"
			 	basedir="${src.dir}/refmanual" destdir="${build.dir}/fo/refmanual"
				processor="org.apache.tools.ant.taskdefs.optional.TraXLiaison">
		    <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
		                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
			<classpath refid="xalan.classpath"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="toc.section.depth" expression="1"/>
			<!-- default to indented layout to match HTML dl -->
			<param name="variablelist.as.blocks" expression="1"/>
			<!-- when table layout is used, default to 12em width for terms -->
			<param name="variablelist.max.termlength" expression="12"/>
			<include name="refmanual.xml"/>

			<param name="target.database.document" expression="../../${database.olink.dir}/olinkdb.xml"/>
			<param name="current.docid" expression="refmanual"/>

			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}"/>
		</xslt>

		<property name="fop.home" value="lib/fop"/>

		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop.home}/lib">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${fop.home}/build">
					<include name="fop.jar"/>
					<include name="fop-hyph.jar"/>
				</fileset>
			</classpath>
		</taskdef>

		<fop format="application/pdf" fofile="${build.dir}/fo/refmanual/refmanual.fo"
			outfile="${build.dir}/pdf/refmanual/refmanual.pdf"/>
	</target>

	<!-- =================================
		  target: refmanual
		 ================================= -->
	<target name="refmanual" depends="mkdirs,rm-html-chunk,rm-html-single,rm-pdf" description="Generate the Reference Manual in various formats">
	</target>

	<!-- =================================
		  target: all
		 ================================= -->
	<target name="all" depends="userguide,refmanual" description="">
	</target>

	<!-- =================================
		  target: clean
		 ================================= -->
	<target name="clean" depends="" description="Delete build directory">
		<delete dir="${build.dir}"/>
	</target>

	<!--
	  - target:  test
	  -->
	<target name="test" depends="clean,rm-html-chunk,ug-html-single" description="Test build for modifications.">
		<echo message="Test build complete" level="info"/>
	</target>

</project>
