<?xml version="1.0"?>
<!--
  - Original Author:  Nathan A. Good <mail@nathanagood.com>
  - Excerpted from "Build DocBook XML in Eclipse"
  - at http://www.ibm.com/developerworks/xml/library/os-eclipse-docbook/index.html
  -
  -->
<project name="docbook-src" default="all">

	<description>
		This Ant build.xml file is used to transform DocBook XML to various other formats.
		We use it to build all the Orc documentation (User Guide and Reference Manual).
	</description>

	<!--
      - Configure basic properties that will be used in the file.
      -->
	<property name="docbook.xsl.dir" value="docbook-xsl" />
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="xslthl.config" value="file://${user.dir}/${src.dir}/highlighting/xslthl-config.xml" />
	<property name="xalan.lib.dir" value="lib" />
	
	<!--
	  - Properties that pertain to the reference manual
	  -->
	<property name="database.olink.dir" value="${src.dir}" />

	<!--
      - Sets up the classpath for the Xalan and Xerces implementations
      - that are to be used in this script, since the versions that ship
      - with Ant may be out of date.
      -->
	<path id="xalan.classpath">
		<fileset dir="${xalan.lib.dir}" id="xalan.fileset">
			<include name="xalan.jar" />
			<include name="xercesImpl.jar" />
			<include name="xslthl-2.0.0.jar" />
		</fileset>
	</path>

	<!--
	  - target:  all
	  -->
	<target name="all" depends="xsltprocessor,olinks,build-pdf,build-html-chunk,build-html-single,rm-build-html-single" description="Build all documentation" />
	
	<!--
      - target:  usage
      -->
	<target name="usage" description="Prints the Ant build.xml usage">
		<echo message="Use -projecthelp to get a list of the available targets." />
	</target>

	<!--
      - target:  clean
      -->
	<target name="clean" description="Cleans up generated files.">
		<delete dir="${build.dir}" />
	</target>
	
	<!--
	  - target:  olinks
	  -->
	<target name="olinks" description="Builds the olink databases for mutual linking">
		<echo message="Creating olink databases..." />
		<property environment="env"/>
		 <!-- Create database of links in user guide -->
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="--stringparam collect.xref.targets 'only'"/>
			 <arg line="--stringparam targets.filename '${build.dir}/html/ugtargets.db'"/>
			 <arg value="${src.dir}/xsl/orc.xsl"/>
			 <arg value="${src.dir}/root.xml"/>
		 </exec>
		<!-- Create database of links in reference manual -->
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="--stringparam collect.xref.targets 'only'"/>
			 <arg line="--stringparam targets.filename '${build.dir}/html/refmanual/rmtargets.db'"/>
			 <arg value="${src.dir}/xsl/orc.xsl"/>
			 <arg value="${src.dir}/refmanual/refmanual.xml"/>
		 </exec>
		</target>
		
	<!--
      - target:  depends
      -->
	<target name="depends">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/html" />
		<mkdir dir="${build.dir}/pdf" />
		<mkdir dir="${build.dir}/fo" />
	</target>
	
	<!--
      - target:  xinclude
      -->
	<target name="xinclude" depends="depends">
		<taskdef name="xinclude" classname="gr.abiss.xcluder.XercesXcluder">
			<classpath>
				<fileset dir="lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<xinclude in="${src.dir}/root.xml" out="${src.dir}/all.xml" />
	</target>

	<!--
      - target:  build-html-chunk
      -->
	<target name="build-html-chunk" depends="xinclude" description="Generates HTML files from DocBook XML">
		<xslt style="${src.dir}/xsl/html-chunk.xsl" extension=".html" 
				basedir="${src.dir}" destdir="${build.dir}/html">
			<include name="all.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="chunk.quietly" expression="1"/>
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<!-- Delete this because it confuses build-html-single otherwise -->
		<delete file="${build.dir}/html/all.html" />
		<!-- Copy the stylesheet to the same directory as the HTML files -->
		<copy todir="${build.dir}/html">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>

	<!--
      - target:  build-html-single
      -->
	<target name="build-html-single" depends="xinclude" description="Generates HTML files from DocBook XML">
		<xslt style="${src.dir}/xsl/orc.xsl" extension=".html" 
				basedir="${src.dir}" destdir="${build.dir}/html">
			<include name="all.xml" />
			<classpath refid="xalan.classpath" />
			<param name="orc.demo" expression="0"/>
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			
			<param name="target.database.document" expression="${database.olink.dir}/olinkdb.xml" />
			<param name="current.docid" expression="root" />
			
			<param name="highlight.source" expression="1"/>
			<param name="highlight.default.language" expression="orc"/>
			<param name="highlight.xslthl.config" expression="${xslthl.config}" />
		</xslt>
		<!-- Copy the stylesheet to the same directory as the HTML files -->
		<copy todir="${build.dir}/html">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
	
	<!--
	  - target:  rm-build-html-single
	  -->
	<target name="rm-build-html-single" depends="xinclude" 
		description="Generates HTML files for reference manual"
		if="tmp:xsltproc.available">
		<property environment="env"/>
		 <exec executable="xsltproc${executable.file.extension}">
			 <arg line="--output '${build.dir}/html/refmanual/refmanual.html'"/>
			 <arg line="--stringparam target.database.document '../../${database.olink.dir}/olinkdb.xml'"/>
			 <arg line="--stringparam current.docid 'refmanual'"/>
			 <arg line="--stringparam orc.demo '0'"/>
			 <arg line="--stringparam section.label.includes.component.label '1'"/>
			 <arg line="--stringparam section.autolabel.max.depth '8'"/>
			 <arg line="--stringparam highlight.source '1'"/>
			 <arg line="--stringparam highlight.default.language 'orc'"/>
			 <arg line="--stringparam highlight.xslthl.config '${xslthl.config}'"/>
			 <arg line="--xinclude"/>
			 <arg value="${src.dir}/xsl/orc.xsl"/>
			 <arg value="${src.dir}/refmanual/refmanual.xml"/>
		 </exec>
		<!-- Copy the stylesheet to the same directory as the HTML files -->
		<copy todir="${build.dir}/html/refmanual">
			<fileset dir="css">
				<include name="style.css" />
			</fileset>
		</copy>
	</target>
	
	<!--
	    - target:  build-pdf
	    - description:  Iterates through a directory and transforms
	    -     .xml files into .fo files which can then be turned into DocBook XML
	    -     files.
	    -->
	<target name="build-pdf" depends="xinclude" 
		    description="Generates PDF files from DocBook XML">
	    <xslt style="${src.dir}/xsl/fo.xsl" extension=".fo" 
			basedir="${src.dir}" destdir="${build.dir}/fo">
	        <classpath refid="xalan.classpath" />
	    	<param name="section.autolabel" expression="1"/>
	    	<param name="section.label.includes.component.label" expression="1"/>
	    	<param name="section.autolabel.max.depth" expression="8"/>
		<!-- default to indented layout to match HTML dl -->
	    	<param name="variablelist.as.blocks" expression="1"/>
		<!-- when table layout is used, default to 12em width for terms -->
		<param name="variablelist.max.termlength" expression="12"/>
	        <include name="all.xml" />
	        	
		<param name="highlight.source" expression="1"/>
		<param name="highlight.default.language" expression="orc"/>
	    	<param name="highlight.xslthl.config" expression="${xslthl.config}" />
	    </xslt>

	    <property name="fop.home" value="lib/fop" />

	    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
	        <classpath>
	            <fileset dir="${fop.home}/lib">
	                <include name="*.jar" />
	            </fileset>
	            <fileset dir="${fop.home}/build">
	                <include name="fop.jar" />
	                <include name="fop-hyph.jar" />
	            </fileset>
	        </classpath>
	    </taskdef>

	    <fop format="application/pdf" fofile="${build.dir}/fo/all.fo" 
	        outfile="${build.dir}/pdf/all.pdf" />
	</target>
	
	
  <!-- The following code is based on Dawid Weiss' code at
	http://www.cs.put.poznan.pl/dweiss/xml/projects/ant-docbook-styler/index.xml?lang=en -->
  <!-- ########################################################################## -->
  <!-- ### {{{ XSLT processor recognition. If xsltproc[.exe] is found in path,    -->
  <!-- ### it will be used for stylesheet processing (much faster than Xalan, can do olinks)     -->
  <!-- ########################################################################## -->
  
	<!--
      - target:  xsltprocessor
      -->
	<target name="xsltprocessor">
    <property environment="env"/>

	<!-- If they are using Windows -->
    <condition  property="executable.file.extension"
                value=".exe">
            <os family="windows"/>
    </condition>
		
	<!-- If they are using Unix -->
    <condition  property="executable.file.extension"
                value="">
            <os family="unix"/>
    </condition>
		
	<!-- If they are using Mac (this may not be necessary, need to test) -->
    <condition  property="executable.file.extension"
                value="">
            <os family="mac"/>
    </condition>
    
    <condition  property="tmp:xsltproc.available"
                value="xsltproc${executable.file.extension}">
        <or>
            <and>
                <os family="windows"/>
                <available file="xsltproc${executable.file.extension}" filepath="${env.Path}" />
            </and>
            <and>
                <os family="unix"/>
                <available file="xsltproc${executable.file.extension}" filepath="${env.PATH}" />
            </and>
				<and>
                <os family="mac"/>
                <available file="xsltproc${executable.file.extension}" filepath="${env.PATH}" />
            </and>
        </or>
    </condition>

  <antcall target="displayXsltProcessorInfo" />
  <antcall target="displayXsltProcessorNotFound" />
		
  </target>

  <!--
    - target:  displayXsltProcessorInfo
    -->
	<target name="displayXsltProcessorInfo"
          if="tmp:xsltproc.available"
          unless="disable.xsltproc">
    <echo>
    
#####################################################
XSLTProc has been found in your path and will be used
for processing XSLT transformations. If you experience
any problems, you can switch to Java's default XSLT 
processor by defining 'disable.xsltproc' property.
#####################################################

    </echo>
  </target>
	
	<!-- Add some way to fail build here -->
	<!-- Build also needs to fail if an olink fails -->
	
	<!--
    - target:  displayXsltProcessorNotFound
    -->
	<target name="displayXsltProcessorNotFound"
          unless="tmp:xsltproc.available">
    <echo>
    
#####################################################
XSLTProc has not been found installed on your system.
The Orc documentation cannot be properly built.
Please install xsltproc and make sure it is in your
system environment path.
#####################################################

    </echo>
  </target>

</project>
