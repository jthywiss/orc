<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Type" content="text/xhtml+xml; charset=UTF-8" />
<meta name="description" content="description"/>
<meta name="keywords" content="keywords"/><meta name="author" content="author"/>
<link rel="stylesheet" type="text/css" href="../template/default.css" media="screen"/>
<link rel="stylesheet" type="text/css" href="/orchard/orc.css" media="screen" />
<link rel="stylesheet" type="text/css" href="/orc-misc.css" media="screen" />
<link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />
<title>Supplemental material to: QoS-Aware Management of Monotonic Service Orchestrations</title>
</head>

<body>

<div class="container">
<!--	<div class="left">-->
		<div class="header-background">
			<div class="header">
				<div class="title">
					<h1><img src="../indigo-template/img/orc-top.gif" alt="Orc" /> Language Project</h1>
				</div>

				<div class="navigation">
					<a href="../index.shtml" >Home</a>
<a href="../download.shtml" >Download</a>
<a href="../documentation.shtml" >Documentation</a>
<a href="../research.shtml" >Research</a>
<a href="../community.shtml" >Community</a>

					<div class="clearer"><span></span></div>
				</div>
			</div>
		</div>

		<div class="main">
			<div class="content">

<script src="/orchard/orc.js" type="text/javascript"></script>

<a id="top"></a><h2>Supplemental material to:</h2>
<h1>QoS-Aware Management of Monotonic Service Orchestrations</h1>

<p>This page is supplemental material to:
A. Benveniste, C. Jard, A. Kattepur, S. Rosario, and J.A. Thywissen, "QoS-Aware Management of Monotonic Service Orchestrations,"
Submitted to <span class="venue"><a href="http://www.springer.com/engineering/circuits+%26+systems/journal/10703">Formal Methods in System Design</a></span>, 2013.</p>

<ul>
<li><a href="#SLADeclaration">SLADeclaration.orc&mdash;Declaration of the SLA for the TravelAgent2 orchestration.</a></li>
<li><a href="#TravelAgent">TravelAgent.orc&mdash;The Orc specification of the TravelAgent2 orchestration</a></li>
<li><a href="#TravelAgentWeaved">TravelAgentWeaved&mdash;The QoS-weaved description of the TravelAgent2 orchestration</a></li>
</ul>

<a id="SLADeclaration"></a><h2>SLADeclaration.orc <small>(<a href="#top">top</a>)</small></h2>

<p>Declaration of the SLA for the TravelAgent2 orchestration. We make use of
the <code>def class</code> declaration to implement new sites to track QoS
metrics. Data structures and operations on records <code>{. .}</code>, lists
<code>[f, g]</code> and tuples <code>(f, g)</code> are used. Other general sites
available in Orc such as real time (<code>Rtime</code>) rewritable storage
locations (<code>Ref</code> and FIFO channels (<code>Channel</code>) are also
invoked.</p>

<pre class="orc-snippet">
def bestQoS(comparer, publisher) = head(sortBy(comparer, publisher))

def class InterQueryTime()=
  def QoS(sitex) =
    val s = {. r = Ref(0), c = Channel() .}		
    val curTime = Rtime()
    s.r?  &gt;p&gt;
    (s.c.put(curTime-p) | s.r := curTime)  &gt;&gt;
    Dictionary()  &gt;sitex&gt;
    sitex.InterQueryTime := s  &gt;&gt;
    stop
  def QoSCompare(it1, it2) = it1 &gt;= it2
  def QoSCompete(it1, it2) = bestQoS(QoSCompare, [it1, it2])
  stop

def class ResponseTime() =
  def QoS(sitex, d) = Rtime()-d &gt;q&gt; q
  def QoSOplus(rt1, rt2) = rt1+rt2
  def QoSCompare(rt1, rt2) = rt1 &lt;= rt2
  def QoSCompete(rt1, rt2) = bestQoS(QoSCompare, [rt1, rt2])
  def QoSVee(rt1, rt2) = max(rt1, rt2)
  stop

def class Cost() =
  def QoS(sitex, c)=
    val s = Ref([])
    s?  &gt;x&gt;
    QoSOplus(x, [])  &gt;q&gt;
    s:= q  &gt;&gt;
    Dictionary()  &gt;sitex&gt;
    sitex.Cost := s
  def QoSOplus(c1, c2) =
    def Oplus([], []) = []
    def Oplus(x:xs, y:ys) = (x+y):Oplus(xs, ys)
    Oplus(c1, c2)
  def QoSCompare(c1, c2) =
    def Compare([], []) = true
    def Compare(x:xs, y:ys) = (x &lt;= y) && Compare(xs, ys)
    Compare(c1, c2)
  def QoSCompete(c1, c2) = bestQoS(QoSCompare, [c1, c2])	                                   	
  def QoSVee(c1, c2) =
    def Vee([], []) = []
    def Vee(x:xs, y:ys) = max(x, y):Vee(xs, ys)
    Vee(c1, c2)
  stop
</pre>

<a id="TravelAgent"></a><h2>TravelAgent.orc <small>(<a href="#top">top</a>)</small></h2>

<p>The Orc specification of the TravelAgent2 orchestration. The general purpose
<code>Dictionary</code> site is used as a mutable map from field names to
values, references to which are accessed using <code>.</code> access. Values
held by references are obtained using <code>x?</code> (equivalent to
<code>x.read()</code>) and set using <code>x:=y</code> (equivalent to
<code>x.write(y)</code>).</p>

<pre class="orc">
val airlineList = ["Airline 1", "Airline 2"]
val hotelList = ["Hotel A", "Hotel B"]

--BestQoS and simulation utilities
def bestQ(comparer, publisher) =  head(sortBy(comparer, collect(publisher)))
def cat() = if (Random(1) = 1) then "Economy" else "Premium"
val simElapsedClock = Rclock()

--Simulation definition
def TravelAgent(salesOrder, budget) =

  def inquireCost(list) =
    each(list)  &gt;sup&gt;
    Dictionary()  &gt;productDetails&gt;
    productDetails.company := sup  &gt;&gt;
    productDetails.cost := Random(100)  &gt;&gt;
    productDetails
  def inquireCategory(list) =
    each(list)  &gt;sup&gt;
    Dictionary()  &gt;productDetails&gt;
    productDetails.company := sup  &gt;&gt;
    productDetails.cost := Random(100)  &gt;&gt;
    productDetails.category := cat()  &gt;&gt;
    productDetails

  def compareCost(x, y) = x.cost? &lt;= y.cost?
  def compareCategory(x, y) =
    if x.category? = "Economy" then false
    else if y.category? = "Economy" then true
    else compareCost(x, y)

  def acceptOrder(salesOrder, budget) =
    Dictionary()  &gt;bookingRequest&gt;
    bookingRequest.orderNumber := salesOrder.ordernumber?  &gt;&gt;
    bookingRequest.acceptedTime := simElapsedClock.time()  &gt;&gt;
    Println("Order "+bookingRequest.orderNumber?+" accepted at time "+bookingRequest.acceptedTime?)  &gt;&gt;
    (bookingRequest, budget)

  def quoteAirfare(bookingRequest) =
    bestQ(compareCost, defer(inquireCost, airlineList))  &gt;q&gt;
    bookingRequest.airQuote := q
  def quoteHotel(bookingRequest) =
    bestQ(compareCategory, defer(inquireCategory, hotelList))  &gt;q&gt;
    bookingRequest.hotelQuote := q

  def checkBudget(bookingRequest, budget) =
    if (bookingRequest.airQuote?.cost? + bookingRequest.hotelQuote?.cost? &lt;: budget)
    then bookingRequest
    else (
      Println("Resubmit Order "+bookingRequest.orderNumber?)  &gt;&gt;
      Dictionary()  &gt;salesOrder&gt;
      salesOrder.ordernumber := bookingRequest.orderNumber? &gt;&gt;
      (salesOrder, acceptOrder(salesOrder, budget)))

  def timeout(x, t, salesOrder) = 
    Let(Some(x) | (Rwait(t) &gt;&gt; notifyFail(salesOrder, "Timeout") &gt;&gt; None()))
  def notifyFail(salesOrder, reason) =
    Println("Order "+salesOrder.orderNumber?+" failed: "+reason) &gt;&gt; stop

  timeout(
    ( acceptOrder(salesOrder, budget)  &gt;(bookingRequest, budget)&gt;
      quoteAirfare(bookingRequest)  &gt;&gt;
      quoteHotel(bookingRequest)  &gt;&gt;
      checkBudget(bookingRequest, budget)),
    2000, salesOrder)  &gt;Some(bookingRequest)&gt;
  bookingRequest

--Simulation
def simulateOrders(50) = stop  -- Stop after simulating 50 orders
def simulateOrders(n) =
  Dictionary()  &gt;salesOrder&gt;
  salesOrder.ordernumber := n  &gt;&gt;
  Println("Order "+n+" created")  &gt;&gt;
  salesOrder | Rwait(Random(100))  &gt;&gt;
  simulateOrders(n+1)

simulateOrders(1)  &gt;salesOrder&gt; 
TravelAgent(salesOrder, 50)  &gt;bookingRequest&gt;
Println("Invoice for order "+salesOrder.ordernumber?+" presented at time "+simElapsedClock.time())  &gt;&gt;
stop
</pre>

<a id="TravelAgentWeaved"></a><h2>TravelAgentWeaved.orc <small>(<a href="#top">top</a>)</small></h2>

<p>The QoS-weaved description of the TravelAgent2 orchestration. Pattern
matching is used extensively to assign and propagate QoS values.</p>

<pre class="orc">
def bestQoS(comparer, publisher) = head(sortBy(comparer, publisher))

def class InterQueryTime()=
  def QoS(sitex) =
    val s = {. r = Ref(0), c = Channel() .}		
    val curTime = Rtime()
    s.r?  &gt;p&gt;
    (s.c.put(curTime-p) | s.r := curTime)  &gt;&gt;
    Dictionary()  &gt;sitex&gt;
    sitex.InterQueryTime := s  &gt;&gt;
    stop
  def QoSCompare(it1, it2) = it1 &gt;= it2
  def QoSCompete(it1, it2) = bestQoS(QoSCompare, [it1, it2])
  stop

def class ResponseTime() =
  def QoS(sitex, d) = Rtime()-d &gt;q&gt; q
  def QoSOplus(rt1, rt2) = rt1+rt2
  def QoSCompare(rt1, rt2) = rt1 &lt;= rt2
  def QoSCompete(rt1, rt2) = bestQoS(QoSCompare, [rt1, rt2])
  def QoSVee(rt1, rt2) = max(rt1, rt2)
  stop

def class Cost() =
  def QoS(sitex, c)=
    val s = Ref([])
    s?  &gt;x&gt;
    QoSOplus(x, [])  &gt;q&gt;
    s:= q  &gt;&gt;
    Dictionary()  &gt;sitex&gt;
    sitex.Cost := s
  def QoSOplus(c1, c2) =
    def Oplus([], []) = []
    def Oplus(x:xs, y:ys) = (x+y):Oplus(xs, ys)
    Oplus(c1, c2)
  def QoSCompare(c1, c2) =
    def Compare([], []) = true
    def Compare(x:xs, y:ys) = (x &lt;= y) && Compare(xs, ys)
    Compare(c1, c2)
  def QoSCompete(c1, c2) = bestQoS(QoSCompare, [c1, c2])	                                   	
  def QoSVee(c1, c2) =
    def Vee([], []) = []
    def Vee(x:xs, y:ys) = max(x, y):Vee(xs, ys)
    Vee(c1, c2)
  stop
{- EXAMPLE -}
--include "SLADeclaration.orc"

val airlineList = ["Airline 1", "Airline 2"]
val hotelList = ["Hotel A", "Hotel B"]

--BestQoS and simulation utilities
def bestQ(comparer, publisher) = head(sortBy(comparer, collect(publisher)))
def cat() = if (Random(1) = 1) then "Economy" else "Premium"
val simElaspedTime = Rclock()
val respTime = Ref(0)

--Simulation definition
def TravelAgent(salesOrder, budget, ResponseTime, Cost) =

  def inquireCost(list) =
    each(list)  &gt;sup&gt;
    Dictionary()  &gt;productDetails&gt;
    productDetails.company := sup  &gt;&gt;
    productDetails.cost := Random(100)  &gt;&gt;
    productDetails
  def inquireCategory(list) =
    each(list)  &gt;sup&gt;
    Dictionary()  &gt;productDetails&gt;
    productDetails.company := sup  &gt;&gt;
    productDetails.cost := Random(100)  &gt;&gt;
    productDetails.category := cat()  &gt;&gt;
    productDetails

  def compareCost(x, y) = x.cost? &lt;= y.cost?
  def compareCategory(x, y) =
    if x.category? = "Economy" then false
    else if y.category? = "Economy" then true
    else compareCost(x, y)

  def acceptOrder(salesOrder, budget) =
    ( Dictionary()  &gt;bookingRequest&gt;
      bookingRequest.orderNumber := salesOrder.ordernumber?  &gt;&gt;
      bookingRequest.acceptedTime := simElaspedTime.time()  &gt;&gt;
      Println("Order "+bookingRequest.orderNumber?+" accepted at time "+bookingRequest.acceptedTime?)  &gt;&gt;
      (bookingRequest, budget), Rclock().time()
    )  &gt;((bookingRequest, budget), d)&gt;
    ((bookingRequest, budget), ResponseTime().QoS(acceptOrder, d))
  def quoteAirfare(bookingRequest, Cost) =
    ( bestQ(compareCost, defer(inquireCost, airlineList))  &gt;q&gt;
      bookingRequest.airQuote := q  &gt;&gt;
      Cost().QoS(quoteAirfare, [q]), Rclock().time()
    )  &gt;(q, d)&gt;
    (q, ResponseTime().QoS(quoteAirfare, d))
  def quoteHotel(bookingRequest, Cost) =
    ( bestQ(compareCategory, defer(inquireCategory, hotelList))  &gt;q&gt;
      bookingRequest.hotelQuote := q  &gt;&gt;
      Cost().QoS(quoteHotel, [q]), Rclock().time()
    ) &gt;(q, d)&gt;
    (q, ResponseTime().QoS(quoteHotel, d))
  def checkBudget(bookingRequest, budget, Cost) =
    ( if (bookingRequest.airQuote?.cost? + bookingRequest.hotelQuote?.cost? &lt;: budget)
      then bookingRequest
      else (
        Println("Resubmit Order "+bookingRequest.orderNumber?+" with bigger budget")  &gt;&gt;
        Dictionary()  &gt;salesOrder&gt;
        salesOrder.ordernumber := bookingRequest.orderNumber?  &gt;&gt;
        (salesOrder, acceptOrder(salesOrder, budget))
      )  &gt;r&gt;
      Cost().QoSOplus(bookingRequest.airQuote?, bookingRequest.hotelQuote?)  &gt;v&gt;
      Cost().QoSCompete(v, budget)  &gt;&gt;
      r, Rclock().time()
    ) &gt;(r, d)&gt;
    (r, ResponseTime().QoS(checkBudget, d))
  def timeout(x, t, salesOrder) =
    Let(Some(x) | (Rwait(t) &gt;&gt; notifyFail(salesOrder, "Timeout") &gt;&gt; None()))
  def notifyFail(salesOrder, reason) =
    Println("Order "+salesOrder.orderNumber?+" failed: "+reason) &gt;&gt; stop

    acceptOrder(salesOrder, budget)  &gt;((bookingRequest, budget), RT)&gt;
    timeout(
      ( quoteAirfare(bookingRequest, Cost)  &gt;(q, RT1)&gt;
        (q, ResponseTime().QoSOplus(RT, RT1))  &gt;(q, RT)&gt;
        quoteHotel(bookingRequest, Cost)  &gt;(q, RT2)&gt;
        (q, ResponseTime().QoSOplus(RT, RT2))  &gt;(q, RT)&gt;
        checkBudget(bookingRequest, budget, Cost))  &gt;(r, RT3)&gt;
        (r, ResponseTime().QoSOplus(RT, RT3))  &gt;(r, RT)&gt;
        respTime := RT  &gt;&gt;
      r, 2000, salesOrder)  &gt;Some(r)&gt;
    (bookingRequest, ResponseTime().QoSCompete(respTime?, 2000))  &gt;(bookingRequest, RT)&gt;
    (bookingRequest, RT)
  | InterQueryTime().QoS(TravelAgent)

--Simulation
def simulateOrders(50) = stop  -- Stop after simulating 50 orders
def simulateOrders(n) =
    Dictionary()  &gt;salesOrder&gt;
    salesOrder.ordernumber:= n  &gt;&gt;
    Println("Order "+n+" created")  &gt;&gt;
    salesOrder
  | Rwait(Random(100))  &gt;&gt; simulateOrders(n+1)

simulateOrders(1)  &gt;salesOrder&gt;
TravelAgent(salesOrder, 50, ResponseTime, Cost)  &gt;bookingRequest&gt;
Println("Invoice for order "+salesOrder.ordernumber?+" presented at time "+simElaspedTime.time())  &gt;&gt;
stop
</pre>

			</div>
<!--		</div>-->
	</div>
<!--
	<div class="right">
		<div class="sidenav">
			<form action="search.shtml" id="cse-search-box">
  <div>
    <input type="hidden" name="cx" value="001989989275909646143:conqllya2xi" />
    <input type="hidden" name="cof" value="FORID:9" />
    <input type="hidden" name="ie" value="UTF-8" />
    <input type="text" name="q" size="15" class="styled" />
    <input type="submit" name="sa" value="Search" />
  </div>
</form>
<script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=cse-search-box&amp;lang=en"></script>

<h1>Get Started</h1>

<ul class="block">
	<li><a href="../tutorial.shtml">Orc in 15 Minutes</a></li>
	<li><a href="../lectures.shtml">See Tutorial Lectures on Orc</a></li>
	<li><a href="../tryorc.shtml">Try Orc! (in your browser)</a></li>
	<li><a href="../download.shtml">Download Orc</a></li>
	<li><a href="../documentation/html/userguide/userguide.html" onclick="window.open(this.href, 'orcUserGuide');return false;">User Guide <img src="../images/new-window.gif" alt="opens in new window" class="newWindowIcon" /></a></li>
	<li><a href="../documentation/html/refmanual/index.html" onclick="window.open(this.href, 'orcRefManual');return false;">Reference Manual <img src="../images/new-window.gif" alt="opens in new window" class="newWindowIcon" /></a></li>
</ul>

<h1>Get Involved</h1>

<ul class="block">
	<li><a href="https://orc.csres.utexas.edu/wiki/Wiki.jsp?page=News">News</a></li>
	<li><a href="../wiki">Wiki</a></li>
	<li><a href="http://groups.google.com/group/orc-lang/">Mailing List</a></li>
	<li><a href="http://orc.googlecode.com">Google Code Project</a></li>
</ul>

<h1>Contact Us</h1>

<ul class="block">
	<li><b>Academic inquiries</b><br />
		<small><a class="obfuscated-email">academic at orc.csres.utexas.edu</a></small></li>
	<li><b>Commercial inquiries</b><br />
		<small><a class="obfuscated-email">commercial at orc.csres.utexas.edu</a></small></li>
	<li><b>Webmaster/other</b><br />
		<small><a class="obfuscated-email">webmaster at orc.csres.utexas.edu</a></small></li>
</ul>


<!--#config timefmt="%Y-%m-%d" -->
<p style="padding-top: 1em"><small>Last updated <!--#flastmod file="$DOCUMENT_NAME" --></small></p>

		</div>
	</div>
-->
	<div class="clearer"><span></span></div>
</div>

<div class="footer">
 <!--#config timefmt="%Y-%m-%d" -->
<p style="padding-top: 1em"><small>Last updated <!--#flastmod file="$DOCUMENT_NAME" --></small></p>
</div>

<script type="text/javascript" src="obfuscated-email.js"></script>
</body>

</html>
