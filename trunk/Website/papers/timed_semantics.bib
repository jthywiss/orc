@article{citeulike:4542718,
	abstract = {Orc  is a kernel language for structured concurrent programming. Orc provides three powerful combinators that define the structure of a concurrent computation. These combinators support sequential and concurrent execution, and concurrent execution with blocking and termination. Orc is particularly well-suited for  task orchestration , a form of concurrent programming with applications in workflow, business process management, and web service orchestration. Orc provides constructs to orchestrate the concurrent invocation of services while managing time-outs, priorities, and failures of services or communication. Our previous work on the semantics of Orc focused on its asynchronous behavior. The inclusion of time or the effect of delay on a computation had not been modeled. In this paper, we define an operational semantics of Orc that allows reasoning about delays, which are introduced explicitly by time-based constructs or implicitly by network delays. We develop a number of identities among Orc expressions and define an equality relation that is a congruence. We also present a denotational semantics in which the meaning of an Orc program is a set of traces, and show that the two semantics are equivalent.},
	author = {Wehrman, I.  and Kitchin, D.  and Cook, W.  and Misra, J. },
	citeulike-article-id = {4542718},
	doi = {10.1016/j.tcs.2008.04.037},
	issn = {03043975},
	journal = {Theoretical Computer Science},
	keywords = {orc},
	month = {August},
	number = {2-3},
	pages = {234--248},
	posted-at = {2009-05-18 19:31:01},
	priority = {2},
	title = {A timed semantics of Orc},
	url = {http://dx.doi.org/10.1016/j.tcs.2008.04.037},
	volume = {402},
	year = {2008}
}
