<!--#include virtual="template/header.shtml" --> 

<link rel="stylesheet" type="text/css" href="/orchard/orc.css" media="screen"/>

<p><b>Orc</b> is novel language for distributed and concurrent programming. Orc provides
uniform access to computational services, including distributed communication
and data manipulation, through <b><i>sites</i></b>. Using three simple
concurrency primitives, the programmer <b><i>orchestrates</i></b> the
invocation of sites to achieve a goal, while managing timeouts, priorities, and
failures.</p>

<p>You can use Orc as:</p>

<p>
A <b>general purpose programming language</b> for concise encoding of
concurrent and distributed applications. See (demo) a probabilistic solution to the 
dining philosophers problem, or try out <a href="">some simple programs</a> that 
combine concurrency and synchronization with fault-tolerance and time-out.
</p>

<p>
A <b>web scripting language</b> to create a web-service mashup in a few
minutes. Orc's emphasis on concurrency makes mashups much simpler to write than in
other scripting languages. See a <a href="">simple search mashup</a> that starts a Yahoo search 
and a Google search simultaneously and prints the first set of responses. You can 
create your own mashup <a href="tryorc.shtml">here</a>.
</p>

<pre class="orc">
include "search.inc"

each(results)
  &lt;results&lt;
    Prompt("Search for:") >term>
    ( Yahoo(term) | Google(term) )</pre>

<p>
An <b>executable specification language</b> for workflow applications
and process coordination problems. Read about how Orc can <a href="">represent
many common workflow patterns</a>, or see a <a href="">representation of a process 
network</a> in Orc. 
</p>

<p>Read more about the <a href="introduction.shtml">ideas behind Orc</a> or
dive in to <a href="tutorial.shtml">Orc in 15 minutes</a>.</p>


<!-- 
<h2>What is it for?</h2>

<ul>
<li>Concurrent and distributed programming</li>
<li>Workflows (business process automation)</li>
<li>Discrete event simulation</li>
<li>Web service mashups</li>
</ul>

<h2>A Sample Program</h2>

<p>The following example searches both Yahoo and Google for some search term
obtained from the user and displays the first few results from whichever site
responds first.</p>

<pre class="orc">
include "search.inc"

each(results)
  &lt;results&lt;
    Prompt("Search for:") >term>
    ( Yahoo(term) | Google(term) )</pre>

<script src="/orchard/orc.js" type="text/javascript"></script>
-->
 
<!--#include virtual="template/footer.shtml" --> 
