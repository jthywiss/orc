<!--#include virtual="template/header.shtml" --> 

<link rel="stylesheet" type="text/css" href="/orchard/orc.css" media="screen"/>
<script src="/orchard/orc.js" type="text/javascript"></script>

<a name="top"></a><h1>Orc in 15 Minutes</h1>

<ul>
<li><a href="#Introduction">Introduction</a></li>
<li><a href="#Sites">Sites</a></li>
<li><a href="#Combinators">Combinators</a>
	<ul>
	<li><a href="#Parallel_Combinator">Parallel Combinator</a></li>
	<li><a href="#Sequential_Combinator">Sequential Combinator</a></li>
	<li><a href="#Pruning_Combinator">Pruning Combinator</a></li>
	</ul>
<li><a href="#Functions">Functions</a>
<li><a href="#Advanced">Advanced Techniques</a>
<li><a href="#Conclusion">Conclusion</a>
</li>
</ul>

<a name="Introduction"></a><h2>Introduction <small>(<a href="#top">top</a>)</small></h2>

<p>In this tutorial you will learn the basic concepts of Orc through a series
of interactive examples.  When you see a code example with a <b>run</b> button,
click it to run the program. The results of the program will be printed below
it. The demos run on our server so you may experience some network delay.</p>

<a name="Sites"></a><h2>Sites <small>(<a href="#top">top</a>)</small></h2>
<p>The fundamental unit of computation in an Orc program is called a
<b>site</b>.  Sites are similar to functions or procedures in other languages,
but they may be remote and therefore unreliable.  In this tutorial we will make
frequent use of a <tt>Prompt</tt> site, which communicates with you (the user)
by sending you a question and returning your response. For example:</p>
<pre class="orc">
Prompt("What is your favorite food?")
</pre>

<p>Sites needn't always be remote.  For example, the <tt>+</tt> site which is
used to add numbers and concatenate strings is usually implemented locally.</p>
<pre class="orc">
1 + 2</pre>

<p>Although Orc uses traditional infix notation for arithmetic and comparison
operators, these are still considered sites like any other.</p>

<a name="Combinators"></a><h2>Combinators <small>(<a href="#top">top</a>)</small></h2>
<p>Orc has three basic combinators, each to combine two expressions:</p>
<ul>
<li>Parallel, or bar, written <tt>|</tt></li>
<li>Sequential, or push, written <tt>>></tt></li>
<li>Pruning, or pull, written <tt>&lt;&lt;</tt></li>
</ul>
<p>We will examine each in turn.</p>

<a name="Parallel_Combinator"></a><h3>Parallel Combinator <small>(<a href="#top">top</a>)</small></h3>

<p>Two Orc expressions can be evaluated in parallel using <tt>|</tt>. For
example, we can ask the user to choose both an eating utensil and type of
dinnerware simultaneously:</p>

<pre class="orc">
  Prompt("Spoon or fork?")
| Prompt("Bowl or saucer?")</pre>

<P>Note that <i>both</i> of your answers were returned. In Orc, an expression
may return more than one value if it involves more than one concurrent
computation.  To emphasize this we usually say that an expression
<b>publishes</b> (rather than returns) values.</p>

<a name="Sequential_Combinator"></a><h3>Sequential Combinator <small>(<a href="#top">top</a>)</small></h3>

<p>Sites can also be called in sequence. The <tt>>></tt> combinator evaluates
its right side when its left side publishes a value.</p>

<pre class="orc">
Prompt("What was the last movie you saw?")

  >>
 
Prompt("Was it good?")</pre>

<p>Notice that your first response was not published. <tt>>></tt> only
publishes the value(s) published by the right side.  If you want to use a value
published by the left side, you can bind it to a variable, like this:</p>

<pre class="orc">
Prompt("What is your name?")

  >name>
 
"Hello " + name</pre>

<p>If the left side publishes more than one value, the right side is evaluated
independently for <i>each</i> value:</p>

<pre class="orc">
(   Prompt("Pick a movie you like:")
  | Prompt("Pick a movie you like:") )

  >movie>
 
"I heard that " + movie + " is a good movie."</pre>

<p>The <tt>&gt;&gt;</tt> combinator has higher precedence than <tt>|</tt>, so
the parentheses in the previous example are necessary.</p>

<a name="Pruning_Combinator"></a><h3>Pruning Combinator <small>(<a href="#top">top</a>)</small></h3>

<p>The final combinator, <tt>&lt;&lt;</tt>, combines the concepts of selection,
blocking, and termination. It is used to select the first value published by an
expression and then terminate that expression. The following program, for example,
asks two questions but only publishes the first answer (and does not wait for
the second):</p>

<pre class="orc">
fruit

  &lt;fruit&lt;

        Prompt("Apples or oranges?")
      | Prompt("Grapes or mangos?")</pre>

<p>Both sides of the pruning combinator begin evaluating immediately, but
when the left side needs the value produced by the right side, it blocks until
that value is available. The next example will print "red" and "blue"
immediately but must wait to print your chosen color until you enter it:</p>

<pre class="orc">
"red" | ("light " + color) | "blue"

  &lt;color&lt;

    Prompt("Choose a color.")</pre>

<p>The syntax of &lt;&lt; can sometimes be awkward, so Orc supports an
alternative (but equivalent) syntax that allows you to write the previous
example like this:</p>

<pre class="orc">
val color = Prompt("Choose a color.")  
"red" | ("light " + color) | "blue"</pre>

<p>A variable introduced by a <tt>val</tt> declaration is scoped to the
expression following the declaration.</p>

<p>If an argument to a site call is a compound expression (not just a variable
or constant), then it is treated as syntactic sugar for a pruning composition.
For example, these two expressions are equivalent:</p>

<pre class="orc">
  ( 1 + x &lt;x&lt; (2 + 3) )
| ( 1 + (2 + 3) )</pre>

<p></p>

<a name="Fundamental_Sites"></a><h2>Fundamental Sites <small>(<a href="#top">top</a>)</small></h2>

<p>In addition to the <tt>Prompt</tt> and <tt>+</tt> sites we have already
seen, Orc provides several other fundamental sites which are necessary for
writing useful expressions. The following examples illustrate the most
important ones.</p>

<p><tt>if(condition)</tt> publishes a signal (a special value of unit type,
conveying no information) if and only if <tt>condition</tt> is true:</p>
<pre class="orc">
  if(3 /= 4) >> "three does not equal four"
| if(false) >> "impossible!"</pre>

<p><tt>Rtimer(t)</tt> publishes a signal after <tt>t</tt> milliseconds:</p>
<pre class="orc">
  "immediately"
| Rtimer(3000) >> "...three seconds later..."
| Rtimer(5000) >> "...five seconds later..."</pre>

<p><tt>stop</tt> is a special value which never publishes (similar to the
concept of "bottom" or &perp; in functional languages).  It is commonly
used with sequential composition to suppress published values, as in this
example which waits for your response but does not publish it:</p>
<pre class="orc">
Prompt("I'm not listening...") >> stop</pre>

<a name="Functions"></a><h2>Functions <small>(<a href="#top">top</a>)</small></h2>

<p>To facilitate the construction of large programs, Orc allows users to define
functions.  Function calls look and act like site calls, with two key
differences:</p>
<ol>
<li>A site call must block if some of its arguments are not available, but a function call can begin evaluating immediately.</li>
<li>A site call can publish at most one value, but a function call may publish many values.</li>
</ol>

<p>Here is a simple recursive function which publishes a number every second:</p>
<pre class="orc">
def metronomeN(i) =
    i
  | Rtimer(1000) >> metronomeN(i+1)

metronomeN(0)</pre>

<p>Function publications can be interleaved with the parallel combinator.
For example, we can interleave publications from two metronomes running at
different rates and starting at different initial values:</p>
<pre class="orc">
def metronomeTN(t, i) =
    i
  | Rtimer(t) >> metronomeTN(t, i+1)

metronomeTN(1100, 0) | metronomeTN(700, 100)</pre>

<p>A common idiom in Orc is to treat an expression as a stream of values which
may be filtered. The next example publishes every alternate number starting at 0:</p>

<pre class="orc">
def metronomeN(i) =
    i
  | Rtimer(1000) >> metronomeN(i+1)

metronomeN(0) >n> if(n%2 = 0) >> n</pre>

<a name="Advanced"></a><h2>Advanced Techniques <small>(<a href="#top">top</a>)</small></h2>

<p>Orc shares many features with functional programming languages, including
higher-order functions (functions which take functions or sites as arguments)
and pattern matching.  We will explore these features using a simple but
realistic example: an automated booking agent which gets quotes from a list of
airlines and returns the best quote received under a certain price and within a
certain time limit.</p>

<p>First, we must have a way to get a quote from an airline.  For the purposes
of this demo, we will assume that there exists a <i>discovery site</i> which,
given the name of an airline, returns a site representing that airline. When
the airline site is called in turn, it will simulate a request for a quote
by prompting you for a quote in dollars.</p>
<pre class="orc">
def Airline(name) =
    -- define a local function
    def MakeQuote() =
        Prompt(name + " quote ($)") >n>
        (name, read(n))
    -- return it
    MakeQuote
{- EXAMPLE -}
-- Request a delta site and then
-- use it to request a quote
Airline("Delta") >delta> delta()</pre>

<p>Next we need a utility function which returns the lesser of two quotes.
A quote includes the airline name and a dollar value, so we use pattern
matching to extract the dollar value from the quote tuple:</p>
<pre class="orc">
def Airline(name) =
    -- define a function which can be called
    -- like a site
    def MakeQuote() =
        Prompt(name + " quote ($)") >n>
        (name, read(n))
    -- return the site
    MakeQuote

{- EXAMPLE -}
def minQuote((_,dollar1) as quote1, (_,dollar2) as quote2) =
    if(dollar1 &lt;= dollar2) >> quote1
  | if(dollar2 &lt;  dollar1) >> quote2

-- Example usage
val delta = Airline("Delta")
val united = Airline("United")
minQuote(delta(), united())</pre>

<p>Finally we can put everything together with a function that uses
pattern matching and recursion to return the best quote from a list
of airline sites:</p>
<pre class="orc">
def Airline(name) =
    -- define a function which can be called
    -- like a site
    def MakeQuote() =
        Prompt(name + " quote ($)") >n>
        (name, read(n))
    -- return the site
    MakeQuote
def minQuote((n1,q1), (n2,q2)) =
    if(q1 &lt;= q2) >> (n1, q1)
  | if(q2 &lt;  q1) >> (n2, q2)

{- EXAMPLE -}
-- Return the best quote at or under $200
-- received within 15 seconds
def bestQuote([]) = ("None of the above", 200)
def bestQuote(airline:rest) =
    val best = bestQuote(rest)
    val current = airline() | (Rtimer(15000) >> best)
    minQuote(current, best)

bestQuote([Airline("Delta"), Airline("United")])</pre>

<a name="Conclusion"></a><h2>Conclusion <small>(<a href="#top">top</a>)</small></h2>

<p>That concludes this Orc tutorial. Please refer to the <a
href="documentation.shtml">Documentation</a> page for further
guidance.  When you are ready, <a href="tryorc.shtml">play with Orc</a>
yourself.</p>

<!--#include virtual="template/footer.shtml" --> 
