<!--#include virtual="header.shtml" --> 

<link rel="stylesheet" type="text/css" href="/orchard/orc.css" media="screen"/>
<script src="/orchard/jquery-1.2.6.min.js" type="text/javascript"></script>
<script src="/orchard/orc.js" type="text/javascript"></script>

<h1>Orc in 15 Minutes</h1>

<p>This tutorial is interactive: when you see a code example with a <b>run</b>
button, click it to run the program. The results of the program (the values it
"publishes") will be printed below. For some examples, you may also see extra
trace information printed (in parentheses like this: "(Doing something...)") to
help you understand what the program is doing.</p>

<h2>Sites</h2>
<p>The fundamental unit of computation in an Orc program is called a
<i>site</i>.  Sites are similar to procedures or functions in other languages,
but they may be distributed and are therefore unreliable.  A site can implement
a complex distributed operation, like interacting with a person ...</p>
<pre class="orc-prelude">
def David(x) = Rtimer(1000) >> "Breakfast tacos"
</pre>
<pre class="orc">
David("What is your favorite food?")
</pre>

<p>... or a very simple local operation, like adding two numbers:</p>
<pre class="orc">
1 + 2
</pre>
<p>Orc uses standard infix notation for sites which implement things like
arithmetic and comparison, but despite the fancy notation these operators are
still sites like any other.</p>

<p>For the rest of these samples, we will use <tt>David</tt> and
<tt>Adrian</tt> as examples of sites which query a person and return their
response.</p>

<h2>Combinators</h2>
<p>Orc has three basic combinators which are used to build concurrent expressions:</p>
<ul>
<li>Parallel or bar, written <tt>|</tt></li>
<li>Sequential or push, written <tt>>></tt></li>
<li>Asymmetric or pull, written <tt>&lt;&lt;</tt></li>
</ul>
<p>We will examine each in turn.</p>

<h3>Parallel Combinator</h3>

<p>Two Orc expressions can be evaluated in parallel using <tt>|</tt></p>

<pre class="orc-prelude">
def David(x) = Rtimer(500) >> "Breakfast tacos"
def Adrian(x) = Rtimer(1000) >> "Burnt sienna"
</pre>
<pre class="orc">
  David("What is your favorite food?")
| Adrian("What is your favorite color?")
</pre>

<p>In the above example, <tt>David</tt> and <tt>Adrian</tt> are invoked
simultaneously, and <i>both</i> responses are returned. Note that Orc is unlike
most functional programming languages in that expressions may return more than
one value if they involve more than one concurrent computation.</p>

<h3>Sequential Combinator</h3>

<p>Sites can also be called in sequence. The <tt>>></tt> 
combinator evaluates its right side as soon as the left side returns a
value:</p>

<pre class="orc-prelude">
def David(x) = 
	println("(Talking to David...)") >>
	Rtimer(1000) >>
	println("(David says 'warm')")
def Adrian(x) = println("(Talking to Adrian...)") >>
	Rtimer(1000) >>
	println("(Adrian says 'hot')") >>
	"Hot"
</pre>
<pre class="orc">
David("How is the weather?")

  >>
 
-- Will run as soon as David responds
Adrian("How is the weather?")
</pre>

<p>Push allows you to bind a value produced by its left side and use it in the
right side:</p>

<pre class="orc-prelude">
def David(x) = Rtimer(1000) >>
	println("(David says 'balmy')") >>
	"balmy"
</pre>
<pre class="orc">
David("How is the weather?")

  >weather>
 
cat("The weather in Austin is ", weather)
</pre>

<p>The right side is evaluated independently for <i>every</i> value published
by the left side:</p>

<pre class="orc-prelude">
def David(x) = Rtimer(1000) >>
	println("(David says 'Pan's Labyrinth')") >>
	"Pan's Labyrinth"
def Adrian(x) = Rtimer(1500) >>
	println("(Adrian says 'Unforgiven')") >>
	"Unforgiven"
</pre>
<pre class="orc">
(   David("Pick a movie you like:")
  | Adrian("Pick a movie you like:") )

  >movie>
 
-- Will print for every response received
cat("I heard that ", movie, " is a good movie.")
</pre>

<h3>Asymmetric Combinator</h3>

<p>The final combinator, <tt>&lt;&lt;</tt>, combines the concepts of selection,
blocking, and termination. It is used to select the first value published by an
expression and then terminate that expression.</p>

<pre class="orc-prelude">
def David(x) = Rtimer(1000) >>
	println("(David says 'azure')") >>
	"azure"
def Adrian(x) = null
</pre>
<pre class="orc">
-- Only one response will be printed.
cat(color, " wins.")

  &lt;color&lt;

        David("Choose a color.")
      | Adrian("Choose a color.")  
</pre>

<p>Both sides of a pull begin evaluating immediately. When the left-hand side
needs the value produced by the right-hand side, it blocks until that value is
available.</p>

<pre class="orc-prelude">
def David(x) = 
	println("(Talking to David ...)") >>
	Rtimer(3000) >>
	println("(David says 'purple')") >>
	"purple"
def Adrian(x) = null
</pre>
<pre class="orc">
-- "red" and "blue" are printed immediately
"red" | cat("light ", color) | "blue"

  &lt;color&lt;

    David("Choose a color.")  
</pre>

<p>Site calls with expressions as arguments are just syntactic sugar for asymmetric composition:</p>

<pre class="orc">
-- These two expressions are equivalent
  cat("3+4=", 3+4)
| ( cat("3+4=", a) &lt;a&lt; 3 + 4 )
</pre>

<h2>Fundamental Sites</h2>

<p>Orc provides some fundamental sites which are necessary for writing
useful expressions. The following examples illustrate the most basic ones.</p>

<p><tt>if(condition)</tt> publishes only if <tt>condition</tt> is true:</p>
<pre class="orc">
  if(3 /= 4) >> "three does not equal four"
| if(false) >> "impossible!"
</pre>

<p><tt>Rtimer(t)</tt> publishes after <tt>t</tt> milliseconds:</p>
<pre class="orc">
  "immediately"
| Rtimer(3000) >> "...three seconds later..."
| Rtimer(5000) >> "...five seconds later..."
</pre>

<p><tt>null</tt> is a special value which never publishes (similar to "bottom" or <tt>_|_</tt> in functional languages).
It is commonly used with sequential composition to suppress published values:</p>
<pre class="orc-prelude">
def David(x) = 
	Rtimer(2000) >>
	println("(David says '42')")
</pre>
<pre class="orc">
David("Favorite number?") >> null
</pre>

<h2>Functions</h2>

<p>To facilitate the construction of large programs, Orc allows users to define
named functions. Functions are called like sites, but unlike sites, they do
not need to block if one of their arguments is not available when they are
called, and they can publish multiple values.</p>

<p>Here is a simple recursive function which publishes a number every second:</p>
<pre class="orc">
def Metronome(i) =
    i
  | Rtimer(1000) >> Metronome(i+1)

Metronome(0)
</pre>

<p>Function publications can be interleaved with the parallel combinator:</p>
<pre class="orc">
def Metronome(t, i) =
    i
  | Rtimer(t) >> Metronome(t, i+1)

Metronome(1100, 0) | Metronome(700, 100)
</pre>

<p>A common idiom in Orc is to treat an expression as a stream of values which
may be filtered:</p>

<pre class="orc-prelude">
def isPrime(n) = 
  def primeat(i) = 
      if(b) >> (n % i /= 0) && primeat(i+1)
    | if(~b) >> true
        &lt;b&lt; i * i <= n
  primeat(2)
</pre>
<pre class="orc">
def Metronome(i) =
    i
  | Rtimer(1000) >> Metronome(i+1)

-- Publish only prime numbers
Metronome(2) >n> if(isPrime(n)) >> n
</pre>

<p>Like any good functional programming language, Orc supports higher-order
functions (functions which take functions or sites as arguments), lists and
tuples as basic datatypes, and pattern matching.</p>
<pre class="orc-prelude">
def Random(i,j) = random(j - i) + i + 1
def Adrian(x) = 
	Rtimer(Random(3000,7000)) >>
	println("(Adrian says '13')") >>
	13
def David(x) = 
	Rtimer(3000) >>
	println("(David says '10')") >>
	10
</pre>
<pre class="orc">
-- Query a site for a number, and default to 0
-- if it does not respond within 5 seconds
def timeout(M) = n
    &lt;n&lt; M("Pick a number:") | Rtimer(5000) >> 0

-- Add up the responses from a list of sites
-- in parallel
def tally([]) = 0
def tally(x:xs) = timeout(x) + tally(xs)

-- Ask David and Adrian for numbers
tally([David, Adrian])
</pre>

<p>Like infix operators, datatype constructors and patterns are just syntactic
sugar for sequential site calls.</p>

<h2>Further Study</h2>

<p>Please refer to the <a href="documentation.shtml">Documentation</a> page for further guidance.</p>
<p>When you are ready, <a href="/orchard">play with Orc</a> yourself.</p>

<!--#include virtual="footer.shtml" --> 
