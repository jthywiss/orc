<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.patterns.call.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Call Pattern -->
	<section xml:id="ref.patterns.call" xmlns="http://docbook.org/ns/docbook">
		<title>Call Pattern</title>
		<para>
			A <indexterm significance="preferred"><primary>call pattern</primary></indexterm><firstterm>call pattern</firstterm>
			allows a <link linkend="ref.expressions.call">call</link> to be made within a pattern match.
	  </para>
	  
	  <para> 
			A pattern <replaceable>x</replaceable><code>(</code> <replaceable>P<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>P<subscript>n</subscript></replaceable> <code>)</code>,
			is matched against a value <replaceable>v</replaceable> by calling 
			<replaceable>x</replaceable><code>.unapply(</code><replaceable>v</replaceable><code>)</code>,
			and matching each value <link linkend="ref.concepts.publish">published</link> by that call against the <link linkend="ref.patterns.tuple">tuple pattern</link>
			<code>(</code> <replaceable>P<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>P<subscript>n</subscript></replaceable> <code>)</code>.
			If there is only one pattern <replaceable>P</replaceable>, then <replaceable>P</replaceable> is matched on its own, instead of using a tuple pattern.
			If there are no patterns, a <link linkend="ref.patterns.wildcard">wildcard pattern</link> is used.
	  </para>
	  
	  <para>
	    If <replaceable>x</replaceable><code>.unapply(</code><replaceable>v</replaceable><code>)</code> <link linkend="ref.concepts.states.halt">halts</link> <link linkend="ref.concepts.silent">silently</link>,
	    or halts without producing any matching values, then the match fails.
	  </para>
	  
	  <para>
	    If multiple values are published and successfully match, then a <indexterm significance="preferred"><primary>multimatch</primary></indexterm><firstterm>multimatch</firstterm> occurs:
	    the entire pattern succeeds multiple times. 
	    In a <link linkend="ref.expressions.call.function">function call</link>, the matching clause is executed multiple times, once for each match.
	    In a <link linkend="ref.combinators.sequential">sequential combinator</link>, the right hand side is executed multiple times, once for each match.
	    In a <link linkend="ref.combinators.pruning">pruning combinator</link>, one of the matches is chosen arbitrarily.
	  </para>
			 
		
		<section xml:id="ref.patterns.call.syntax">
	  <title>Syntax</title>
	  <para>
	    <productionset>
	    	<productionrecap linkend="ebnf.pattern.call"/>
	    </productionset>
	  </para>
	  </section>
	  
	  <section xml:id="ref.patterns.call.type">
	  <title>Type</title>
	  <para>
	    When a call pattern is matched against a type <replaceable>S</replaceable>,
	    the <code>unapply</code> member of the type <replaceable>S</replaceable> must have the <link linkend="ref.data.closure.type">function type</link>
	    <code>lambda</code> <code>(</code><replaceable>T</replaceable><code>)</code> <code>::</code> <code>(</code><replaceable>T<subscript>0</subscript></replaceable> <code>,</code> &#x2026; <code>,</code> <replaceable>T<subscript>n</subscript></replaceable><code>)</code>,
	    where <replaceable>S</replaceable> is a <link linkend="ref.types.subtyping">subtype</link> of <replaceable>T</replaceable>.
	    Then each argument pattern <replaceable>P<subscript>i</subscript></replaceable>
	    is matched against the corresponding type <replaceable>T<subscript>i</subscript></replaceable>,
	    producing <link linkend="ref.types.context">typing contexts</link> Γ<subscript>i</subscript>. The typing context
	    produced by the whole match is the union of the contexts Γ<subscript>i</subscript>.
	  </para>
	  </section>
		
		 <section xml:id="ref.patterns.call.examples">
		  <title>Examples</title>

		  <example xml:id="ref.patterns.call.examples.trees"><title>Trees</title>
<programlisting language="orc-demo"><![CDATA[
{- 
   Build up a small binary tree, then use call patterns to deconstruct the tree and extract its contents.   
-}

type Tree = Node(_,_,_) | Empty()

val l = Node(Empty(), 0, Empty())
val r = Node(Empty(), 2, Empty())
val t = Node(l,1,r)

t >Node(l,j,r)>
l >Node(_,i,_)>
r >Node(_,k,_)>
( i | j | k )

{-
OUTPUT:PERMUTABLE
0
1
2
-}

]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.patterns.call.examples.isqrt"><title>Integer square root</title>
<programlisting language="orc-demo"><![CDATA[
{- 
   A user-defined call pattern match, using a record with an unapply member.
   
   The integer square root function, isqrt, returns the square root of a
   perfect square, and halts on any input that is not a perfect square.
   
   isqrt is then used to define a value 'square' that matches perfect squares.
-}

def isqrt(n) =
  if (n <: 0) 
    then stop
    else (
      val root = Floor(n ** 0.5)
      if (n = root*root) 
        then root 
        else stop
    )

val square = {. unapply = isqrt .}

each([9, 12, 16, 24, 25]) >square(n)> n

{-
OUTPUT:PERMUTABLE:
3
4
5
-}

]]></programlisting>
		  </example>
		  
		  <example xml:id="ref.patterns.call.examples.factoring"><title>Factoring Using Multimatch</title>
<programlisting language="orc-demo"><![CDATA[
{- 
   A user-defined call pattern match, using a record with an unapply member.
   
   The factors function publishes all nontrivial positive factors of its argument n 
   (any factor greater than 1 and less than n) 
   
   factors is then used to define a value 'multipleOf' that matches all
   nontrivial positive factors of an integer.
-}

def factors(n) if (n <: 0) = factors(-n)
def factors(n) = for(2, n/2 + 1) >i> Ift(n % i = 0) >> i

val multipleOf = {. unapply = factors .}

30 >multipleOf(n)> n

{-
OUTPUT:PERMUTABLE:
2
3
5
6
10
15
-}

]]></programlisting>
		  </example>
		</section>
		
		<section xml:id="ref.patterns.call.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.data.datatype">Algebraic Data Types</link></para></listitem>
			<listitem><para><link linkend="ref.data.record.specialkeys"><code>unapply</code> key</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.call">Site and Function Calls</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.introduction.structures.patterns">Patterns</olink></para></listitem>
		</itemizedlist>
		  
	  </section>
	</section>
