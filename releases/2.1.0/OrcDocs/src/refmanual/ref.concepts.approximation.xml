<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.concepts.approximation.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Approximation -->
<section xml:id="ref.concepts.approximation" xmlns="http://docbook.org/ns/docbook">
	<title>Approximation in Orc Implementation</title>

		<para>
			This reference manual describes the ideal behavior of Orc programs. In
			particular, it assumes unbounded memory, an arbitrary amount of
			concurrent processing power, and any level of speed of computation
			demanded by the program. Therefore, we have not treated aspects such
			as floating point overflow, overhead for platform-level thread creation,
			nor the exact speeds of computation. 
		</para>
		
		<para>
		For example, the program
		</para>
		
		<para>
		<programlisting language="orc"><![CDATA[
 val z = Rwait(2) >> true | Rwait(3) >> false
]]></programlisting>
		</para>
		
		<para>
			is ideally expected to bind value <code>true</code> to <code>z</code>. In practice, we can only
			make a best effort to implement the ideal behavior of <link linkend="ref.time.real.rwait"><code>Rwait</code></link>. Given that
			<code>Rwait(2)</code> and <code>Rwait(3)</code> are very close in real time, an actual
			implementation may indeed assign false to <code>z</code>. The programmer should be
			aware of such limitations, and program around them.
		</para>


	<section xml:id="ref.concepts.approximation.links">
		<title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.time.real"><code>Rwait</code></link></para></listitem>
			<listitem><para><link linkend="ref.data.numeric">Numerics</link></para></listitem>
		</itemizedlist>

	</section>
	
</section>
