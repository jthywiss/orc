<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.syntax.EBNF.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Syntax: EBNF -->
	<section xml:id="ref.syntax.EBNF" xmlns="http://docbook.org/ns/docbook">
		<title>EBNF Grammar</title>
		<para>
			The Orc language grammar is expressed in Extended Backus-Naur Form (EBNF), with the following meta-notation:
		</para>
		
		<para xml:id="ebnf.meta.questionmark">
		G<emphasis role="bold">?</emphasis> denotes zero or one occurrences of G. <!--  alternative: &#xFF1F; -->
		</para>
		
		<para xml:id="ebnf.meta.plus">
		G<emphasis role="bold">+</emphasis> denotes one or more occurrences of G. <!--  alternative: &#xFF0B; -->
		</para>
		
		<para xml:id="ebnf.meta.ellipsis">
		G <emphasis>sep</emphasis> <emphasis role="bold"><emphasis role="bold">&#x2026;</emphasis></emphasis> <emphasis>sep</emphasis> G denotes zero or more occurrences of G, separated by <emphasis>sep</emphasis>.
		</para>
		
		<para>
		<productionset>
		
		<production xml:id="ebnf.expression">
		  <lhs><link linkend="ref.expressions">Expression</link></lhs>
		  <rhs>
			  <nonterminal def="#ebnf.literal">Literal</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.variable">Variable</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.stop">Stop</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.tuple">Tuple</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.list">List</nonterminal>		    
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.record">Record</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.call">Call</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.dot">DotAccess</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.prefixoperation">PrefixOperation</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.infixoperation">InfixOperation</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.infixoperation">PostfixOperation</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.parallel">Parallel</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.sequential">Sequence</nonterminal>		    
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.pruning">Prune</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.otherwise">Otherwise</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.conditional">Conditional</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.lambda">Lambda</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.withdeclaration">WithDeclaration</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.withtypeinfo">WithTypeInformation</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.expression.typeoverride">TypeOverride</nonterminal>
				<sbr/>&#x2759; <code>(</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.stop">
		  <lhs><link linkend="ref.expressions.stop">Stop</link></lhs>
		  <rhs>
		    <code>stop</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.tuple">
		  <lhs><link linkend="ref.data.tuple">Tuple</link></lhs>
		  <rhs>
		    <code>(</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>  <code>,</code> <emphasis role="bold"><emphasis role="bold">&#x2026;</emphasis></emphasis> <code>,</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>)</code>
		  </rhs>
		  <constraint linkend="tuplesize"/>
		</production>
		
		<production xml:id="ebnf.expression.list">
		  <lhs><link linkend="ref.data.list">List</link></lhs>
		  <rhs>
		    <code>[</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>  <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>]</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.record">
		  <lhs><link linkend="ref.data.record">Record</link></lhs>
		  <rhs>
		    <code>{.</code> <nonterminal def="#ebnf.key">Key</nonterminal> <code>=</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>  <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code>  <nonterminal def="#ebnf.key">Key</nonterminal> <code>=</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>.}</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.call">
		  <lhs><link linkend="ref.expressions.call">Call</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <nonterminal def="#ebnf.typearguments">TypeArguments</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.arguments">Arguments</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.dot">
		  <lhs><link linkend="ref.expressions.dot">DotAccess</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal><code>.</code><nonterminal def="#ebnf.key">Key</nonterminal>
		  </rhs>
		</production>
					
		<production xml:id="ebnf.expression.prefixoperation">
		  <lhs><link linkend="ref.expressions.operators">PrefixOperation</link></lhs>
		  <rhs>
		    <link linkend="ref.syntax.precedence">PrefixOperator</link> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.infixoperation">
		  <lhs><link linkend="ref.expressions.operators">InfixOperation</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <link linkend="ref.syntax.precedence">InfixOperator</link> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.postfixoperation">
		  <lhs><link linkend="ref.expressions.operators">PostfixOperation</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <link linkend="ref.syntax.precedence">PostfixOperator</link> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.parallel">
		  <lhs><link linkend="ref.combinators.parallel">Parallel</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>|</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.sequential">
		  <lhs><link linkend="ref.combinators.sequential">Sequence</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>&gt;</code><nonterminal def="#ebnf.pattern">Pattern</nonterminal><emphasis role="bold">?</emphasis><code>&gt;</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.pruning">
		  <lhs><link linkend="ref.combinators.pruning">Prune</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>&lt;</code><nonterminal def="#ebnf.pattern">Pattern</nonterminal><emphasis role="bold">?</emphasis><code>&lt;</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.otherwise">
		  <lhs><link linkend="ref.combinators.otherwise">Otherwise</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>;</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.conditional">
		  <lhs><link linkend="ref.expressions.ifthenelse">Conditional</link></lhs>
		  <rhs>
		    <code>if</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>then</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>else</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
					
		<production xml:id="ebnf.expression.lambda">
		  <lhs><link linkend="ref.expressions.lambda">Lambda</link></lhs>
		  <rhs>
		    <code>lambda</code> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.parameters">Parameters</nonterminal> <nonterminal def="#ebnf.returntype">ReturnType</nonterminal><emphasis role="bold">?</emphasis> <code>=</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>

		<production xml:id="ebnf.expression.withdeclaration">
		  <lhs><link linkend="ref.declarations">WithDeclaration</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.declaration">Declaration</nonterminal> <nonterminal def="#ebnf.expression">Expression</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.withtypeinfo">
		  <lhs><link linkend="ref.types.typeinfo.expression">WithTypeInformation</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>::</code> <nonterminal def="#ebnf.type">Type</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.expression.typeoverride">
		  <lhs><link linkend="ref.types.override">TypeOverride</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>:!:</code> <nonterminal def="#ebnf.type">Type</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration">
		  <lhs><link linkend="ref.declarations">Declaration</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.declaration.val">DeclareVal</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.def">DeclareDefinition</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.defclass">DeclareDefclass</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.signature">DeclareSignature</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.site">DeclareSite</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.class">DeclareClass</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.include">DeclareInclude</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.type">DeclareType</nonterminal> <code>#</code><emphasis role="bold">?</emphasis>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.val">
		  <lhs><link linkend="ref.declarations.val">DeclareVal</link></lhs>
		  <rhs>
		    <code>val</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>=</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.def">
		  <lhs><link linkend="ref.declarations.def">DeclareDefinition</link></lhs>
		  <rhs>
		    <code>def</code> <nonterminal def="#ebnf.variable">Variable</nonterminal> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.parameters">Parameters</nonterminal> <nonterminal def="#ebnf.returntype">ReturnType</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.guard">Guard</nonterminal><emphasis role="bold">?</emphasis> <code>=</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.defclass">
		  <lhs><link linkend="ref.declarations.defclass">DeclareDefclass</link></lhs>
		  <rhs>
		    <code>def class</code> <nonterminal def="#ebnf.variable">Variable</nonterminal> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.parameters">Parameters</nonterminal> <nonterminal def="#ebnf.returntype">ReturnType</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.guard">Guard</nonterminal><emphasis role="bold">?</emphasis> <code>=</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.guard">
		  <lhs><link linkend="ref.declarations.def.guard">Guard</link></lhs>
		  <rhs>
		    <code>if</code> <code>(</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>)</code> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.signature">
		  <lhs><link linkend="ref.types.typeinfo.function">DeclareSignature</link></lhs>
		  <rhs>
		    <code>def</code> <nonterminal def="#ebnf.variable">Variable</nonterminal> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.argumenttypes">ArgumentTypes</nonterminal> <nonterminal def="#ebnf.returntype">ReturnType</nonterminal> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.site">
		  <lhs><link linkend="ref.declarations.site">DeclareSite</link></lhs>
		  <rhs>
		    <code>import site</code> <nonterminal def="#ebnf.variable">Variable</nonterminal> <code>=</code> <nonterminal def="#ebnf.classname">ClassName</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.class">
		  <lhs><link linkend="ref.declarations.class">DeclareClass</link></lhs>
		  <rhs>
		    <code>import class</code> <nonterminal def="#ebnf.variable">Variable</nonterminal> <code>=</code> <nonterminal def="#ebnf.classname">ClassName</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.include">
		  <lhs><link linkend="ref.declarations.include">DeclareInclude</link></lhs>
		  <rhs>
		    <code>include</code> <nonterminal def="#ebnf.filename">FileName</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.type">
		  <lhs><link linkend="ref.declarations.type">DeclareType</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.declaration.type.alias">DeclareTypeAlias</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.type.import">DeclareTypeImport</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.declaration.type.datatype">DeclareDatatype</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.type.alias">
		  <lhs><link linkend="ref.declarations.type.alias">DeclareTypeAlias</link></lhs>
		  <rhs>
		    <code>type</code> <nonterminal def="#ebnf.typevariable">TypeVariable</nonterminal> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <code>=</code> <nonterminal def="#ebnf.type">Type</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.type.import">
		  <lhs><link linkend="ref.declarations.type.import">DeclareTypeImport</link></lhs>
		  <rhs>
		    <code>import type</code> <nonterminal def="#ebnf.typevariable">TypeVariable</nonterminal> <code>=</code> <nonterminal def="#ebnf.classname">ClassName</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.declaration.type.datatype">
		  <lhs><link linkend="ref.declarations.type.datatype">DeclareDatatype</link></lhs>
		  <rhs>
		    <code>type</code> <nonterminal def="#ebnf.typevariable">TypeVariable</nonterminal> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <code>=</code> <nonterminal def="#ebnf.constructor">Constructor</nonterminal> <code>|</code> <emphasis role="bold">&#x2026;</emphasis> <code>|</code> <nonterminal def="#ebnf.constructor">Constructor</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.constructor">
		  <lhs><link linkend="ref.data.datatype.constructors">Constructor</link></lhs>
		  <rhs>
		     <nonterminal def="#ebnf.variable">Variable</nonterminal> <code>(</code> <nonterminal def="#ebnf.slot">Slot</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.slot">Slot</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.slot">
		  <lhs><link linkend="ref.data.datatype">Slot</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.type">Type</nonterminal>
		    &#x2759; <code>_</code> 
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern">
		  <lhs><link linkend="ref.patterns">Pattern</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.pattern.wildcard">WildcardPattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.literal">LiteralPattern</nonterminal>		    
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.variable">VariablePattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.tuple">TuplePattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.list">ListPattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.record">RecordPattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.cons">ConsPattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.call">CallPattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.as">AsPattern</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.pattern.withtypeinfo">PatternWithTypeInformation</nonterminal>
				<sbr/>&#x2759; <code>(</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.wildcard">
		  <lhs><link linkend="ref.patterns.wildcard">WildcardPattern</link></lhs>
		  <rhs>
		    <code>_</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.literal">
		  <lhs><link linkend="ref.patterns.literal">LiteralPattern</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.literal">Literal</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.variable">
		  <lhs><link linkend="ref.patterns.variable">VariablePattern</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.variable">Variable</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.tuple">
		  <lhs><link linkend="ref.patterns.tuple">TuplePattern</link></lhs>
		  <rhs>
		    <code>(</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>)</code>
		  </rhs>
		  <constraint linkend="tuplesize"/>
		</production>
		
		<production xml:id="ebnf.pattern.list">
		  <lhs><link linkend="ref.patterns.list">ListPattern</link></lhs>
		  <rhs>
		    <code>[</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>]</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.record">
		  <lhs><link linkend="ref.patterns.record">RecordPattern</link></lhs>
		  <rhs>
		    <code>{.</code> <nonterminal def="#ebnf.key">Key</nonterminal> <code>=</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal>  <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code>  <nonterminal def="#ebnf.key">Key</nonterminal> <code>=</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>.}</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.cons">
		  <lhs><link linkend="ref.patterns.cons">ConsPattern</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>:</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.call">
		  <lhs><link linkend="ref.patterns.call">CallPattern</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.variable">Variable</nonterminal> <code>(</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.as">
		  <lhs><link linkend="ref.patterns.as">AsPattern</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>as</code> <nonterminal def="#ebnf.variable">Variable</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.pattern.withtypeinfo">
		  <lhs><link linkend="ref.types.typeinfo.pattern">PatternWithTypeInformation</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>::</code> <nonterminal def="#ebnf.type">Type</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.type">
		  <lhs>Type</lhs>
		  <rhs>
		    <nonterminal def="#ebnf.typevariable">TypeVariable</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.type.tuple">TupleType</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.type.record">RecordType</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.type.function">FunctionType</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.type.application">TypeApplication</nonterminal>
				<sbr/>&#x2759; <code>(</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>)</code>
		  </rhs>
		</production>
					
		<production xml:id="ebnf.type.tuple">
		  <lhs><link linkend="ref.data.tuple.type">TupleType</link></lhs>
		  <rhs>
		    <code>(</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>)</code>
		  </rhs>
		  <constraint linkend="tuplesize"/>
		</production>
					
		<production xml:id="ebnf.type.record">
		  <lhs><link linkend="ref.data.record.type">RecordType</link></lhs>
		  <rhs>
		    <code>{.</code> <nonterminal def="#ebnf.key">Key</nonterminal> <code>=</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code>  <nonterminal def="#ebnf.key">Key</nonterminal> <code>=</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>.}</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.type.function">
		  <lhs><link linkend="ref.data.closure.type">FunctionType</link></lhs>
		  <rhs>
		    <code>lambda</code> <nonterminal def="#ebnf.typeparameters">TypeParameters</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.argumenttypes">ArgumentTypes</nonterminal> <nonterminal def="#ebnf.returntype">ReturnType</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.type.application">
		  <lhs><link linkend="ref.types.polymorphism.types">TypeApplication</link></lhs>
		  <rhs>
		    <nonterminal def="#ebnf.type">Type</nonterminal> <nonterminal def="#ebnf.typearguments">TypeArguments</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.literal">
		  <lhs>Literal</lhs>
		  <rhs>
				<nonterminal def="#ebnf.literal.signal">SignalLiteral</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.literal.boolean">BooleanLiteral</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.literal.number">NumberLiteral</nonterminal>
				<sbr/>&#x2759; <nonterminal def="#ebnf.literal.string">CharacterStringLiteral</nonterminal>
				<sbr/>&#x2759; <code>null</code>
		  </rhs>
		</production>
		
		
		<production xml:id="ebnf.literal.signal">
		  <lhs><link linkend="ref.data.signal">SignalLiteral</link></lhs>
		  <rhs>
				<code>signal</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.literal.boolean">
		  <lhs><link linkend="ref.data.boolean">BooleanLiteral</link></lhs>
		  <rhs>
				<code>true</code> &#x2759; <code>false</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.literal.integer">
		  <lhs><link linkend="ref.data.numeric.literals.syntax">IntegerLiteral</link></lhs>
		  <rhs>
				DecimalDigit<emphasis role="bold">+</emphasis>
		  </rhs>
		</production>

		<production xml:id="ebnf.literal.number">
		  <lhs><link linkend="ref.data.numeric.literals.syntax">NumberLiteral</link></lhs>
		  <rhs>
				<nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal> <nonterminal def="#ebnf.literal.decimalpart">DecimalPart</nonterminal><emphasis role="bold">?</emphasis> <nonterminal def="#ebnf.literal.exponentpart">ExponentPart</nonterminal><emphasis role="bold">?</emphasis>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.literal.decimalpart">
		  <lhs>DecimalPart</lhs>
		  <rhs>
				<code>.</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.literal.exponentpart">
		  <lhs>ExponentPart</lhs>
		  <rhs>
				               <code>E</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
				<sbr/>&#x2759; <code>E+</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
				<sbr/>&#x2759; <code>E-</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
				<sbr/>&#x2759; <code>e</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
				<sbr/>&#x2759; <code>e+</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
				<sbr/>&#x2759; <code>e-</code> <nonterminal def="#ebnf.literal.integer">IntegerLiteral</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.literal.string">
		  <lhs><link linkend="ref.data.string.literals.syntax">CharacterStringLiteral</link></lhs>
		  <rhs>
				<code>"</code>Character<emphasis role="bold">+</emphasis><code>"</code> &#x2759; <code>""</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.variable">
		  <lhs>Variable</lhs>
		  <rhs>
		    <link linkend="ref.syntax.lexical.tokens.identifier">Identifier</link>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.typevariable">
		  <lhs>TypeVariable</lhs>
		  <rhs>
		    <link linkend="ref.syntax.lexical.tokens.identifier">Identifier</link>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.key">
		  <lhs>Key</lhs>
		  <rhs>
		    <link linkend="ref.syntax.lexical.tokens.identifier">Identifier</link>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.classname">
		  <lhs>ClassName</lhs>
		  <rhs>
		    <nonterminal def="#ebnf.literal.string">CharacterStringLiteral</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.filename">
		  <lhs>FileName</lhs>
		  <rhs>
		    <nonterminal def="#ebnf.literal.string">CharacterStringLiteral</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.parameters">
		  <lhs>Parameters</lhs>
		  <rhs>
		    <code>(</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.pattern">Pattern</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.typeparameters">
		  <lhs>TypeParameters</lhs>
		  <rhs>
		    <code>[</code> <nonterminal def="#ebnf.typevariable">TypeVariable</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.typevariable">TypeVariable</nonterminal> <code>]</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.argumenttypes">
		  <lhs>ArgumentTypes</lhs>
		  <rhs>
		    <code>(</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.returntype">
		  <lhs>ReturnType</lhs>
		  <rhs>
		    <code>::</code> <nonterminal def="#ebnf.type">Type</nonterminal>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.arguments">
		  <lhs>Arguments</lhs>
		  <rhs>
		    <code>(</code> <nonterminal def="#ebnf.expression">Expression</nonterminal>  <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.expression">Expression</nonterminal> <code>)</code>
		  </rhs>
		</production>
		
		<production xml:id="ebnf.typearguments">
		  <lhs>TypeArguments</lhs>
		  <rhs>
		    <code>[</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>,</code> <emphasis role="bold">&#x2026;</emphasis> <code>,</code> <nonterminal def="#ebnf.type">Type</nonterminal> <code>]</code>
		  </rhs>
		</production>
		
		</productionset>
		
		<constraintdef xml:id="tuplesize">
		<title>Tuple Size &#x2265; 2</title>
		<para>A tuple must contain at least two elements. No 0-tuples or 1-tuples are permitted.</para>
		</constraintdef>
		
		</para>


		<section xml:id="ref.syntax.EBNF.links">
		  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.syntax.lexical">Lexical Specifications</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.style">Syntactic and Stylistic Conventions</olink></para></listitem>
		</itemizedlist>
		  
	  </section>
	</section>
