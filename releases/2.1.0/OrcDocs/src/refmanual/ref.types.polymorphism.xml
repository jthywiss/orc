<?xml version="1.0" encoding="UTF-8"?>
<!-- ref.types.polymorphism.xml - DocBook source for an Orc reference manual section

     $Id$

     Copyright (c) 2011 The University of Texas at Austin. All rights reserved.

     Use and redistribution of this file is governed by the license terms in
     the LICENSE file found in the project's top-level directory and also found at
     URL: http://orc.csres.utexas.edu/license.shtml .
  -->

<!-- Type polymorphism -->
<section xml:id="ref.types.polymorphism" xmlns="http://docbook.org/ns/docbook">
	<title>Parametric Polymorphism</title>
	
	<para>
	The Orc type system supports <indexterm significance="preferred"><primary>parametric polymorphism</primary></indexterm><firstterm>parametric polymorphism</firstterm>: functions,
	sites, and types may accept type parameters. This is the same theory that 
	underlies Java's generics.
	</para>
	
	<para>
	Parametric polymorphism occurs in three contexts: the <link linkend="ref.declarations.type">declaration</link> of a parametric type, the <link linkend="ref.declarations.def">definition</link> of a
	polymorphic function, or a <link linkend="ref.expressions.call">call</link> to a polymorphic function or site.
	</para>
	 
	<section xml:id="ref.types.polymorphism.types">
	<title>Parametric types</title>

    <para>
	    <productionset>
	    <productionrecap linkend="ebnf.type.application"/>
	    </productionset>
	  </para>

		<para>
			Orc has a special form of type, called a <indexterm significance="preferred"><primary>type application</primary></indexterm><firstterm>type application</firstterm>, which
			applies a type operator to a sequence of type arguments. This permits the instantiation
			of multiple variations of the same type. The simplest example of this feature is the
			<link linkend="ref.data.list.type"><code>List</code></link> type operator. For example, the list value <code>[1,2,3]</code> has the type <code>List[Integer]</code>,
			whereas the list value <code>[true, false]</code> has the type <code>List[Boolean]</code>. 
		</para>

		<para>
			Lists are not the only parametric type. The <link linkend="ref.stdlib">standard library</link> includes other parametric types, such as
			<code>Option</code>, <link linkend="ref.stdlib.state.Channel"><code>Channel</code></link>, and <link linkend="ref.stdlib.state.Cell"><code>Cell</code></link>. 
			A <link linkend="ref.declarations.type.alias">type alias</link> may have type parameters, thus defining a parametric type. 
			Similarly, a <link linkend="ref.declarations.type.datatype">datatype declaration</link> may also have type parameters.
		</para>

  </section>

		<section xml:id="ref.types.polymorphism.functions">
		<title>Parametric functions</title>
		
		<para>
			A function may be polymorphic, taking one or more type parameters. Such functions can be
			operate generically over different types.
			Consider the following definition of the <code>append</code> function, which appends two lists:
			
			<programlisting language="orc"><![CDATA[
def append[T](List[T], List[T]) :: List[T]
def append([], l) = l
def append(h::t, l) = h::append(t,l)
]]></programlisting>
			
			The function <code>append</code> has a type parameter <replaceable>T</replaceable> in its signature. 
			The type <replaceable>T</replaceable> is the type of the elements in the lists being appended.
			Notice that both argument lists must contain the same type of elements. 
			The resulting list contains elements of that same type.
		</para>
		
		</section>


		<section xml:id="ref.types.polymorphism.calls">
		<title>Polymorphic calls</title>
		
			<para>
			When calling the <code>append</code> function, in addition to providing its normal arguments, we must
			also provide its type argument:
			
			<programlisting language="orc"><![CDATA[
append[Integer]([1,2,3], [4,5])
]]></programlisting>
			
			However, it would be very burdensome and verbose to provide type arguments to all such calls. Fortunately,
			in most cases, the type checker can infer the correct type arguments, in the same way that it infers
			the correct type for many expressions without any additional information. So in this case, we can
			simply write:
			
			<programlisting language="orc"><![CDATA[
append([1,2,3], [4,5])
]]></programlisting>
			
			and the typechecker infers that the parameter <replaceable>T</replaceable> is <code>Integer</code>, since both argument lists are
			of type <code>List[Integer]</code>. For a more thorough explanation of how this inference occurs, please
			refer to <link linkend="ref.types.metatheory.origin">the typing algorithm</link> on which the Orc typechecker is based.
			</para>
			
			<para>
			Inference of type arguments will always fail on certain kinds of calls, because the typechecker does
			not have enough information to infer the correct type. The most common case is a site call which
			constructs a parametric type without taking any arguments. For example, the call <code>Channel()</code>
			will never typecheck, since there is no way for the typechecker to know what type of elements the
			channel should contain. In other languages such as ML, the typechecker might be able to infer this information
			from the rest of the program, but Orc's typechecker is based on <emphasis>local</emphasis> type inference,
			which must find the information locally, such as from the types of the arguments. So, to construct
			a channel that will contain <link linkend="ref.data.numeric.type">numbers</link>, a type argument must be given: <code>Channel[Number]()</code>.		
			</para>
		
		</section>

	<section xml:id="ref.types.polymorphism.links">
	  <title>Related Links</title>
		<itemizedlist>
			<title>Related Reference Topics</title>
			<listitem><para><link linkend="ref.types.metatheory">Type System Metatheory</link></para></listitem>
			<listitem><para><link linkend="ref.types.subtyping.variance">Variance</link></para></listitem>
			<listitem><para><link linkend="ref.expressions.call">Site and Function Calls</link></para></listitem>
			<listitem><para><link linkend="ref.types.typeinfo.function">Adding Type Information to Functions</link></para></listitem>
			<listitem><para><link linkend="ref.declarations.type.datatype">Datatype Declaration</link></para></listitem>
		</itemizedlist>
		<itemizedlist>
			<title>Related Tutorial Sections</title>
			<listitem><para><olink targetdoc="userguide" targetptr="ug.additional.typecheck">Type Checking</olink></para></listitem>
		</itemizedlist>
	  </section>
	  
</section>
