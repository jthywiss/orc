@inproceedings{KitchinQuarkCook2009a,
	Author = {Kitchin, David and Quark, Adrian and Cook, William R. and Misra, Jayadev},
	Booktitle = {Proceedings of FMOODS/FORTE 2009},
	City = {Lisbon, Portugal},
	Date = {9--11 Jun 2009},
	Date-Added = {2009-04-03 16:24:57 -0500},
	Date-Modified = {2009-07-19 22:35:27 -0500},
	Doi = {10.1007/978-3-642-02138-1\_1},
	Editor = {Lee, David and Lopes, Ant{\'o}nia and Poetzsch-Heffter, Arnd},
	Isbn = {978-3-642-02137-4},
	Issn = {0302-9743},
	Pages = {1--25},
	Publisher = {Springer},
	Series = {Lecture Notes in Computer Science},
	Title = {The {Orc} Programming Language},
	Volume = {5522},
	Year = {2009},
	Abstract = {Orc was originally presented as a process calculus. It has now evolved into a full programming language, which we describe in this paper. The language has the structure and feel of a functional programming language, yet it handles many non-functional aspects effectively, including spawning of concurrent threads, time-outs and mutable state. We first describe the original concurrency combinators of the process calculus. Next we describe a small functional programming language that forms the core language. Then we show how the concurrency combinators of the process calculus and the functional core language are integrated seamlessly. The resulting language and its supporting libraries have proven very effective in describing typical concurrent computations; we demonstrate how several practical concurrent programming problems are easily solved in Orc.},
	Annote = {Proceedings of the 11th Formal Methods for Open Object-Based Distributed Systems and 29th Formal Techniques for Networked and Distributed Systems},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/978-3-642-02138-1_1}}
